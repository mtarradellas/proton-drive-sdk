/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/drive/photos/volumes/{volumeID}/albums/{linkID}/add-multiple': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add photos to an album */
        post: operations['post_drive-photos-volumes-{volumeID}-albums-{linkID}-add-multiple'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/photos/volumes/{volumeID}/albums': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List current user albums */
        get: operations['get_drive-photos-volumes-{volumeID}-albums'];
        put?: never;
        /** Create an album */
        post: operations['post_drive-photos-volumes-{volumeID}-albums'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/photos/volumes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a photo volume
         * @description Also, creates :
         *     + root folder for the new Photo Volume
         *     + Photo share for the new Photo Volume
         *     + Adds ShareMember with given Address ID
         */
        post: operations['post_drive-photos-volumes'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/photos/volumes/{volumeID}/albums/{linkID}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update an album */
        put: operations['put_drive-photos-volumes-{volumeID}-albums-{linkID}'];
        post?: never;
        /** Delete an album */
        delete: operations['delete_drive-photos-volumes-{volumeID}-albums-{linkID}'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/photos/volumes/{volumeID}/albums/{linkID}/duplicates': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Find duplicates in album */
        post: operations['post_drive-photos-volumes-{volumeID}-albums-{linkID}-duplicates'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/photos/volumes/{volumeID}/tags-migration': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get photo tag migration status */
        get: operations['get_drive-photos-volumes-{volumeID}-tags-migration'];
        put?: never;
        /** Update tag migration status */
        post: operations['post_drive-photos-volumes-{volumeID}-tags-migration'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/photos/volumes/{volumeID}/albums/{linkID}/children': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List photos in album */
        get: operations['get_drive-photos-volumes-{volumeID}-albums-{linkID}-children'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/photos/volumes/{volumeID}/recover-multiple': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Recover photos from your photo volume */
        put: operations['put_drive-photos-volumes-{volumeID}-recover-multiple'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/photos/volumes/{volumeID}/albums/{linkID}/remove-multiple': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['post_drive-photos-volumes-{volumeID}-albums-{linkID}-remove-multiple'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/photos/albums/shared-with-me': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_drive-photos-albums-shared-with-me'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/volumes/{volumeID}/links/transfer-multiple': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Transfer photos from and to albums
         * @deprecated
         */
        put: operations['put_drive-volumes-{volumeID}-links-transfer-multiple'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/photos/volumes/{volumeID}/links/transfer-multiple': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Transfer photos from and to albums */
        put: operations['put_drive-photos-volumes-{volumeID}-links-transfer-multiple'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/urls/{token}/bookmark': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create ShareURL Bookmark
         * @description It creates a bookmark for the user in an already existing ShareURL. The bookmark would be stored for the current user if the password is encrypted with his/her addressKey
         */
        post: operations['post_drive-v2-urls-{token}-bookmark'];
        /**
         * Delete ShareURL Bookmark
         * @description It soft deletes the bookmark share url, that would be GC later. The user should be the owner of the bookmark.
         */
        delete: operations['delete_drive-v2-urls-{token}-bookmark'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/shared-bookmarks': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all Bookmarks
         * @description This endpoint would only show active bookmarks from the user doing the request
         */
        get: operations['get_drive-v2-shared-bookmarks'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/devices': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List devices
         * @description Gives a list of devices for current user, ordered by creationTime DESC
         */
        get: operations['get_drive-devices'];
        put?: never;
        /** Create a Device */
        post: operations['post_drive-devices'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/devices/{deviceID}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update device */
        put: operations['put_drive-devices-{deviceID}'];
        post?: never;
        /** Delete a device */
        delete: operations['delete_drive-devices-{deviceID}'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/devices': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List devices (v2) */
        get: operations['get_drive-v2-devices'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/shares/{shareID}/documents': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create document
         * @description Create a new proton document.
         */
        post: operations['post_drive-shares-{shareID}-documents'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/shares/{shareID}/events/latest': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get latest share event
         * @deprecated
         * @description Get latest EventID for a given share. Deprecated: Use events per volume instead.
         */
        get: operations['get_drive-shares-{shareID}-events-latest'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/volumes/{volumeID}/events/latest': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get latest volume event
         * @description Get latest EventID for a given volume.
         */
        get: operations['get_drive-volumes-{volumeID}-events-latest'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/shares/{shareID}/events/{eventID}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List share events
         * @deprecated
         * @description Get new events for given share since eventID. Deprecated: Use events per volume instead.
         */
        get: operations['get_drive-shares-{shareID}-events-{eventID}'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/volumes/{volumeID}/events/{eventID}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List volume events
         * @description Get new events for given volume since eventID.
         */
        get: operations['get_drive-volumes-{volumeID}-events-{eventID}'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/volumes/{volumeID}/events/{eventID}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List volume events (v2)
         * @description Get new events for given volume since eventID.
         *     RFC: https://drive.gitlab-pages.protontech.ch/documentation/rfcs/0054-light-events/
         */
        get: operations['get_drive-v2-volumes-{volumeID}-events-{eventID}'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/shares/{shareID}/folders': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a folder
         * @description Create a new folder in a given share, under a given folder link.
         */
        post: operations['post_drive-shares-{shareID}-folders'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/shares/{shareID}/folders/{linkID}/delete_multiple': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete children
         * @description Permanently delete children from folder, skipping trash. Can only be done for draft links.
         */
        post: operations['post_drive-shares-{shareID}-folders-{linkID}-delete_multiple'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/shares/{shareID}/folders/{linkID}/children': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List folder children
         * @description List children of a given folder.
         */
        get: operations['get_drive-shares-{shareID}-folders-{linkID}-children'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/shares/{shareID}/folders/{linkID}/trash_multiple': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Trash children
         * @description Send children to trash
         */
        post: operations['post_drive-shares-{shareID}-folders-{linkID}-trash_multiple'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/shares/{shareID}/folders/{linkID}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update folder attributes */
        put: operations['put_drive-shares-{shareID}-folders-{linkID}'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/volumes/{volumeID}/folders': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a folder (v2)
         * @description Create a new folder in a given share, under a given folder link.
         */
        post: operations['post_drive-v2-volumes-{volumeID}-folders'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/volumes/{volumeID}/folders/{linkID}/children': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List folder children (v2)
         * @description List children IDs of a given folder.
         */
        get: operations['get_drive-v2-volumes-{volumeID}-folders-{linkID}-children'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/volumes/{volumeID}/links/{linkID}/checkAvailableHashes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Check available hashes
         * @description Filter unavailable hashes out of a list of hashes under a given parent folder.
         *
         *     Pending hashes from drafts are also listed. They can be filtered with a list of ClientUID.
         */
        post: operations['post_drive-v2-volumes-{volumeID}-links-{linkID}-checkAvailableHashes'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/shares/{shareID}/links/{linkID}/checkAvailableHashes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Check available hashes
         * @description Filter unavailable hashes out of a list of hashes under a given parent folder.
         *
         *     Pending hashes from drafts are also listed. They can be filtered with a list of ClientUID.
         */
        post: operations['post_drive-shares-{shareID}-links-{linkID}-checkAvailableHashes'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/volumes/{volumeID}/links/{linkID}/copy': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Copy a node to a volume
         * @description Copy a single file to a volume, providing the new parent link ID.
         */
        post: operations['post_drive-volumes-{volumeID}-links-{linkID}-copy'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/volumes/{volumeID}/delete_multiple': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete multiple (v2)
         * @description Permanently delete links, skipping trash. Can only be done for draft links.
         */
        post: operations['post_drive-v2-volumes-{volumeID}-delete_multiple'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/shares/{shareID}/links/fetch_metadata': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Fetch links in share */
        post: operations['post_drive-shares-{shareID}-links-fetch_metadata'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/volumes/{volumeID}/links/fetch_metadata': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Fetch links in volume */
        post: operations['post_drive-volumes-{volumeID}-links-fetch_metadata'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/shares/{shareID}/links/{linkID}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get link data
         * @description Retrieve individual link information.
         */
        get: operations['get_drive-shares-{shareID}-links-{linkID}'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/sanitization/mhk': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List folders with missing hash keys */
        get: operations['get_drive-sanitization-mhk'];
        put?: never;
        /** List folders with missing hash keys */
        post: operations['post_drive-sanitization-mhk'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/volumes/{volumeID}/links': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Load links details */
        post: operations['post_drive-v2-volumes-{volumeID}-links'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/volumes/{volumeID}/links/move-multiple': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Move a batch of files, folders or photos. */
        put: operations['put_drive-volumes-{volumeID}-links-move-multiple'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/shares/{shareID}/links/{linkID}/move': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Move link
         * @description Move a file or folder. Client must provide new values for fields encrypted with parent NodeKey.
         *
         *     Clients moving a file or folder MUST reuse the existing session keys
         *     for the name and passphrase as these are also used by shares pointing
         *     to the link. The passphrase should NOT be changed, reusing same session key as previously.
         */
        put: operations['put_drive-shares-{shareID}-links-{linkID}-move'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/volumes/{volumeID}/links/{linkID}/rename': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Rename link
         * @description Rename a file or folder. Client must provide new values for fields linked to name.
         *
         *     Clients renaming a file or folder MUST reuse the existing session key
         *     for the name as it is also used by shares pointing to the link.
         */
        put: operations['put_drive-v2-volumes-{volumeID}-links-{linkID}-rename'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/shares/{shareID}/links/{linkID}/rename': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Rename link
         * @description Rename a file or folder. Client must provide new values for fields linked to name.
         *
         *     Clients renaming a file or folder MUST reuse the existing session key
         *     for the name as it is also used by shares pointing to the link.
         */
        put: operations['put_drive-shares-{shareID}-links-{linkID}-rename'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/volumes/{volumeID}/links/{linkID}/move': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Move link (v2)
         * @description Move a file or folder. Client must provide new values for fields encrypted with parent NodeKey.
         *     Clients moving a file or folder MUST reuse the existing session keys
         *     for the name and passphrase as these are also used by shares pointing
         *     to the link. The passphrase should NOT be changed,reusing same session key as previously
         */
        put: operations['put_drive-v2-volumes-{volumeID}-links-{linkID}-move'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/volumes/{volumeID}/files/{linkID}/revisions/{revisionID}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get revision
         * @description Get detailed revision information.
         */
        get: operations['get_drive-v2-volumes-{volumeID}-files-{linkID}-revisions-{revisionID}'];
        /**
         * Commit a revision
         * @description The revision becomes the current active one and the updated file content become available for reading.
         *
         *     If NO `BlockNumber` parameter is passed when creating a new revision,
         *     ALL blocks after the greatest index in the submitted block list will be
         *     truncated for this revision. All blocks for the new revision should be
         *     submitted. If `BlockNumber` is submitted, all previous blocks
         *     1...BlockNumber will be preserved if they are not overridden by a new block
         *     BlockNumber+1... will be discarded.
         */
        put: operations['put_drive-v2-volumes-{volumeID}-files-{linkID}-revisions-{revisionID}'];
        post?: never;
        /**
         * Delete an obsolete/draft revision
         * @description Only the volume owner can delete obsolete revisions. Members with write permission can only delete drafts.
         *     This will return an error code 2511 INCOMPATIBLE_STATE if the revision is active. Create or revert to
         *     another revision first. You cannot delete a draft revision for a draft link. Delete the link instead.
         */
        delete: operations['delete_drive-v2-volumes-{volumeID}-files-{linkID}-revisions-{revisionID}'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/shares/{shareID}/files/{linkID}/revisions/{revisionID}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get revision
         * @description Get detailed revision information.
         */
        get: operations['get_drive-shares-{shareID}-files-{linkID}-revisions-{revisionID}'];
        /**
         * Commit a revision
         * @description The revision becomes the current active one and the updated file content become available for reading.
         *
         *     If NO `BlockNumber` parameter is passed when creating a new revision,
         *     ALL blocks after the greatest index in the submitted block list will be
         *     truncated for this revision. All blocks for the new revision should be
         *     submitted. If `BlockNumber` is submitted, all previous blocks
         *     1...BlockNumber will be preserved if they are not overridden by a new block
         *     BlockNumber+1... will be discarded.
         */
        put: operations['put_drive-shares-{shareID}-files-{linkID}-revisions-{revisionID}'];
        post?: never;
        /**
         * Delete an obsolete/draft revision
         * @description Only the volume owner can delete obsolete revisions. Members with write permission can only delete drafts.
         *     This will return an error code 2511 INCOMPATIBLE_STATE if the revision is active. Create or revert to
         *     another revision first. You cannot delete a draft revision for a draft link. Delete the link instead.
         */
        delete: operations['delete_drive-shares-{shareID}-files-{linkID}-revisions-{revisionID}'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/volumes/{volumeID}/files': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new file */
        post: operations['post_drive-v2-volumes-{volumeID}-files'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/shares/{shareID}/files': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new file */
        post: operations['post_drive-shares-{shareID}-files'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/volumes/{volumeID}/files/{linkID}/revisions': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List revisions */
        get: operations['get_drive-v2-volumes-{volumeID}-files-{linkID}-revisions'];
        put?: never;
        /**
         * Create revision
         * @description Create a new revision on an existing link.
         *     Only one draft can be created at a time. A draft can be deleted using the DELETE revision endpoint if the new
         *     draft should be created regardless. The error code indicates the reason for failure.
         *
         *     Client unique ID can be used to track revision ownership to improve concurrency control.
         *     It can be a single persistent client ID generated by the client and stored locally,
         *     or it can be specific to the revision.
         *     The client can use it to identify revisions in case it failed to receive the confirmation of the revision creation.
         */
        post: operations['post_drive-v2-volumes-{volumeID}-files-{linkID}-revisions'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/shares/{shareID}/files/{linkID}/revisions': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List revisions */
        get: operations['get_drive-shares-{shareID}-files-{linkID}-revisions'];
        put?: never;
        /**
         * Create revision
         * @description Create a new revision on an existing link.
         *     Only one draft can be created at a time. A draft can be deleted using the DELETE revision endpoint if the new
         *     draft should be created regardless. The error code indicates the reason for failure.
         *
         *     Client unique ID can be used to track revision ownership to improve concurrency control.
         *     It can be a single persistent client ID generated by the client and stored locally,
         *     or it can be specific to the revision.
         *     The client can use it to identify revisions in case it failed to receive the confirmation of the revision creation.
         */
        post: operations['post_drive-shares-{shareID}-files-{linkID}-revisions'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/shares/{shareID}/files/{linkID}/revisions/{revisionID}/thumbnail': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get revision thumbnail */
        get: operations['get_drive-shares-{shareID}-files-{linkID}-revisions-{revisionID}-thumbnail'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/volumes/{volumeID}/files/{linkID}/revisions/{revisionID}/restore': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Restore a revision */
        post: operations['post_drive-v2-volumes-{volumeID}-files-{linkID}-revisions-{revisionID}-restore'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/shares/{shareID}/files/{linkID}/revisions/{revisionID}/restore': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Restore a revision */
        post: operations['post_drive-shares-{shareID}-files-{linkID}-revisions-{revisionID}-restore'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/volumes/{volumeID}/links/{linkID}/revisions/{revisionID}/verification': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get verification data.
         * @description Get data to verify encryption of the revision before committing.
         */
        get: operations['get_drive-v2-volumes-{volumeID}-links-{linkID}-revisions-{revisionID}-verification'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/shares/{shareID}/links/{linkID}/revisions/{revisionID}/verification': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get verification data.
         * @description Get data to verify encryption of the revision before committing.
         */
        get: operations['get_drive-shares-{shareID}-links-{linkID}-revisions-{revisionID}-verification'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/volumes/{volumeID}/trash/delete_multiple': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete items from trash
         * @description Permanently delete list of links from trash of a given share.
         */
        post: operations['post_drive-v2-volumes-{volumeID}-trash-delete_multiple'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/shares/{shareID}/trash/delete_multiple': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete items from trash
         * @description Permanently delete list of links from trash of a given share.
         */
        post: operations['post_drive-shares-{shareID}-trash-delete_multiple'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/shares/{shareID}/trash': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List share trash
         * @deprecated
         * @description List all trashed items of a given share.
         *     Only used by clients that don’t show photos and devices. Going forward, the volume-based route should be used instead.
         *
         *     CANNOT be used on Photo-Volume -> use volume-trash
         */
        get: operations['get_drive-shares-{shareID}-trash'];
        put?: never;
        post?: never;
        /**
         * Empty share trash
         * @deprecated
         * @description Permanently delete all links from trash of a given share.
         *     Only used by clients that don’t show photos and devices. Going forward, the volume-based route should be used instead.
         *
         *     CANNOT be used on Photo-Volume -> use volume-trash
         */
        delete: operations['delete_drive-shares-{shareID}-trash'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/volumes/{volumeID}/trash': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List volume trash */
        get: operations['get_drive-volumes-{volumeID}-trash'];
        put?: never;
        post?: never;
        /**
         * Empty volume trash
         * @description When there are fewer items in trash than a certain threshold, trash will be deleted synchronously returning a 200 HTTP code.
         *     Otherwise, it will happen async returning a 202 HTTP code.
         */
        delete: operations['delete_drive-volumes-{volumeID}-trash'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/volumes/{volumeID}/trash/restore_multiple': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Restore items from trash
         * @description Restore list of links from trash to original location.
         *
         *     /shares endpoint should NOT be used on Photo-Volume -> use volume-trash
         */
        put: operations['put_drive-v2-volumes-{volumeID}-trash-restore_multiple'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/shares/{shareID}/trash/restore_multiple': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Restore items from trash
         * @description Restore list of links from trash to original location.
         *
         *     /shares endpoint should NOT be used on Photo-Volume -> use volume-trash
         */
        put: operations['put_drive-shares-{shareID}-trash-restore_multiple'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/volumes/{volumeID}/trash_multiple': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Trash multiple (v2)
         * @description Send multiple links to the trash
         */
        post: operations['post_drive-v2-volumes-{volumeID}-trash_multiple'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/blocks': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Request block upload
         * @description Request upload information for a set of blocks.
         */
        post: operations['post_drive-blocks'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/volumes/{volumeID}/files/small': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload small file
         * @description This does not support anonymous uploads (yet)
         */
        post: operations['post_drive-v2-volumes-{volumeID}-files-small'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/volumes/{volumeID}/files/{linkID}/revisions/small': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload small revision
         * @description This does not support anonymous uploads (yet)
         */
        post: operations['post_drive-v2-volumes-{volumeID}-files-{linkID}-revisions-small'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/me/active': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Ping active user
         * @description Endpoint that can be pinged by clients to mark a user as an active user
         */
        get: operations['get_drive-me-active'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/report/url': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Report Share URL */
        post: operations['post_drive-report-url'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/checklist/get-started': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get onboarding checklist */
        get: operations['get_drive-v2-checklist-get-started'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/onboarding': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_drive-v2-onboarding'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/checklist/get-started/seen-completed-list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark completed checklist as seen */
        post: operations['post_drive-v2-checklist-get-started-seen-completed-list'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/entitlements': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get entitlements
         * @description Get the current entitlements and their value for the logged-in user.
         */
        get: operations['get_drive-entitlements'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/photos/volumes/{volumeID}/links/{linkID}/tags': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add tags to existing photo */
        post: operations['post_drive-photos-volumes-{volumeID}-links-{linkID}-tags'];
        /** Remove tags from existing photo */
        delete: operations['delete_drive-photos-volumes-{volumeID}-links-{linkID}-tags'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/volumes/{volumeID}/photos/share': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * DEPRECATED: Create photo share
         * @deprecated
         */
        post: operations['post_drive-volumes-{volumeID}-photos-share'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/volumes/{volumeID}/photos/share/{shareID}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete empty photo share
         * @description Can only delete Photo Shares that are empty.
         */
        delete: operations['delete_drive-volumes-{volumeID}-photos-share-{shareID}'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/photos/volumes/{volumeID}/links/{linkID}/favorite': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Favorite existing photo */
        post: operations['post_drive-photos-volumes-{volumeID}-links-{linkID}-favorite'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/volumes/{volumeID}/photos/duplicates': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Find duplicates */
        post: operations['post_drive-volumes-{volumeID}-photos-duplicates'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/photos/migrate-legacy': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get status of migration from legacy photo share on a regular volume into a new Photo Volume */
        get: operations['get_drive-photos-migrate-legacy'];
        put?: never;
        /** Start migration from legacy photo share on a regular volume into a new Photo Volume */
        post: operations['post_drive-photos-migrate-legacy'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/volumes/{volumeID}/photos': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List photos sorted by capture time
         * @description When paginating to secondary pages, the PreviousPageLastLinkID must be provided.
         */
        get: operations['get_drive-volumes-{volumeID}-photos'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/photos/volumes/{volumeID}/links/{linkID}/revisions/{revisionID}/xattr': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update xAttr Photo-Link
         * @description ONLY for use by iOS, due to a bug in the iOS client, xAttr were not populated for photos, the client can use this endpoint to fix this.
         */
        put: operations['put_drive-photos-volumes-{volumeID}-links-{linkID}-revisions-{revisionID}-xattr'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/urls/{token}/files/{linkID}/checkAvailableHashes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Check available hashes
         * @description Filter unavailable hashes out of a list of hashes under a given parent folder.
         *
         *     Pending hashes from drafts are also listed. They can be filtered with a list of ClientUID.
         */
        post: operations['post_drive-urls-{token}-files-{linkID}-checkAvailableHashes'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/urls/{token}/files/{linkID}/revisions/{revisionID}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Commit a revision
         * @description The revision becomes the current active one and the updated file content become available for reading.
         *
         *     If NO `BlockNumber` parameter is passed when creating a new revision,
         *     ALL blocks after the greatest index in the submitted block list will be
         *     truncated for this revision. All blocks for the new revision should be
         *     submitted. If `BlockNumber` is submitted, all previous blocks
         *     1...BlockNumber will be preserved if they are not overridden by a new block
         *     BlockNumber+1... will be discarded.
         */
        put: operations['put_drive-urls-{token}-files-{linkID}-revisions-{revisionID}'];
        post?: never;
        /**
         * Delete a draft revision.
         * @description This will return an error code 2511 INCOMPATIBLE_STATE if the revision is active or obsolete.
         *     You cannot delete a draft revision for a draft link. Delete the link instead.
         */
        delete: operations['delete_drive-urls-{token}-files-{linkID}-revisions-{revisionID}'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/urls/{token}/documents': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create anonymous document.
         * @description Create a new anonymous proton document.
         */
        post: operations['post_drive-urls-{token}-documents'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/urls/{token}/files': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create file.
         * @description Create a new file.
         */
        post: operations['post_drive-urls-{token}-files'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/urls/{token}/folders': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a folder.
         * @description Create a new folder in a given share, under a given folder link.
         */
        post: operations['post_drive-urls-{token}-folders'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/urls/{token}/folders/{linkID}/delete_multiple': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete children
         * @description Permanently delete children from folder, skipping trash.
         */
        post: operations['post_drive-urls-{token}-folders-{linkID}-delete_multiple'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/urls/{token}/links/fetch_metadata': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Fetch links metadata using token
         * @description This endpoint is a sibling of /drive/volumes/{volumeID}/links/fetch_metadata, but using token
         *     instead of volumeID. Is meant to be used in public sharing.
         */
        post: operations['post_drive-urls-{token}-links-fetch_metadata'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/urls/{token}/links/{linkID}/path': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch link parentIDs by token */
        get: operations['get_drive-urls-{token}-links-{linkID}-path'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/urls/{token}/links/{linkID}/rename': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Rename entry
         * @description Rename a file or folder. Client must provide new values for fields linked to name.
         *
         *     Clients renaming a file or folder MUST reuse the existing session key
         *     for the name as it is also used by shares pointing to the link.
         */
        put: operations['put_drive-urls-{token}-links-{linkID}-rename'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/urls/{token}/blocks': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Request block upload.
         * @description Request upload information for a set of blocks.
         */
        post: operations['post_drive-urls-{token}-blocks'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/urls/{token}/links/{linkID}/revisions/{revisionID}/verification': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get verification data.
         * @description Get data to verify encryption of the revision before committing.
         */
        get: operations['get_drive-urls-{token}-links-{linkID}-revisions-{revisionID}-verification'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/volumes/{volumeID}/urls': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List ShareURLs in a volume */
        get: operations['get_drive-volumes-{volumeID}-urls'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/shares/{shareID}/map': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search map
         * @deprecated
         * @description Used only for search on web that does not scale. Should be replaced by better version in the future.
         */
        get: operations['get_drive-shares-{shareID}-map'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/shares/my-files': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Bootstrap my files */
        get: operations['get_drive-v2-shares-my-files'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/shares/{shareID}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get share bootstrap */
        get: operations['get_drive-shares-{shareID}'];
        put?: never;
        post?: never;
        /**
         * Delete a standard share by ID
         * @description Only standard shares (type 2) can be deleted this way.
         *     Will throw 422 with body code 2005 if Members, ShareURLs or Invitations are still attached to the share.
         *     Use Force=1 query param to delete the share together with any attached entities.
         */
        delete: operations['delete_drive-shares-{shareID}'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/volumes/{volumeID}/links/{linkID}/context': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get context share
         * @description Gets the highest share, meaning closest to the root, for a link
         */
        get: operations['get_drive-volumes-{volumeID}-links-{linkID}-context'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/shares': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List shares
         * @description List shares available to current user.
         *
         *     The results can be restricted to a single address by providing the AddressID query parameter.
         *     By default, only active shares are shown.
         *     Passing the ShowAll=1 query parameter will show locked and disabled shares also.
         */
        get: operations['get_drive-shares'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/shares/{shareID}/owner': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update ownership of a share
         * @description Replace the signature and related membership of the share.
         *     This allows users to change the associated address & key they use for a share, so that they can get rid of it.
         */
        post: operations['post_drive-shares-{shareID}-owner'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/migrations/shareaccesswithnode': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Migrate legacy Shares */
        post: operations['post_drive-migrations-shareaccesswithnode'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/migrations/shareaccesswithnode/unmigrated': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List unmigrated shares
         * @description List shares that have not been migrated to the new PassphraseNodeKeyPacket yet.
         *     Will throw a 422 with Code 2000 if the current user doesn't have any active Volume.
         */
        get: operations['get_drive-migrations-shareaccesswithnode-unmigrated'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/urls/{token}/info': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Initiate shared by URL session with SRP. */
        get: operations['get_drive-urls-{token}-info'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/urls/{token}/auth': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Perform Handshake, Get session information */
        post: operations['post_drive-urls-{token}-auth'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/urls/{token}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Shared File Information. */
        get: operations['get_drive-urls-{token}'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/urls/{token}/folders/{linkID}/children': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List shared folder's children. */
        get: operations['get_drive-urls-{token}-folders-{linkID}-children'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/urls/{token}/files/{linkID}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Shared File & Revision Metadata. */
        get: operations['get_drive-urls-{token}-files-{linkID}'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/urls/{token}/file': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get Shared File Information. */
        post: operations['post_drive-urls-{token}-file'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/shares/{shareID}/urls': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List URL links on share. */
        get: operations['get_drive-shares-{shareID}-urls'];
        put?: never;
        /** Share by URL
         *     Create a share by URL link. */
        post: operations['post_drive-shares-{shareID}-urls'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/shares/{shareID}/urls/{urlID}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update a share by URL link.
         * @description Only values which are set in the request are updated. When the password is updated, the password, SharePassphraseKeyPacket and SRPVerifier must be updated together.
         */
        put: operations['put_drive-shares-{shareID}-urls-{urlID}'];
        post?: never;
        /** Delete a Share URL */
        delete: operations['delete_drive-shares-{shareID}-urls-{urlID}'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/shares/{shareID}/urls/delete_multiple': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete multiple ShareURL in a batch. */
        post: operations['post_drive-shares-{shareID}-urls-delete_multiple'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/volumes/{volumeID}/shares': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a standard share
         * @description Cannot create two shares on the same link. Throws 422 with code 2500 in case a share already exists.
         */
        post: operations['post_drive-volumes-{volumeID}-shares'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/volumes/{volumeID}/shares': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Shared by me
         * @description List Collaborative Shares in the given volume that are not abandoned, i.e. they either have members, invitations or URLs attached.
         */
        get: operations['get_drive-v2-volumes-{volumeID}-shares'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/sharedwithme': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Shared with me
         * @description List Collaborative Shares the user has access to as a non-owner
         */
        get: operations['get_drive-v2-sharedwithme'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/shares/{shareID}/external-invitations/{invitationID}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update an external invitation
         * @description Only permissions can be changed. They can be changed when the external invitation is pending or accepted.
         *     After the external invitation has been accepted, the invitation's permissions can be edited.
         *     The current user must have admin permission on the share.
         */
        put: operations['put_drive-v2-shares-{shareID}-external-invitations-{invitationID}'];
        post?: never;
        /**
         * Delete an external invitation
         * @description The current user must have admin permission on the share.
         */
        delete: operations['delete_drive-v2-shares-{shareID}-external-invitations-{invitationID}'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/shares/{shareID}/external-invitations': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List external invitations in a share
         * @description The current user must have admin permission on the share.
         */
        get: operations['get_drive-v2-shares-{shareID}-external-invitations'];
        put?: never;
        /**
         * Invite an external user to a share
         * @description The current user must have admin permission on the share.
         */
        post: operations['post_drive-v2-shares-{shareID}-external-invitations'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/shares/external-invitations': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List external invitations of a user
         * @description List the UserRegistered external invitations where the current user is the invitee.
         */
        get: operations['get_drive-v2-shares-external-invitations'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/shares/{shareID}/external-invitations/{invitationID}/sendemail': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send the external invitation email to the invitee
         * @description The current user must have admin permission on the share.
         */
        post: operations['post_drive-v2-shares-{shareID}-external-invitations-{invitationID}-sendemail'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/shares/invitations/{invitationID}/accept': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Accept an invitation */
        post: operations['post_drive-v2-shares-invitations-{invitationID}-accept'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/shares/{shareID}/invitations/{invitationID}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update an invitation
         * @description Only permissions can be changed. They can be changed when the invitation is pending and when it has been rejected.
         *     The owner should not be aware of rejection. After the invitation has been accepted, membership permissions can be edited.
         *     The current user must have admin permission on the share.
         */
        put: operations['put_drive-v2-shares-{shareID}-invitations-{invitationID}'];
        post?: never;
        /**
         * Delete an invitation
         * @description The current user must have admin permission on the share.
         */
        delete: operations['delete_drive-v2-shares-{shareID}-invitations-{invitationID}'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/shares/{shareID}/invitations': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List invitations in a share
         * @description The current user must have admin permission on the share.
         */
        get: operations['get_drive-v2-shares-{shareID}-invitations'];
        put?: never;
        /**
         * Invite a Proton user to a share
         * @description The current user must have admin permission on the share.
         */
        post: operations['post_drive-v2-shares-{shareID}-invitations'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/shares/invitations': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List invitations of a user
         * @description List the pending invitations where the current user is the invitee.
         */
        get: operations['get_drive-v2-shares-invitations'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/shares/invitations/{invitationID}/reject': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reject an invitation */
        post: operations['post_drive-v2-shares-invitations-{invitationID}-reject'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/shares/{shareID}/invitations/{invitationID}/sendemail': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send the invitation email to the invitee
         * @description The current user must have admin permission on the share.
         */
        post: operations['post_drive-v2-shares-{shareID}-invitations-{invitationID}-sendemail'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/shares/invitations/{invitationID}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Return invitation information
         * @description Get the information about a pending invitation where the current user is the invitee.
         */
        get: operations['get_drive-v2-shares-invitations-{invitationID}'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/user-link-access': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List link accesses for a share url.
         * @description RFC: https://drive.gitlab-pages.protontech.ch/documentation/rfcs/0031-share-resolution-from-copied-url/
         */
        get: operations['get_drive-v2-user-link-access'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/shares/{shareID}/members': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List members in a share
         * @description The current user must have admin permission on the share.
         */
        get: operations['get_drive-v2-shares-{shareID}-members'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/shares/{shareID}/members/{memberID}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update a member
         * @description Only permissions can be changed. They can be changed when the member is active.
         *     The current user must have admin permission on the share.
         */
        put: operations['put_drive-v2-shares-{shareID}-members-{memberID}'];
        post?: never;
        /**
         * Remove a share member
         * @description If the current user is an admin of the share they can remove other members.
         *     If the current user is not an admin they can only remove themselves.
         */
        delete: operations['delete_drive-v2-shares-{shareID}-members-{memberID}'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/v2/shares/{shareID}/security': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Scan for malware (direct sharing)
         * @description Performs virus checks on hashes of files received in the request payload.
         *     See https://drive.gitlab-pages.protontech.ch/documentation/specifications/data/virus-scanning/
         */
        post: operations['post_drive-v2-shares-{shareID}-security'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/urls/{token}/security': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Scan for malware (public share URL)
         * @description Performs virus checks on hashes of files received in the request payload.
         *     See https://drive.gitlab-pages.protontech.ch/documentation/specifications/data/virus-scanning/
         */
        post: operations['post_drive-urls-{token}-security'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/volumes/{volumeID}/thumbnails': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Fetch thumbnails by IDs. */
        post: operations['post_drive-volumes-{volumeID}-thumbnails'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/me/settings': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user settings */
        get: operations['get_drive-me-settings'];
        /**
         * Update user settings
         * @description At least one setting must be provided.
         */
        put: operations['put_drive-me-settings'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/volumes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List volumes
         * @description List all volumes owned by the current user - can be between zero and two: none, regular and/or photo.
         *     It can also return volumes in locked state, which are - upon creation of new volumes - re-activated with new root shares.
         *     The pagination params Page and PageSize are deprecated.
         */
        get: operations['get_drive-volumes'];
        put?: never;
        /**
         * Create volume
         * @description Creating a new volume also creates :
         *      + root folder for the new Volume
         *      + Main share for the new Volume
         *      + Adds ShareMember with given Address ID
         *
         *     If the user already has a locked volume, then this locked volume is re-activated
         *     with a new root share and folder instead of creating a new volume.
         */
        post: operations['post_drive-volumes'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/volumes/{volumeID}/delete_locked': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Delete the whole volume if is locked or the locked root shares in the volume.
         * @description Web client calls this endpoint when the user decides to delete their locked data and not recover it.
         */
        put: operations['put_drive-volumes-{volumeID}-delete_locked'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/volumes/{volumeID}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get volume
         * @description Return the attributes of a specific volume.
         */
        get: operations['get_drive-volumes-{volumeID}'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/drive/volumes/{volumeID}/restore': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Restore locked data in volume.
         * @description The locked root shares in the volume can be recovered by providing the new encryption material for each share.
         *     This operation used to be heavy and processed async. But now it's quick and done synchronously.
         */
        put: operations['put_drive-volumes-{volumeID}-restore'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * ProtonResponseCode
         * @enum {integer}
         */
        ResponseCodeSuccess: 1000;
        ProtonSuccess: {
            Code: components['schemas']['ResponseCodeSuccess'];
        };
        ProtonError: {
            /** ErrorCode */
            Code: number;
            /** @description Error message */
            Error: string;
            /** @description Error description (can be an empty object) */
            Details: Record<string, never>;
        };
        DriveConstants: {
            /** @enum {integer} */
            BlockMaxSizeInBytes?: 5300000;
            /** @enum {integer} */
            ThumbnailMaxSizeInBytes?: 65536;
            /** @enum {integer} */
            DraftRevisionLifetimeInSec?: 14400;
            /** @enum {integer} */
            ExtendedAttributesMaxSizeInBytes?: 65535;
            /** @enum {integer} */
            UploadTokenExpirationTimeInSec?: 10800;
            /** @enum {integer} */
            DownloadTokenExpirationTimeInSec?: 1800;
        };
        AddPhotosToAlbumRequestDto: {
            AlbumData: components['schemas']['AlbumPhotoLinkDataDto'][];
        };
        CreateAlbumRequestDto: {
            Locked: boolean;
            Link: components['schemas']['AlbumLinkDto'];
        };
        CreateAlbumResponseDto: {
            Album: components['schemas']['AlbumShortResponseDto'];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        CreatePhotoShareRequestDto: {
            Share: components['schemas']['ShareDataDto'];
            Link: components['schemas']['LinkDataDto'];
        };
        GetPhotoVolumeResponseDto: {
            Volume: components['schemas']['PhotoVolumeResponseDto'];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        SuccessfulResponse: {
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        FindDuplicatesInput: {
            /** @description List of Name HMACs to check */
            NameHashes: string[];
        };
        FindDuplicatesOutputCollection: {
            DuplicateHashes: components['schemas']['FoundDuplicate'][];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        PhotoTagMigrationStatusResponseDto: {
            Finished: boolean;
            Anchor?: components['schemas']['PhotoTagMigrationDataDto'] | null;
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        ListAlbumsResponseDto: {
            Albums: components['schemas']['AlbumResponseDto'][];
            AnchorID?: string | null;
            More: boolean;
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        ListPhotosAlbumQueryParameters: {
            /** @default null */
            AnchorID: string | null;
            /**
             * @default Captured
             * @enum {string}
             */
            Sort: 'Captured' | 'Added';
            /** @default true */
            Desc: boolean;
            /** @default null */
            Tag: components['schemas']['TagType'] | null;
            /** @default false */
            OnlyChildren: boolean;
            /** @default false */
            IncludeTrashed: boolean;
        };
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>0</td><td>Favorites</td></tr><tr><td>1</td><td>Screenshots</td></tr><tr><td>2</td><td>Videos</td></tr><tr><td>3</td><td>LivePhotos</td></tr><tr><td>4</td><td>MotionPhotos</td></tr><tr><td>5</td><td>Selfies</td></tr><tr><td>6</td><td>Portraits</td></tr><tr><td>7</td><td>Bursts</td></tr><tr><td>8</td><td>Panoramas</td></tr><tr><td>9</td><td>Raw</td></tr></table></details></details>
         * @enum {integer}
         */
        TagType: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
        ListPhotosAlbumResponseDto: {
            Photos: components['schemas']['ListPhotosAlbumItemResponseDto'][];
            AnchorID?: string | null;
            More: boolean;
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        TransferPhotoLinksRequestDto: {
            ParentLinkID: components['schemas']['Id'];
            Links: components['schemas']['TransferPhotoLinkInBatchRequestDto'][];
            /**
             * Format: email
             * @description Signature email address used for signing name
             */
            NameSignatureEmail: string;
            /**
             * Format: email
             * @description Signature email address used for the NodePassphraseSignature.
             * @default null
             */
            SignatureEmail: string | null;
        };
        RemovePhotosFromAlbumRequestDto: {
            LinkIDs: components['schemas']['Id'][];
        };
        UpdatePhotoTagMigrationStatusRequestDto: {
            Finished: boolean;
            Anchor: components['schemas']['PhotoTagMigrationUpdateDto'];
        };
        /** @description An encrypted ID */
        Id: string;
        SharedWithMeResponseDto: {
            Albums: components['schemas']['AlbumResponseDto'][];
            AnchorID?: string | null;
            More: boolean;
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        UpdateAlbumRequestDto: {
            CoverLinkID?: components['schemas']['Id'] | null;
            Link?: components['schemas']['AlbumLinkUpdateDto'] | null;
        };
        CreateBookmarkShareURLRequestDto: {
            BookmarkShareURL: components['schemas']['BookmarkShareURLRequestDto'];
        };
        CreateBookmarkShareURLResponseDto: {
            BookmarkShareURL: components['schemas']['BookmarkShareURLResponseDto'];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        ListBookmarksOfUserResponseDto: {
            Bookmarks: components['schemas']['BookmarkShareURLInfoResponseDto'][];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        CreateDeviceRequestDto: {
            Device: components['schemas']['DeviceDataDto'];
            Share: components['schemas']['ShareDataDto2'];
            Link: components['schemas']['LinkDataDto'];
        };
        CreateDeviceResponseDto: {
            Device: components['schemas']['DeviceResponseDto'];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        ListDevicesResponseDto: {
            Devices: components['schemas']['DeviceResponseDto2'][];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        ListDevicesResponseDto2: {
            Devices: components['schemas']['DeviceResponseDto3'][];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        UpdateDeviceRequestDto: {
            /** @default null */
            Device: components['schemas']['DeviceDataDto2'] | null;
            /**
             * @deprecated
             * @default null
             */
            Share: components['schemas']['ShareDataDto3'] | null;
        };
        CreateDocumentDto: {
            ContentKeyPacket: components['schemas']['BinaryString'];
            ManifestSignature: components['schemas']['PGPSignature'];
            /**
             * @description Unencrypted signature of the content session key (plain text of the ContentKeyPacket), signed with the NodeKey.
             * @default null
             */
            ContentKeyPacketSignature: components['schemas']['PGPSignature'] | null;
            DocumentType?: components['schemas']['DocumentType'];
            Name: components['schemas']['PGPMessage'];
            /** @description File/folder name Hash */
            Hash: string;
            ParentLinkID: components['schemas']['Id'];
            NodePassphrase: components['schemas']['PGPMessage'];
            NodePassphraseSignature: components['schemas']['PGPSignature'];
            /**
             * Format: email
             * @description Signature email address used to sign passphrase and name
             */
            SignatureAddress: string;
            NodeKey: components['schemas']['PGPPrivateKey'];
        };
        CreateDocumentResponseDto: {
            Document: components['schemas']['DocumentDetailsDto'];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        LatestEventIDResponseDto: {
            EventID: components['schemas']['Id2'];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        ListEventsResponseDto: {
            Events: components['schemas']['EventResponseDto'][];
            /** @description Last event ID that can be used on the next call. Will be latest/newest-event-id if requested last-event-id does not exist. */
            EventID: string;
            /**
             * @description 1 if there is more to pull, i.e. there are more events than returned in one call
             * @enum {integer}
             */
            More: 0 | 1;
            /**
             * @description 1 if client needs to refresh from scratch as their provided event does not exist anymore, i.e. too much time passed since the last event sync
             * @enum {integer}
             */
            Refresh: 0 | 1;
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        ListEventsV2ResponseDto: {
            Events: components['schemas']['EventV2ResponseDto'][];
            /** @description Last event ID that can be used on the next call. Will be latest/newest-event-id if requested last-event-id does not exist. */
            EventID: string;
            /** @description true if there is more to pull, i.e. there are more events than returned in one call */
            More: boolean;
            /** @description true if client needs to refresh from scratch as their provided event does not exist anymore, i.e. too much time passed since the last event sync */
            Refresh: boolean;
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        CreateFolderRequestDto: {
            /** @description Node hash key (random bytes encoded in base64 format), encrypted and signed. */
            NodeHashKey: string;
            /**
             * @description Extended attributes encrypted with link key
             * @default null
             */
            XAttr: string | null;
            Name: components['schemas']['PGPMessage'];
            /** @description File/folder name Hash */
            Hash: string;
            ParentLinkID: components['schemas']['Id'];
            NodePassphrase: components['schemas']['PGPMessage'];
            NodePassphraseSignature: components['schemas']['PGPSignature'];
            /**
             * Format: email
             * @description Signature email address used to sign passphrase and name
             */
            SignatureAddress: string;
            NodeKey: components['schemas']['PGPPrivateKey'];
        };
        CreateFolderResponseDto: {
            Folder: components['schemas']['FolderResponseDto'];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        LinkIDsRequestDto: {
            LinkIDs: components['schemas']['EncryptedId'][];
        };
        OffsetPagination: {
            /** The page size */
            PageSize: number;
            /**
             * The page index using 0-based indexing
             * @default 0
             */
            Page: number;
        };
        UpdateFolderRequestDto: {
            /** @description Extended Attributes */
            XAttr: string;
        };
        CreateFolderRequestDto2: {
            /** @description Node hash key (random bytes encoded in base64 format), encrypted and signed. */
            NodeHashKey: string;
            /**
             * @description Extended attributes encrypted with link key
             * @default null
             */
            XAttr: string | null;
            Name: components['schemas']['PGPMessage'];
            /** @description File/folder name Hash */
            Hash: string;
            ParentLinkID: components['schemas']['Id'];
            NodePassphrase: components['schemas']['PGPMessage'];
            NodePassphraseSignature: components['schemas']['PGPSignature'];
            /**
             * Format: email
             * @description Signature email address used to sign passphrase and name
             */
            SignatureEmail: string;
            NodeKey: components['schemas']['PGPPrivateKey'];
        };
        ListChildrenResponseDto: {
            LinkIDs: components['schemas']['Id2'][];
            /** @description Used for pagination, pass to the next call to get the next page of results */
            AnchorID?: string | null;
            /** @description Indicates if there is a next page of results */
            More: boolean;
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        CheckAvailableHashesRequestDto: {
            Hashes: string[];
            /**
             * @description Client UID list to filter pending drafts with. If not provided, all conflicting draft hashes will be returned in `PendingHashes`
             * @default null
             */
            ClientUID: string[] | null;
        };
        AvailableHashesResponseDto: {
            AvailableHashes: string[];
            /** @description Hashes of existing drafts excluding the ones of provided ClientUIDs */
            PendingHashes: components['schemas']['PendingHashResponseDto'][];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        CopyLinkRequestDto: {
            /** @description Name, reusing same session key as previously. */
            Name: string;
            /** @description Node passphrase, reusing same session key as previously. */
            NodePassphrase: string;
            /** @description Name hash */
            Hash: string;
            /** @description Volume ID to copy to. */
            TargetVolumeID: string;
            /** @description New parent link ID to copy to. */
            TargetParentLinkID: string;
            /**
             * Format: email
             * @description Signature email address used for signing name.
             */
            NameSignatureEmail: string;
            /**
             * @description Node Passphrase Signature. Required when moving an anonymous Link. It must be signed by the SignatureEmail address.
             * @default null
             */
            NodePassphraseSignature: components['schemas']['PGPSignature'] | null;
            /**
             * Format: email
             * @description Signature email address used for the NodePassphraseSignature.
             * @default null
             */
            SignatureEmail: string | null;
            /**
             * @description Optional, except when moving a Photo-Link.
             * @default null
             */
            Photos: components['schemas']['PhotosDto'] | null;
            /**
             * @description Only for legacy files (signed by the user). Unencrypted signature of the content session key (plain text of the ContentKeyPacket), signed with the NodeKey.
             * @default null
             */
            ContentKeyPacketSignature: components['schemas']['PGPSignature'] | null;
            /**
             * @description Only for legacy folders (signed by the user). Node hash key should be unchanged, just re-signed with the NodeKey.
             * @default null
             */
            NodeHashKey: string | null;
        };
        CopyLinkResponseDto: {
            LinkID: components['schemas']['Id2'];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        FetchLinksMetadataRequestDto: {
            /**
             * @deprecated
             * @description Get thumbnail download URLs
             * @default 0
             * @enum {integer}
             */
            Thumbnails: 0 | 1;
            LinkIDs: components['schemas']['EncryptedId'][];
        };
        FetchLinksMetadataResponseDto: {
            Links: components['schemas']['ExtendedLinkTransformer'][];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        ListMissingHashKeyResponseDto: {
            NodesWithMissingNodeHashKey: components['schemas']['ListMissingHashKeyItemDto'][];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        LoadLinkDetailsResponseDto: {
            Links: (
                | components['schemas']['FileDetailsDto']
                | components['schemas']['FolderDetailsDto']
                | components['schemas']['AlbumDetailsDto']
            )[];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        MoveLinkBatchRequestDto: {
            ParentLinkID: components['schemas']['Id'];
            Links: components['schemas']['MoveLinkInBatchRequestDto'][];
            /**
             * Format: email
             * @description Signature email address used for signing name
             * @default null
             */
            NameSignatureEmail: string | null;
            /**
             * Format: email
             * @description Signature email address used for the NodePassphraseSignature.
             * @default null
             */
            SignatureEmail: string | null;
        };
        MoveLinkRequestDto: {
            /** @description Name, reusing same session key as previously. */
            Name: string;
            /** @description Node passphrase, reusing same session key as previously. */
            NodePassphrase: string;
            /** @description Name hash */
            Hash: string;
            ParentLinkID: components['schemas']['Id'];
            /**
             * Format: email
             * @description Signature email address used for signing name; Required when not passing `SignatureAddress`
             * @default null
             */
            NameSignatureEmail: string | null;
            /**
             * Format: email
             * @deprecated
             * @description [DEPRECATED] since only the name is signed, use `NameSignatureEmail`. Signature email address used for the name.
             * @default null
             */
            SignatureAddress: string | null;
            /**
             * @description Current name hash before move operation. Used to prevent race conditions.
             * @default null
             */
            OriginalHash: string | null;
            /**
             * @deprecated
             * @description Deprecated: Target ShareID (for move between shares/devices). Determined on the backend automatically
             * @default null
             */
            NewShareID: components['schemas']['Id'] | null;
            /**
             * @description Optional, except when moving a Photo-Link. Photo content hash, hmacsha256 of sha1 content using parent folder's hash key [ hmacSha256(folder hash key, sha1(plain content)) ]
             * @default null
             */
            ContentHash: string | null;
            /**
             * @description Node Passphrase Signature. Required when moving an anonymous Link. It must be signed by the SignatureEmail address.
             * @default null
             */
            NodePassphraseSignature: components['schemas']['PGPSignature'] | null;
            /**
             * Format: email
             * @description Signature email address used for the NodePassphraseSignature.
             * @default null
             */
            SignatureEmail: string | null;
        };
        RenameLinkRequestDto: {
            /** @description Name, reusing same session key as previously. */
            Name: string;
            /** @description Name hash; ignored/nullable for root-links */
            Hash?: string | null;
            /**
             * Format: email
             * @description Signature email address used for signing name; Required when not passing `SignatureAddress`
             * @default null
             */
            NameSignatureEmail: string | null;
            /**
             * Format: email
             * @deprecated
             * @description [DEPRECATED] since only the name is signed, use `NameSignatureEmail`. Signature email address used for the name.
             * @default null
             */
            SignatureAddress: string | null;
            /**
             * @description Current name hash before move operation. Used to prevent race conditions.
             * @default null
             */
            OriginalHash: string | null;
            /**
             * @description MIME type, optional, only on files.
             * @default null
             * @example text/plain
             */
            MIMEType: string | null;
        };
        UpdateMissingHashKeyRequestDto: {
            NodesWithMissingNodeHashKey: components['schemas']['UpdateMissingHashKeyItemDto'][];
        };
        MoveLinkRequestDto2: {
            /** @description Name, reusing same session key as previously. */
            Name: string;
            /** @description Node passphrase, reusing same session key as previously. */
            NodePassphrase: string;
            /** @description Name hash */
            Hash: string;
            ParentLinkID: components['schemas']['Id'];
            /** @description Current name hash before move operation. Used to prevent race conditions. */
            OriginalHash: string;
            /**
             * Format: email
             * @description Signature email address used for signing name
             */
            NameSignatureEmail: string;
            /**
             * @description Optional, except when moving a Photo-Link. Photo content hash, hmacsha256 of sha1 content using parent folder's hash key [ hmacSha256(folder hash key, sha1(plain content)) ]
             * @default null
             */
            ContentHash: string | null;
            /**
             * @description Node Passphrase Signature. Required when moving an anonymous Link. It must be signed by the SignatureEmail address.
             * @default null
             */
            NodePassphraseSignature: components['schemas']['PGPSignature'] | null;
            /**
             * Format: email
             * @description Signature email address used for the NodePassphraseSignature.
             * @default null
             */
            SignatureEmail: string | null;
        };
        CommitRevisionDto: {
            ManifestSignature: components['schemas']['PGPSignature'];
            /**
             * Format: email
             * @description Address used to sign the manifest, blocks, and XAttributes. Must be the address in the membership of the context share.
             */
            SignatureAddress: string;
            /**
             * @deprecated
             * @description Unused. Was meant for shorter partial revisions.
             * @default null
             */
            BlockNumber: number | null;
            /**
             * @description Extended attributes encrypted with link key
             * @default null
             */
            XAttr: string | null;
            /** @default null */
            Photo: components['schemas']['CommitRevisionPhotoDto'] | null;
            /**
             * @deprecated
             * @description Ignored entirely by API. Field can be removed from request by client.
             * @default null
             */
            BlockList: components['schemas']['BlockTokenDto'][] | null;
            /**
             * @deprecated
             * @default null
             */
            ThumbnailToken: string | null;
            /**
             * @deprecated
             * @description Ignored entirely by API, revision will always be committed (made active)
             * @default null
             */
            State: number | null;
        };
        CreateFileDto: {
            /** @example text/plain */
            MIMEType: string;
            ContentKeyPacket: components['schemas']['BinaryString'];
            /**
             * @description Unencrypted signature of the content session key (plain text of the ContentKeyPacket), signed with the NodeKey.
             * @default null
             */
            ContentKeyPacketSignature: string | null;
            /**
             * @description Client unique ID. Useful for marking client's drafts - in case of failure client can recognise its own draft and continue upload.
             * @default null
             */
            ClientUID: string | null;
            /**
             * @description Intended upload file size, to check if the user is trying to upload a bigger filesize than allowed.
             * @default null
             */
            IntendedUploadSize: number | null;
            Name: components['schemas']['PGPMessage'];
            /** @description File/folder name Hash */
            Hash: string;
            ParentLinkID: components['schemas']['Id'];
            NodePassphrase: components['schemas']['PGPMessage'];
            NodePassphraseSignature: components['schemas']['PGPSignature'];
            /**
             * Format: email
             * @description Signature email address used to sign passphrase and name
             */
            SignatureAddress: string;
            NodeKey: components['schemas']['PGPPrivateKey'];
        };
        CreateRevisionRequestDto: {
            /** @default null */
            CurrentRevisionID: components['schemas']['Id'] | null;
            /**
             * @description Client unique ID. Useful for marking client's drafts - in case of failure client can recognise its own draft and continue upload.
             * @default null
             */
            ClientUID: string | null;
            /**
             * @description Intended upload file size, to check if the user is trying to upload a bigger filesize than allowed.
             * @default null
             */
            IntendedUploadSize: number | null;
        };
        GetRevisionQueryParameters: {
            /**
             * @description Number of blocks
             * @default null
             */
            PageSize: number | null;
            /**
             * @description Block index from which to fetch block list
             * @default null
             */
            FromBlockIndex: number | null;
            /**
             * @description Do not generate download URLs for blocks
             * @default false
             */
            NoBlockUrls: boolean;
        };
        ListRevisionsResponseDto: {
            Revisions: components['schemas']['RevisionResponseDto'][];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        RestoreRevisionAcceptedResponse: {
            /**
             * ProtonResponseCode
             * @example 1002
             * @enum {integer}
             */
            Code: 1002;
        };
        VerificationData: {
            VerificationCode: components['schemas']['BinaryString2'];
            ContentKeyPacket: components['schemas']['BinaryString2'];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        EmptyTrashAcceptedResponse: {
            /**
             * ProtonResponseCode
             * @example 1002
             * @enum {integer}
             */
            Code: 1002;
        };
        VolumeTrashList: {
            /** @description Trash per share */
            Trash: components['schemas']['ShareTrashList'][];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        RequestUploadInput: {
            AddressID: components['schemas']['Id'];
            LinkID: components['schemas']['Id'];
            RevisionID: components['schemas']['Id'];
            /** @default null */
            VolumeID: components['schemas']['Id'] | null;
            /**
             * @deprecated
             * @description Deprecated, pass VolumeID instead
             * @default null
             */
            ShareID: components['schemas']['Id'] | null;
            /**
             * @deprecated
             * @description Request for thumbnail upload
             * @default 0
             */
            Thumbnail: number | null;
            /**
             * @deprecated
             * @description Hash of thumbnail contents
             * @default null
             */
            ThumbnailHash: string | null;
            /**
             * @deprecated
             * @description Size of thumbnail contents
             * @default 0
             */
            ThumbnailSize: number | null;
            /** @default [] */
            BlockList: components['schemas']['RequestUploadBlockInput'][];
            /** @default [] */
            ThumbnailList: components['schemas']['RequestUploadThumbnailInput'][];
        };
        RequestUploadResponse: {
            UploadLinks: components['schemas']['BlockURL'][];
            /** @deprecated */
            ThumbnailLink?: components['schemas']['ThumbnailBlockURL'] | null;
            ThumbnailLinks?: components['schemas']['ThumbnailBlockURL'][] | null;
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        SmallUploadResponseDto: {
            LinkID: components['schemas']['Id2'];
            RevisionID: components['schemas']['Id2'];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        AbuseReportDto: {
            /**
             * @description Reported ShareURL, complete including fragment
             * @example https://drive.proton.me/urls/1F9BKXYDMA#yF7d7bn01GMM
             */
            ShareURL: string;
            /** @enum {string} */
            AbuseCategory: 'spam' | 'copyright' | 'child-abuse' | 'stolen-data' | 'malware' | 'other';
            /** @description Passphrase for reported Link's Node key, unencrypted, as a string, escaped for JSON. */
            ResourcePassphrase: string;
            /**
             * @description Full password, including custom part, as string, escaped for JSON
             * @default
             */
            Password: string;
            /**
             * Format: email
             * @description Reporter's email if provided
             * @default null
             */
            ReporterEmail: string | null;
            /**
             * @description User message about the report. Required for copyright or leak reports.
             * @default null
             * @example This is malware
             */
            ReporterMessage: string | null;
            /** @default null */
            VolumeID: components['schemas']['Id'] | null;
            /** @default null */
            LinkID: components['schemas']['Id'] | null;
            /** @default null */
            RevisionID: components['schemas']['Id'] | null;
        };
        ChecklistResponseDto: {
            /** @description Array of completed checklist items */
            Items: string[];
            CreatedAt?: number | null;
            ExpiresAt?: number | null;
            /** @description User already has reward quota */
            UserWasRewarded: boolean;
            /** @description Client has displayed completed checklist */
            Seen: boolean;
            /** @description Client has completed checklist */
            Completed: boolean;
            /**
             * Format: float
             * @description Amount of storage GB completion reward
             */
            RewardInGB: number;
            /** @description Checklist should be visible to user */
            Visible: boolean;
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        OnboardingResponseDto: {
            /** @description `true` if the user has pending/rejected invitations or user_registered external invitation */
            HasPendingInvitations: boolean;
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        GetEntitlementResponseDto: {
            Entitlements: components['schemas']['EntitlementsDto'];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        AddTagsRequestDto: {
            Tags: components['schemas']['TagType'][];
        };
        FavoritePhotoRequestDto: {
            PhotoData?: components['schemas']['FavoritePhotoDataDto'] | null;
        };
        FavoritePhotoResponseDto: {
            LinkID: components['schemas']['Id2'];
            VolumeID: components['schemas']['Id2'];
            RelatedPhotos: components['schemas']['FavoriteRelatedPhotoResponseDto'][];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        GetMigrationStatusResponseDto: {
            OldVolumeID: components['schemas']['Id2'];
            NewVolumeID?: components['schemas']['Id2'] | null;
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        AcceptedResponse: {
            /**
             * ProtonResponseCode
             * @example 1002
             * @enum {integer}
             */
            Code: 1002;
        };
        ListPhotosParameters: {
            /** @default true */
            Desc: boolean;
            /** @default 500 */
            PageSize: number;
            /**
             * @description The link ID of the last photo from the previous page when requesting secondary pages
             * @default null
             */
            PreviousPageLastLinkID: components['schemas']['Id'] | null;
            /**
             * @description The minimum capture time of photos as UNIX timestamp (to filter out older photos)
             * @default null
             */
            MinimumCaptureTime: number | null;
            /** @default null */
            Tag: components['schemas']['TagType'] | null;
        };
        PhotoListingResponse: {
            Photos: components['schemas']['PhotoListingItemResponse'][];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        MigrateFromLegacyRequest: Record<string, never>;
        RemoveTagsRequestDto: {
            Tags: components['schemas']['TagType'][];
        };
        UpdateXAttrRequest: {
            /**
             * Format: email
             * @description Signature email address used to sign XAttributes; must be the same as the current revision signatureEmail, cannot be updated
             */
            SignatureEmail: string;
            /** @description Extended attributes encrypted with link key */
            XAttr: string;
        };
        CommitAnonymousRevisionDto: {
            ManifestSignature: components['schemas']['PGPSignature'];
            /**
             * Format: email
             * @description Address used to sign the manifest, blocks, and XAttributes. Must be the address in the membership of the context share.
             */
            SignatureEmail?: string | null;
            /** @description Extended attributes encrypted with link key */
            XAttr: string;
            /**
             * @description Photo attributes
             * @default null
             */
            Photo: components['schemas']['CommitRevisionPhotoDto'] | null;
        };
        CreateAnonymousDocumentDto: {
            Name: components['schemas']['PGPMessage'];
            /** @description File/folder name Hash */
            Hash: string;
            ParentLinkID: components['schemas']['Id'];
            NodePassphrase: components['schemas']['PGPMessage'];
            NodePassphraseSignature: components['schemas']['PGPSignature'];
            NodeKey: components['schemas']['PGPPrivateKey'];
            ContentKeyPacket: components['schemas']['BinaryString'];
            ManifestSignature: components['schemas']['PGPSignature'];
            /**
             * Format: email
             * @description Signature email address used to sign passphrase and name
             */
            SignatureEmail?: string | null;
            /**
             * @description Unencrypted signature of the content session key (plain text of the ContentKeyPacket), signed with the NodeKey.
             * @default null
             */
            ContentKeyPacketSignature: components['schemas']['PGPSignature'] | null;
        };
        CreateAnonymousDocumentResponseDto: {
            Document: components['schemas']['DocumentDetailsDto'];
            AuthorizationToken: string;
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        CreateAnonymousFileRequestDto: {
            Name: components['schemas']['PGPMessage'];
            /** @description File/folder name Hash */
            Hash: string;
            ParentLinkID: components['schemas']['Id'];
            NodePassphrase: components['schemas']['PGPMessage'];
            NodePassphraseSignature: components['schemas']['PGPSignature'];
            NodeKey: components['schemas']['PGPPrivateKey'];
            /** @example text/plain */
            MIMEType: string;
            ContentKeyPacket: components['schemas']['BinaryString'];
            /**
             * Format: email
             * @description Signature email address used to sign passphrase and name
             */
            SignatureEmail?: string | null;
            /**
             * @description Unencrypted signature of the content session key (plain text of the ContentKeyPacket), signed with the NodeKey.
             * @default null
             */
            ContentKeyPacketSignature: string | null;
            /**
             * @description Client unique ID. Useful for marking client's drafts - in case of failure client can recognise its own draft and continue upload.
             * @default null
             */
            ClientUID: string | null;
            /**
             * @description Intended upload file size, to check if the user is trying to upload a bigger filesize than allowed.
             * @default null
             */
            IntendedUploadSize: number | null;
        };
        CreateAnonymousFileResponseDto: {
            File: components['schemas']['FileResponseDto'];
            AuthorizationToken: string;
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        CreateAnonymousFolderRequestDto: {
            Name: components['schemas']['PGPMessage'];
            /** @description File/folder name Hash */
            Hash: string;
            ParentLinkID: components['schemas']['Id'];
            NodePassphrase: components['schemas']['PGPMessage'];
            NodePassphraseSignature: components['schemas']['PGPSignature'];
            /**
             * Format: email
             * @description Signature email address used to sign passphrase and name
             */
            SignatureEmail?: string | null;
            NodeKey: components['schemas']['PGPPrivateKey'];
            /** @description Node hash key (random bytes encoded in base64 format), encrypted and signed. */
            NodeHashKey: string;
            /**
             * @description Extended attributes encrypted with link key
             * @default null
             */
            XAttr: string | null;
        };
        CreateAnonymousFolderResponseDto: {
            Folder: components['schemas']['FolderResponseDto'];
            AuthorizationToken: string;
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        DeleteChildrenRequestDto: {
            Links: components['schemas']['LinkWithAuthorizationTokenDto'][];
        };
        ParentEncryptedLinkIDsResponseDto: {
            ParentLinkIDs: string[];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        RenameAnonymousLinkRequestDto: {
            /** @description Name, reusing same session key as previously. */
            Name: string;
            /** @description Name hash */
            Hash: string;
            /** @description Current name hash before move operation. Used to prevent race conditions. */
            OriginalHash: string;
            /**
             * Format: email
             * @description Signature email address used for signing name
             * @default null
             */
            NameSignatureEmail: string | null;
            /**
             * @description MIME type, optional, only on files.
             * @default null
             * @example text/plain
             */
            MIMEType: string | null;
            /** @default null */
            AuthorizationToken: string | null;
        };
        RequestAnonymousUploadRequestDto: {
            LinkID: components['schemas']['Id'];
            RevisionID: components['schemas']['Id'];
            /**
             * Format: email
             * @description Signature email address used to sign the blocks content
             * @default null
             */
            SignatureEmail: string | null;
            /** @default [] */
            BlockList: components['schemas']['AnonymousUploadBlockDto'][];
            /** @default [] */
            ThumbnailList: components['schemas']['RequestUploadThumbnailInput'][];
        };
        ShareURLContextsCollection: {
            ShareURLContexts: components['schemas']['ShareURLContext'][];
            /** @description Indicates there may be more ShareURLs */
            More: boolean;
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        LinkMapQueryParameters: {
            /** @default null */
            SessionName: string | null;
            /** @default null */
            LastIndex: number | null;
            /** @default 500 */
            PageSize: number;
        };
        LinkMapResponse: {
            SessionName: string;
            More: number;
            Total: number;
            Links: components['schemas']['LinkMapItemResponse'][];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        MyFilesResponseDto: {
            Volume: components['schemas']['VolumeDto'];
            Share: components['schemas']['ShareDto'];
            Link: components['schemas']['FolderDetailsDto2'];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        BootstrapShareResponseDto: {
            ShareID: components['schemas']['Id2'];
            VolumeID: components['schemas']['Id2'];
            Type: components['schemas']['ShareType'];
            State: components['schemas']['ShareState'];
            VolumeType: components['schemas']['VolumeType'];
            /** Format: email */
            Creator: string;
            Locked?: boolean | null;
            CreateTime: number;
            ModifyTime: number;
            LinkID: components['schemas']['Id2'];
            /**
             * @deprecated
             * @description Deprecated: Use `CreateTime`
             */
            CreationTime: number;
            /** @deprecated */
            PermissionsMask: number;
            LinkType: components['schemas']['NodeType'];
            /** @deprecated */
            Flags: number;
            /** @deprecated */
            BlockSize: number;
            /** @deprecated */
            VolumeSoftDeleted: boolean;
            Key: components['schemas']['PGPPrivateKey2'];
            Passphrase: components['schemas']['PGPMessage2'];
            PassphraseSignature: components['schemas']['PGPSignature2'];
            /** @description Address ID of the current user's address for the membership of this share. Can be missing if the user is not a direct member of the share. */
            AddressID?: string | null;
            /**
             * @deprecated
             * @description Clients should not use this field but pass the address keyring when validating and decrypting related fields.
             */
            AddressKeyID?: string | null;
            /** @description Your own memberships */
            Memberships: components['schemas']['MemberResponseDto'][];
            /**
             * @deprecated
             * @description Deprecated, use `Memberships` instead
             */
            PossibleKeyPackets: components['schemas']['KeyPacketResponseDto'][];
            RootLinkRecoveryPassphrase?: components['schemas']['PGPMessage2'] | null;
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        GetHighestContextForDocumentResponse: {
            ContextShareID: components['schemas']['Id2'];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        ListSharesResponseDto: {
            Shares: components['schemas']['ShareResponseDto'][];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        TransferInput: {
            /** @description The ID of the new address */
            AddressID: string;
            /** @description The ID of the new key */
            KeyID: string;
            /** @description Armored signature of the share passphrase, signed with the users's address with AddressID. */
            SharePassphraseSignature: string;
            /** @description Base64 encoded key packet for the share passphrase, reusing the same session key as previously, and encrypted for the key referenced by the KeyID. */
            MemberKeyPacket: string;
        };
        MigrateSharesRequestDto: {
            /**
             * @description The sum of PassphraseNodeKeyPacket-pairs and UnreadableShareIDs should not exceed 50
             * @default []
             */
            PassphraseNodeKeyPackets: components['schemas']['ShareKPMigrationData'][];
            /**
             * @description ShareIDs of unmigrated Shares that the client could not decrypt and should be locked
             * @default []
             */
            UnreadableShareIDs: components['schemas']['Id'][];
        };
        MigrateSharesResponseDto: {
            /** @description ShareIDs successfully migrated */
            ShareIDs: components['schemas']['Id2'][];
            /** @description ShareIDs not migrated with reason and error code */
            Errors: components['schemas']['ShareKPMigrationError'][];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        UnmigratedSharesResponseDto: {
            /** @description ShareIDs that can be migrated */
            ShareIDs: components['schemas']['Id2'][];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        InitSRPSessionResponseDto: {
            Modulus: string;
            ServerEphemeral: components['schemas']['BinaryString2'];
            UrlPasswordSalt: components['schemas']['BinaryString2'];
            SRPSession: components['schemas']['BinaryString2'];
            Version: number;
            Flags: number;
            /** @deprecated */
            IsDoc: boolean;
            VendorType: components['schemas']['VendorType'];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        AuthShareTokenRequestDto: {
            ClientEphemeral: components['schemas']['BinaryString'];
            ClientProof: components['schemas']['BinaryString'];
            SRPSession: components['schemas']['BinaryString'];
        };
        BootstrapShareTokenResponseDto: {
            Token: components['schemas']['TokenResponseDto'];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        GetRevisionResponseDto: {
            Revision: components['schemas']['DetailedRevisionResponseDto'];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        GetSharedFileInfoRequestDto: {
            /** @default 1 */
            FromBlockIndex: number;
            /** @default null */
            PageSize: number | null;
            ClientEphemeral: components['schemas']['BinaryString'];
            ClientProof: components['schemas']['BinaryString'];
            SRPSession: components['schemas']['BinaryString'];
        };
        GetSharedFileInfoResponseDto: {
            ServerProof: components['schemas']['BinaryString2'];
            Payload: components['schemas']['GetSharedFileInfoPayloadDto'];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        ListShareURLsResponseDto: {
            ShareURLs: components['schemas']['ShareURLResponseDto2'][];
            /** @description If the Recursive query parameter is set, also returns the related links and ancestors up to the share as a dictionary by LinkID. */
            Links: {
                [key: string]: components['schemas']['ExtendedLinkTransformer2'];
            };
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        CreateShareURLRequestDto: {
            CreatorEmail: string;
            /**
             * @description Permission bitfield, cannot exceed the owner's permissions. Valid permissions:
             *      - 4: read access
             *      - 6: read + write access
             *
             * @enum {integer}
             */
            Permissions: 4 | 6;
            UrlPasswordSalt: components['schemas']['BinaryString'];
            SharePasswordSalt: components['schemas']['BinaryString'];
            SRPVerifier: components['schemas']['BinaryString'];
            SRPModulusID: components['schemas']['Id'];
            /** @description Bitmap: 1 = custom password set, 2 = random password set */
            Flags: number;
            SharePassphraseKeyPacket: components['schemas']['BinaryString'];
            /** @description PGP encrypted password. The password is encrypted with the user's address key. */
            Password: string;
            /** @description Maximum number of times this link can be accessed. 0 for infinite */
            MaxAccesses: number;
            /**
             * @description UNIX timestamp after which this link is no longer accessible. Use this or ExpirationDuration for a relative expiration period. Max 90 days from now. Optional
             * @default null
             */
            ExpirationTime: number | null;
            /**
             * @description Number of seconds after which this link is no longer accessible. Maximum 90 days. Optional
             * @default null
             */
            ExpirationDuration: number | null;
            /**
             * @description PGP encrypted name. The name is encrypted with the user's address key. The name is only for user convenience.
             * @default null
             */
            Name: string | null;
        };
        UpdateShareURLRequestDto: {
            /** @description UNIX timestamp after which this link is no longer accessible. Use this or ExpirationDuration for a relative expiration period. Max 90 days from now. */
            ExpirationTime: number;
            /** @description Number of seconds after which this link is no longer accessible. Maximum 90 days. */
            ExpirationDuration?: number | null;
            /** @description PGP encrypted name. The name is encrypted with the user's address key. The name is only for user convenience. */
            Name: number;
            /**
             * @description Permission bitfield, cannot exceed the owner's permissions. Valid permissions:
             *      - 4: read access
             *      - 6: read + write access
             *
             * @default null
             * @enum {integer|null}
             */
            Permissions: 4 | 6 | null;
            /** @default null */
            UrlPasswordSalt: components['schemas']['BinaryString'] | null;
            /** @default null */
            SharePasswordSalt: components['schemas']['BinaryString'] | null;
            /** @default null */
            SRPVerifier: components['schemas']['BinaryString'] | null;
            /** @default null */
            SRPModulusID: components['schemas']['Id'] | null;
            /**
             * @description Bitmap: 1 = custom password set, 2 = random password set
             * @default null
             */
            Flags: number | null;
            /** @default null */
            SharePassphraseKeyPacket: components['schemas']['BinaryString'] | null;
            /**
             * @description PGP encrypted password. The password is encrypted with the user's address key.
             * @default null
             */
            Password: components['schemas']['PGPMessage'] | null;
            /**
             * @description Maximum number of times this link can be accessed. 0 for infinite
             * @default null
             */
            MaxAccesses: number | null;
        };
        DeleteMultipleShareURLsRequestDto: {
            /** @description List of ShareURL ids to delete. */
            ShareURLIDs: components['schemas']['EncryptedId'][];
        };
        CreateShareRequestDto: {
            AddressID: components['schemas']['Id'];
            RootLinkID: components['schemas']['Id'];
            ShareKey: components['schemas']['PGPPrivateKey'];
            /** @description Full PGP message containing (optionally) PassphraseNodeKP and SharePassphrase-KP and data-packet (encrypted SharePassphrase) -> in this exact order */
            SharePassphrase: string;
            SharePassphraseSignature: components['schemas']['PGPSignature'];
            /** @description Key packet for passphrase of referenced link's node key passphrase */
            PassphraseKeyPacket: string;
            NameKeyPacket: components['schemas']['BinaryString'];
            /**
             * @deprecated
             * @default null
             */
            Name: string | null;
        };
        SharedByMeResponseDto: {
            Links: components['schemas']['LinkSharedByMeResponseDto'][];
            /** @description Used for pagination, pass to the next call to get the next page of results */
            AnchorID?: string | null;
            /** @description Indicates if there is a next page of results */
            More: boolean;
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        SharedWithMeResponseDto2: {
            Links: components['schemas']['LinkSharedWithMeResponseDto'][];
            /** @description Used for pagination, pass to the next call to get the next page of results */
            AnchorID?: string | null;
            /** @description Indicates if there is a next page of results */
            More: boolean;
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        InviteExternalUserRequestDto: {
            ExternalInvitation: components['schemas']['ExternalInvitationRequestDto'];
            /** @default null */
            EmailDetails: components['schemas']['InvitationEmailDetailsRequestDto'] | null;
        };
        InviteExternalUserResponseDto: {
            ExternalInvitation: components['schemas']['ExternalInvitationResponseDto'];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        ListShareExternalInvitationsResponseDto: {
            ExternalInvitations: components['schemas']['ExternalInvitationResponseDto'][];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        ListUserRegisteredExternalInvitationResponseDto: {
            ExternalInvitations: components['schemas']['UserRegisteredExternalInvitationItemDto'][];
            /** @description Used for pagination, pass to the next call to get the next page of results */
            AnchorID?: string | null;
            /** @description Indicates if there is a next page of results */
            More: boolean;
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        UpdateExternalInvitationRequestDto: {
            /**
             * @description Permission bitfield, valid permissions:
             *      - 4: read access
             *      - 6: read + write access
             *      - 22: read + write + admin access
             *
             * @enum {integer}
             */
            Permissions: 4 | 6 | 22;
        };
        AcceptInvitationRequestDto: {
            /** @description Signature of the share passphrase's session key with the private key of the user (invitee) and the signature context `drive.share-member.member`, base64 encoded */
            SessionKeySignature: string;
        };
        InviteUserRequestDto: {
            Invitation: components['schemas']['InvitationRequestDto'];
            /** @default null */
            EmailDetails: components['schemas']['InvitationEmailDetailsRequestDto'] | null;
        };
        InviteUserResponseDto: {
            Invitation: components['schemas']['InvitationResponseDto'];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        ListShareInvitationsResponseDto: {
            Invitations: components['schemas']['InvitationResponseDto'][];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        ListPendingInvitationQueryParameters: {
            AnchorID?: components['schemas']['Id'] | null;
            /** @default 150 */
            PageSize: number;
            /** @default null */
            ShareTargetTypes: components['schemas']['TargetType'][] | null;
        };
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Name</th><th>Description</th></tr><tr><td>0</td><td>Root</td><td>main, device or photo root share</td></tr><tr><td>1</td><td>Folder</td><td></td></tr><tr><td>2</td><td>File</td><td></td></tr><tr><td>3</td><td>Album</td><td></td></tr><tr><td>4</td><td>Photo</td><td></td></tr><tr><td>5</td><td>ProtonVendor</td><td>documents and sheets</td></tr></table></details></details>
         * @enum {integer}
         */
        TargetType: 0 | 1 | 2 | 3 | 4 | 5;
        ListPendingInvitationResponseDto: {
            Invitations: components['schemas']['PendingInvitationItemDto'][];
            /** @description Used for pagination, pass to the next call to get the next page of results */
            AnchorID?: string | null;
            /** @description Indicates if there is a next page of results */
            More: boolean;
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        PendingInvitationResponseDto: {
            Invitation: components['schemas']['InvitationResponseDto'];
            Share: components['schemas']['ShareResponseDto2'];
            Link: components['schemas']['LinkResponseDto'];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        UpdateInvitationRequestDto: {
            /**
             * @description Permission bitfield, valid permissions:
             *      - 4: read access
             *      - 6: read + write access
             *      - 22: read + write + admin access
             *
             * @enum {integer}
             */
            Permissions: 4 | 6 | 22;
        };
        LinkAccessesResponseDto: {
            /** @default null */
            ContextShare: components['schemas']['ContextShareDto'] | null;
            /** @default null */
            Invitations: components['schemas']['PendingInvitationItemDto'][] | null;
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        ListShareMembersResponseDto: {
            Members: components['schemas']['MemberResponseDto2'][];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        UpdateShareMemberRequestDto: {
            /**
             * @description Permission bitfield, cannot exceed the current user's permissions. Valid permissions:
             *      - 4: read access
             *      - 6: read + write access
             *      - 22: read + write + admin access
             *
             * @enum {integer}
             */
            Permissions: 4 | 6 | 22;
        };
        SecurityRequestDto: {
            Hashes: string[];
        };
        /** @description For each hash from the request, response contains either result or error entry */
        SecurityResponseDto: {
            Results: components['schemas']['SecurityResponseResultDto'][];
            Errors: components['schemas']['SecurityResponseErrorDto'][];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        ThumbnailIDsListInput: {
            /** @description List of encrypted ThumbnailIDs. Maximum 30. */
            ThumbnailIDs: components['schemas']['Id'][];
        };
        ListThumbnailsResponse: {
            Thumbnails: components['schemas']['ThumbnailResponse'][];
            Errors: components['schemas']['ThumbnailErrorResponse'][];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        SettingsResponse: {
            UserSettings: components['schemas']['UserSettings'];
            Defaults: components['schemas']['Defaults'];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        UserSettingsRequest: {
            Layout?: components['schemas']['LayoutSetting'] | null;
            Sort?: components['schemas']['SortSetting'] | null;
            /** @description Number of days revisions should be retained. If null, default will be used by backend. Changing the setting is only available to paid users, free users will always use the default. */
            RevisionRetentionDays?: components['schemas']['RevisionRetentionDays'] | null;
            /** @description Indicates if B2BPhotos (possibility to the user to use Photos) is enabled. If null, the default value to 0 = false will be used by backend. Changing the setting is only available to B2B users */
            B2BPhotosEnabled?: boolean | null;
            /** @description Indicates if email notifications for comment activity in Proton Docs are enabled. If null, the default value to 0 = false will be used by backend. */
            DocsCommentsNotificationsEnabled?: boolean | null;
            /** @description Indicates if email notifications for comment activity in Proton Docs should include the document name. If null, the default value to 0 = false will be used by backend. */
            DocsCommentsNotificationsIncludeDocumentName?: boolean | null;
            /** @description Indicates user-preferred font in Proton Docs. */
            DocsFontPreference?: string | null;
            /** @description Order and visibility of Photo Tags, tags not in the list should not be shown; Use defaults when NULL; Show no tags if empty array. */
            PhotoTags?: components['schemas']['TagType'][] | null;
        };
        CreateVolumeRequestDto: {
            /** @description User's Address encrypted ID */
            AddressID: string;
            ShareKey: components['schemas']['PGPPrivateKey'];
            SharePassphrase: components['schemas']['PGPMessage'];
            SharePassphraseSignature: components['schemas']['PGPSignature'];
            FolderName: components['schemas']['PGPMessage'];
            FolderKey: components['schemas']['PGPPrivateKey'];
            FolderPassphrase: components['schemas']['PGPMessage'];
            FolderPassphraseSignature: components['schemas']['PGPSignature'];
            FolderHashKey: components['schemas']['PGPMessage'];
            /** @description User's encrypted AddressKeyID. Must be the primary key from the AddressID */
            AddressKeyID: string;
            /**
             * @deprecated
             * @default null
             */
            VolumeName: string | null;
            /**
             * @deprecated
             * @default null
             */
            ShareName: string | null;
        };
        GetVolumeResponseDto: {
            Volume: components['schemas']['VolumeResponseDto'];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        ListVolumesResponseDto: {
            Volumes: components['schemas']['VolumeResponseDto'][];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        RestoreVolumeDto: {
            /** Format: email */
            SignatureAddress: string;
            /** @default [] */
            MainShares: components['schemas']['RestoreMainShareDto'][];
            /** @default [] */
            Devices: components['schemas']['RestoreRootShareDto'][];
            /** @default [] */
            PhotoShares: components['schemas']['RestoreRootShareDto'][];
            /** @description User's encrypted AddressKeyID. Must be the primary key from the signatureAddress */
            AddressKeyID: string;
        };
        AddPhotoToAlbumWithLinkIDResponseDto: Record<string, never>;
        RemovePhotoFromAlbumWithLinkIDResponseDto: Record<string, never>;
        ConflictErrorResponseDto: {
            Details: components['schemas']['ConflictErrorDetailsDto'];
            Error: string;
            Code: number;
        };
        MultiDeleteTransformer: {
            LinkID: string;
            Response: components['schemas']['ProtonSuccess'] | components['schemas']['ProtonError'];
        };
        /** Link */
        ExtendedLinkTransformer: {
            /**
             * @deprecated
             * @description Shared flag. 0 => No public URL, 1 => shared with a public URL. Deprecated, use SharingDetails properties instead.
             * @enum {integer}
             */
            Shared: 0 | 1;
            /** @deprecated */
            ShareUrls: {
                /**
                 * @deprecated
                 * @description Share URL ID Deprecated
                 */
                ShareUrlId?: string;
                /** @description ShareURL ID */
                ShareURLID?: string;
                /**
                 * @deprecated
                 * @description ShareID
                 */
                ShareID?: string;
                /** @description URL Token (not always provided) */
                Token?: string;
                /**
                 * @deprecated
                 * @description Expiration time timestamp of ShareURL.
                 */
                ExpireTime?: number;
                /** @description Expiration Timestamp */
                ExpirationTime?: number;
                /** @description Creation time timestamp of ShareURL. */
                CreateTime?: number;
                /**
                 * @description Number of Accesses (by access is meant download; first block is enough to increase the counter)
                 * @example 1
                 */
                NumAccesses?: number;
            }[];
            /** @description Link sharing details, null if not shared. */
            SharingDetails: {
                ShareID?: string;
                /** @description Share URL linking to this file or folder */
                ShareUrl?: {
                    /**
                     * @deprecated
                     * @description Share URL ID Deprecated
                     */
                    ShareUrlId?: string;
                    /** @description ShareURL ID */
                    ShareURLID?: string;
                    /** @description URL Token (not always provided) */
                    Token?: string;
                    /**
                     * @deprecated
                     * @description Expiration time timestamp of ShareURL.
                     */
                    ExpireTime?: number | null;
                    /** @description Expiration Timestamp */
                    ExpirationTime?: number | null;
                    /** @description Creation time timestamp of ShareURL. */
                    CreateTime?: number;
                    /** @description Number of Accesses (by access is meant download; first block is enough to increase the counter) */
                    NumAccesses?: number;
                } | null;
            } | null;
            /**
             * @deprecated
             * @description Deprecated, use `SharingDetails.ShareID` since there will only be one share per link. List of Shares related to this link.
             */
            ShareIDs: string[];
            /**
             * @deprecated
             * @description Deprecated, use `SharingDetails.ShareURLs` and count URLs. Number of Share URLs linking to this file or folder.
             */
            NbUrls: number;
            /**
             * @deprecated
             * @description Deprecated, use `SharingDetails.ShareURLs` and count valid URLs. Number of active urls
             */
            ActiveUrls: number;
            /**
             * @deprecated
             * @description Deprecated, use `SharingDetails.ShareURLs` and check for valid URLs. Set if all URLs are expired. 0 => at least one valid URL, 1 => no usable URL
             * @enum {integer}
             */
            UrlsExpired: 0 | 1;
            /** @description Extended attributes encrypted with link key */
            XAttr: string | null;
            /** @description File properties */
            FileProperties: {
                /** @description Content key packet */
                ContentKeyPacket?: string;
                /** @description Signature of content key packet. Should be the signature of the (plain) Session Key, signed with the Node Key. Legacy versions must be accepted and can be a signature of the encrypted ContentKeyPacket and can be signed with the NodePassphraseEmail. */
                ContentKeyPacketSignature?: string;
                /** @description Active revision */
                ActiveRevision?: {
                    /** @description Revision ID */
                    ID?: string;
                    /** @description Creation time (UNIX timestamp) */
                    CreateTime?: number;
                    /** @description Size of revision (in bytes) */
                    Size?: number;
                    /** @description Signature of the manifest, signed with SignatureEmail */
                    ManifestSignature?: string;
                    /**
                     * Format: email
                     * @description Signature email address for blocks, XAttributes and manifest
                     */
                    SignatureEmail?: string;
                    /**
                     * Format: email
                     * @deprecated
                     * @description [DEPRECATED] Signature email address for blocks, XAttributes, and manifest
                     */
                    SignatureAddress?: string;
                    /**
                     * @description State; Will always be active; 1=active
                     * @enum {integer}
                     */
                    State?: 1;
                    /**
                     * @deprecated
                     * @description Revision has a thumbnail
                     * @enum {integer}
                     */
                    Thumbnail?: 0 | 1;
                    /**
                     * @deprecated
                     * @description Download URL for the thumbnail block
                     */
                    ThumbnailDownloadUrl?: string;
                    /**
                     * @deprecated
                     * @description Thumbnail properties
                     */
                    ThumbnailURLInfo?: {
                        /**
                         * @deprecated
                         * @description Bare Download URL for the thumbnail block
                         */
                        BareURL?: string;
                        /**
                         * @deprecated
                         * @description Token for the thumbnail block
                         */
                        Token?: string;
                    };
                    Thumbnails?: components['schemas']['ThumbnailTransformer'][];
                    Photo?: components['schemas']['PhotoTransformer'] | null;
                };
            } | null;
            FolderProperties: {
                /** @description Node hash key (signed since 1st August 2021 with either node or address key, after 1st May 2022 (on web, iOS unknown) changed to node key) */
                NodeHashKey?: string;
            } | null;
            /** @description ProtonDocument properties; optional */
            DocumentProperties?: {
                /** @description Document size */
                Size?: number;
            } | null;
            /** @description Album properties; optional */
            AlbumProperties?: {
                /** @description Is the album locked */
                Locked?: boolean;
                /** @description ID of the album cover link */
                CoverLinkID?: string | null;
                /** @description Last time a Photo was added to the Album */
                LastActivityTime?: number;
                /** @description Amount of photos in album */
                PhotoCount?: number;
                /** @description Node hash key */
                NodeHashKey?: string;
            } | null;
            /** @description Photo properties; optional */
            PhotoProperties?: {
                /** @description A list of Albums the Photo-Link is part of */
                Albums?: {
                    /** @description Album Link ID */
                    AlbumLinkID?: string;
                    /** @description NameHash in Album context (encrypted with Album-Link-NodeKey) */
                    Hash?: string;
                    /** @description ContentHash in Album context (encrypted with Album-Link-NodeKey) */
                    ContentHash?: string;
                    /** @description Timestamp Photo-Link was added to this album */
                    AddedTime?: number;
                }[];
                /** @description A list of tags assigned to the photo. The list will always be empty when requested by a user that is not the volume-owner. */
                Tags?: number[];
            } | null;
        } & components['schemas']['LinkTransformer'];
        GetRevisionResponseDto2: {
            Revision: components['schemas']['DetailedRevisionResponseDto2'];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        /** @description Conflict, a share already exists for the file or folder. */
        ShareConflictErrorResponseDto: {
            Details: components['schemas']['ShareConflictErrorDetailsDto'];
            Error: string;
            Code: number;
        };
        SmallFileUploadMetadataRequestDto: {
            Name: components['schemas']['PGPMessage'];
            NameHash: string;
            ParentLinkID: components['schemas']['Id'];
            NodePassphrase: components['schemas']['PGPMessage'];
            NodePassphraseSignature: components['schemas']['PGPSignature'];
            /**
             * Format: email
             * @description Address used to sign passphrase, name, manifest, block, and xAttr. Is null for anonymous users.
             */
            SignatureEmail?: string | null;
            NodeKey: components['schemas']['PGPPrivateKey'];
            /** @example text/plain */
            MIMEType: string;
            ContentKeyPacket: components['schemas']['BinaryString'];
            /** @description Unencrypted signature of the content session key (plain text of the ContentKeyPacket), signed with the NodeKey. */
            ContentKeyPacketSignature?: string | null;
            ManifestSignature: components['schemas']['PGPSignature'];
            ContentBlockVerificationToken?: components['schemas']['BinaryString'] | null;
            /**
             * @description Extended attributes encrypted with link key
             * @default null
             */
            XAttr: string | null;
            /** @default null */
            Photo: components['schemas']['CommitRevisionPhotoDto'] | null;
            /**
             * @description Encrypted PGP Signature of the raw block content. Is null for empty files as they do not have blocks or when uploaded by anonymous users. Deprecated: Once clients do not validate the block signature, it should also not be calculated and uploaded anymore.
             * @default null
             */
            ContentBlockEncSignature: string | null;
        };
        SmallRevisionUploadMetadataRequestDto: {
            CurrentRevisionID: components['schemas']['Id'];
            /**
             * Format: email
             * @description Address used to sign manifest, block, and xAttr. Is null for anonymous users.
             */
            SignatureEmail?: string | null;
            ManifestSignature: components['schemas']['PGPSignature'];
            /** @description Encrypted PGP Signature of the raw block content. Is null for empty files as they do not have blocks or when uploaded by anonymous users. */
            ContentBlockEncSignature?: components['schemas']['PGPMessage'] | null;
            ContentBlockVerificationToken?: components['schemas']['BinaryString'] | null;
            /**
             * @description File extended attributes encrypted with link key
             * @default null
             */
            XAttr: string | null;
        };
        ShareURLResponseDto: {
            Token: string;
            ShareURLID: components['schemas']['Id'];
            ShareID: components['schemas']['Id'];
            /** @description URL to use to access the ShareURL */
            PublicUrl: string;
            ExpirationTime?: number | null;
            LastAccessTime?: number | null;
            CreateTime: number;
            MaxAccesses: number;
            NumAccesses: number;
            Name?: components['schemas']['PGPMessage'] | null;
            CreatorEmail: string;
            /**
             * @description Permission bitfield, cannot exceed the owner's permissions. Valid permissions:
             *      - 4: read access
             *      - 6: read + write access
             *
             * @enum {integer}
             */
            Permissions: 4 | 6;
            /** @description Bitmap:
             *                 - `1`: FLAG_CUSTOM_PASSWORD,
             *                 - `2`: FLAG_RANDOM_PASSWORD */
            Flags: number;
            UrlPasswordSalt: components['schemas']['BinaryString'];
            SharePasswordSalt: components['schemas']['BinaryString'];
            SRPVerifier: components['schemas']['BinaryString'];
            SRPModulusID: components['schemas']['Id'];
            Password: components['schemas']['PGPMessage'];
            SharePassphraseKeyPacket: components['schemas']['BinaryString'];
        };
        AlbumPhotoLinkDataDto: {
            LinkID: components['schemas']['Id'];
            /** @description Name Hash */
            Hash: string;
            Name: string;
            /**
             * Format: email
             * @description Email address used for signing name
             */
            NameSignatureEmail: string;
            NodePassphrase: components['schemas']['PGPMessage'];
            /** @description Photo content hash */
            ContentHash: string;
            /** @description Nullable; Node Passphrase Signature. Required when moving an anonymous Link. It must be signed by the SignatureEmail address. */
            NodePassphraseSignature?: components['schemas']['PGPSignature'] | null;
            /**
             * Format: email
             * @description Nullable: Required when moving an anonymous link. Email address used for the NodePassphraseSignature
             */
            SignatureEmail?: string | null;
        };
        AlbumLinkDto: {
            Name: components['schemas']['PGPMessage'];
            /** @description Album name Hash */
            Hash: string;
            NodePassphrase: components['schemas']['PGPMessage'];
            NodePassphraseSignature: components['schemas']['PGPSignature'];
            /**
             * Format: email
             * @description Signature email address used to sign passphrase and name
             */
            SignatureEmail: string;
            NodeKey: components['schemas']['PGPPrivateKey'];
            /** @description Node hash key (random bytes encoded in base64 format), encrypted and signed. */
            NodeHashKey: string;
            /** @description Extended attributes encrypted with link key */
            XAttr?: string | null;
        };
        AlbumShortResponseDto: {
            Link: components['schemas']['AlbumLinkResponseDto'];
        };
        ShareDataDto: {
            AddressID: components['schemas']['Id'];
            Key: components['schemas']['PGPPrivateKey'];
            Passphrase: components['schemas']['PGPMessage'];
            PassphraseSignature: components['schemas']['PGPSignature'];
            /** @description User's encrypted AddressKeyID. Must be the primary key from the AddressID */
            AddressKeyID: string;
        };
        LinkDataDto: {
            /** @description Root folder name */
            Name: string;
            NodeKey: components['schemas']['PGPPrivateKey'];
            NodePassphrase: components['schemas']['PGPMessage'];
            NodePassphraseSignature: components['schemas']['PGPSignature'];
            NodeHashKey: components['schemas']['PGPMessage'];
        };
        PhotoVolumeResponseDto: {
            VolumeID: components['schemas']['Id2'];
            CreateTime: number;
            ModifyTime: number;
            /** @description Used space in bytes */
            UsedSpace: number;
            DownloadedBytes: number;
            UploadedBytes: number;
            State: components['schemas']['VolumeState'];
            Share: components['schemas']['ShareReferenceResponseDto'];
            Type: components['schemas']['VolumeType2'];
        };
        FoundDuplicate: {
            /** @description NameHash of the found duplicate */
            Hash?: string | null;
            /** @description ContentHash of the found duplicate */
            ContentHash?: string | null;
            /**
             * @description Can be null if the Link was deleted
             * @enum {unknown|null}
             */
            LinkState?: 0 | 1 | 2 | null;
            /** @description Client defined UID for the draft. Null if no ClientUID passed, or Revision was already committed. */
            ClientUID?: string | null;
            /** @description LinkID, null if deleted */
            LinkID: string;
            /** @description RevisionID, null if deleted */
            RevisionID: string;
        };
        PhotoTagMigrationDataDto: {
            LastProcessedLinkID: components['schemas']['Id2'];
            LastProcessedCaptureTime: number;
            LastMigrationTimestamp: number;
            /** @description Client unique ID. Indicates which client started migration, and thus can/should continue.
             *     if null, client side migration is expired (client has not checked in for > 1h), any eligible client can continue migration */
            LastClientUID?: string | null;
        };
        AlbumResponseDto: {
            Locked: boolean;
            LastActivityTime: number;
            PhotoCount: number;
            LinkID: components['schemas']['Id2'];
            VolumeID: components['schemas']['Id2'];
            /** @default null */
            ShareID: components['schemas']['Id2'] | null;
            /** @default null */
            CoverLinkID: components['schemas']['Id2'] | null;
        };
        ListPhotosAlbumItemResponseDto: {
            LinkID: components['schemas']['Id2'];
            CaptureTime: number;
            Hash: string;
            ContentHash: string;
            RelatedPhotos: components['schemas']['ListPhotosAlbumRelatedPhotoItemResponseDto'][];
            AddedTime: number;
            IsChildOfAlbum: boolean;
            /**
             * @description Tags assigned to the photo
             * @default []
             */
            Tags: number[];
        };
        TransferPhotoLinkInBatchRequestDto: {
            LinkID: components['schemas']['Id'];
            /** @description Name, reusing same session key as previously. */
            Name: string;
            /** @description Node passphrase, reusing same session key as previously. */
            NodePassphrase: string;
            /** @description Name hash */
            Hash: string;
            /** @description Current name hash before move operation. Used to prevent race conditions. */
            OriginalHash: string;
            /**
             * @description Optional, when transferring an Album-Link, required when transferring photos. Photo content hash, hmacsha256 of sha1 content using parent folder's hash key [ hmacSha256(folder hash key, sha1(plain content)) ]
             * @default null
             */
            ContentHash: string | null;
            /**
             * @description Node Passphrase Signature. Required when moving an anonymous Link. It must be signed by the SignatureEmail address.
             * @default null
             */
            NodePassphraseSignature: components['schemas']['PGPSignature'] | null;
        };
        PhotoTagMigrationUpdateDto: {
            LastProcessedLinkID: components['schemas']['Id'];
            LastProcessedCaptureTime: number;
            CurrentTimestamp: number;
            /** @description Client unique ID. Indicates which client started migration, and thus can/should continue. */
            ClientUID: string;
        };
        AlbumLinkUpdateDto: {
            Name?: components['schemas']['PGPMessage'] | null;
            Hash?: string | null;
            /**
             * Format: email
             * @description Signature email address used to sign passphrase and name
             */
            NameSignatureEmail?: string | null;
            OriginalHash?: string | null;
            /** @description Extended attributes encrypted with link key */
            XAttr?: string | null;
        };
        BookmarkShareURLRequestDto: {
            EncryptedUrlPassword?: components['schemas']['PGPMessage'] | null;
            AddressID: components['schemas']['Id'];
            AddressKeyID: components['schemas']['Id'];
        };
        BookmarkShareURLResponseDto: {
            UserID: components['schemas']['Id2'];
            Token: string;
            ShareURLID: components['schemas']['Id2'];
            EncryptedUrlPassword?: components['schemas']['PGPMessage2'] | null;
            State: components['schemas']['BookmarkShareURLState'];
            CreateTime: number;
            ModifyTime: number;
        };
        BookmarkShareURLInfoResponseDto: {
            EncryptedUrlPassword?: components['schemas']['PGPMessage2'] | null;
            CreateTime: number;
            Token: components['schemas']['TokenResponseDto'];
        };
        DeviceDataDto: {
            SyncState: components['schemas']['DeviceSyncState'];
            Type: components['schemas']['DeviceType'];
            /**
             * @deprecated
             * @default null
             */
            VolumeID: components['schemas']['Id'] | null;
        };
        ShareDataDto2: {
            AddressID: components['schemas']['Id'];
            Key: components['schemas']['PGPPrivateKey'];
            Passphrase: components['schemas']['PGPMessage'];
            PassphraseSignature: components['schemas']['PGPSignature'];
            /** @description User's encrypted AddressKeyID. Must be the primary key from the AddressID */
            AddressKeyID: string;
            /**
             * @deprecated
             * @default null
             */
            Name: string | null;
        };
        DeviceResponseDto: {
            DeviceID: components['schemas']['Id2'];
            ShareID: components['schemas']['Id2'];
            LinkID: components['schemas']['Id2'];
        };
        DeviceResponseDto2: {
            Device: components['schemas']['DeviceDataDto3'];
            Share: components['schemas']['ShareDataDto4'];
        };
        DeviceResponseDto3: {
            Device: components['schemas']['DeviceDto'];
            ShareID: components['schemas']['Id2'];
            LinkID: components['schemas']['Id2'];
        };
        DeviceDataDto2: {
            /** @default null */
            SyncState: components['schemas']['DeviceSyncState'] | null;
            /**
             * @description UNIX timestamp when the Device got last synced. Optional
             * @default null
             */
            LastSyncTime: number | null;
        };
        ShareDataDto3: {
            /**
             * @deprecated
             * @default null
             */
            Name: string | null;
        };
        /** @description Base64 encoded binary data */
        BinaryString: string;
        /** @description An armored PGP Signature */
        PGPSignature: string;
        /**
         * @description <p>Document=1, Sheet=2</p><details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>1</td><td>Document</td></tr><tr><td>2</td><td>Sheet</td></tr></table></details></details>
         * @enum {integer}
         */
        DocumentType: 1 | 2;
        /** @description An armored PGP Message */
        PGPMessage: string;
        /** @description An armored PGP Private Key */
        PGPPrivateKey: string;
        DocumentDetailsDto: {
            VolumeID: components['schemas']['Id2'];
            LinkID: components['schemas']['Id2'];
            RevisionID: components['schemas']['Id2'];
        };
        /** @description An encrypted ID */
        Id2: string;
        EventResponseDto: {
            EventID: components['schemas']['Id2'];
            EventType: components['schemas']['EventType'];
            /** @description Event creation timestamp */
            CreateTime: number;
            Link:
                | {
                      LinkID: components['schemas']['Id'];
                  }
                | components['schemas']['ExtendedLinkTransformer2'];
            /**
             * @description The share the user has access to that is closest to the root. Delete events do not have it but other events do.
             * @default null
             */
            ContextShareID: string | null;
            /**
             * @description If a file was moved to a different context share, this shows the old, origin share
             * @default null
             */
            FromContextShareID: string | null;
            /**
             * @description Optional event data
             * @default null
             */
            Data: {
                /** @description New or updated ShareURL */
                UrlID?: string;
                /**
                 * @deprecated
                 * @description Corresponding ShareURL has been deleted
                 */
                DeletedURLID?: string[];
                /** @description Corresponding locked volume has been restored */
                FLAG_RESTORE_COMPLETE?: string;
                /** @description Restoration has failed for corresponding locked volume */
                FLAG_RESTORE_FAILED?: string;
                /**
                 * @deprecated
                 * @description Revision has been restored for this LinkID
                 */
                FLAG_RESTORE_REVISION_COMPLETE?: string;
                /** @description Parent before the move */
                FromParentLinkID?: string;
            } | null;
        };
        EventV2ResponseDto: {
            EventID: components['schemas']['Id2'];
            EventType: components['schemas']['EventType'];
            Link: components['schemas']['EventLinkDataDto'];
        };
        FolderResponseDto: {
            ID: components['schemas']['Id2'];
        };
        /** @description An encrypted ID */
        EncryptedId: string;
        PendingHashResponseDto: {
            Hash: string;
            RevisionID: components['schemas']['Id2'];
            LinkID: components['schemas']['Id2'];
            ClientUID?: string | null;
        };
        PhotosDto: {
            /** @description Photo content hash, hmacsha256 of sha1 content using parent folder's hash key [ hmacSha256(folder hash key, sha1(plain content)) ] */
            ContentHash: string;
            /** @default [] */
            RelatedPhotos: components['schemas']['RelatedPhotoDto'][];
        };
        ListMissingHashKeyItemDto: {
            LinkID: components['schemas']['Id2'];
            VolumeID: components['schemas']['Id2'];
            ShareID: components['schemas']['Id2'];
        };
        FileDetailsDto: {
            Link: components['schemas']['LinkDto'];
            File: components['schemas']['FileDto'];
            /** @default null */
            Sharing: components['schemas']['SharingDto'] | null;
            /** @default null */
            Membership: components['schemas']['MembershipDto'] | null;
            /** @default null */
            Folder: null | null;
            /** @default null */
            Album: null | null;
        };
        FolderDetailsDto: {
            Link: components['schemas']['LinkDto'];
            Folder: components['schemas']['FolderDto'];
            /** @default null */
            Sharing: components['schemas']['SharingDto'] | null;
            /** @default null */
            Membership: components['schemas']['MembershipDto'] | null;
            /** @default null */
            File: null | null;
            /** @default null */
            Album: null | null;
        };
        AlbumDetailsDto: {
            Link: components['schemas']['LinkDto'];
            Album: components['schemas']['AlbumDto'];
            /** @default null */
            Sharing: components['schemas']['SharingDto'] | null;
            /** @default null */
            Membership: components['schemas']['MembershipDto'] | null;
            /** @default null */
            File: null | null;
            /** @default null */
            Folder: null | null;
        };
        MoveLinkInBatchRequestDto: {
            LinkID: components['schemas']['Id'];
            /** @description Name, reusing same session key as previously. */
            Name: string;
            /** @description Node passphrase, reusing same session key as previously. */
            NodePassphrase: string;
            /** @description Name hash */
            Hash: string;
            /**
             * @description Current name hash before move operation. Used to prevent race conditions.
             * @default null
             */
            OriginalHash: string | null;
            /**
             * @description Optional, except when moving a Photo-Link. Photo content hash, hmacsha256 of sha1 content using parent folder's hash key [ hmacSha256(folder hash key, sha1(plain content)) ]
             * @default null
             */
            ContentHash: string | null;
            /**
             * @description Node Passphrase Signature. Required when moving an anonymous Link. It must be signed by the SignatureEmail address.
             * @default null
             */
            NodePassphraseSignature: components['schemas']['PGPSignature'] | null;
        };
        UpdateMissingHashKeyItemDto: {
            LinkID: components['schemas']['Id'];
            VolumeID: components['schemas']['Id'];
            PGPArmoredEncryptedNodeHashKey: components['schemas']['PGPMessage'];
        };
        CommitRevisionPhotoDto: {
            /** @description Photo capture timestamp */
            CaptureTime: number;
            /** @description Photo content hash, lowercase hex representation of HMAC SHA256 of SHA1 content using parent folder's hash key [ hmacSha256(folder hash key, sha1(plain content)) ] */
            ContentHash: string;
            /**
             * @description Main photo LinkID reference. Pass null if none.
             * @default null
             */
            MainPhotoLinkID: string | null;
            /**
             * @deprecated
             * @description Deprecated: Clients persist exif information in xAttr instead
             * @default null
             */
            Exif: components['schemas']['BinaryString'] | null;
            /**
             * @description List of tags to be assigned to the photo
             * @default null
             */
            Tags: components['schemas']['TagType'][] | null;
        };
        BlockTokenDto: {
            Index: number;
            Token: string;
        };
        RevisionResponseDto: {
            ID: components['schemas']['Id2'];
            ManifestSignature?: components['schemas']['PGPSignature2'] | null;
            /** @description Size of revision (in bytes) */
            Size: number;
            State: components['schemas']['RevisionState'];
            XAttr?: components['schemas']['PGPMessage2'] | null;
            /**
             * @deprecated
             * @description Flag stating if revision has a thumbnail
             * @enum {integer}
             */
            Thumbnail: 0 | 1;
            /** @deprecated */
            ThumbnailHash?: components['schemas']['BinaryString2'] | null;
            /**
             * @deprecated
             * @description Size thumbnail in bytes; 0 if no thumbnail present
             */
            ThumbnailSize: number;
            Thumbnails: components['schemas']['ThumbnailResponseDto'][];
            ClientUID?: string | null;
            /** @default null */
            CreateTime: number | null;
            /**
             * Format: email
             * @description User's email associated with the share and used to sign the manifest and block contents.
             * @default null
             */
            SignatureEmail: string | null;
            /**
             * Format: email
             * @deprecated
             * @description [DEPRECATED] use `SignatureEmail` Email address corresponding to the signature
             * @default null
             */
            SignatureAddress: string | null;
        };
        /** @description Base64 encoded binary data */
        BinaryString2: string;
        ShareTrashList: {
            ShareID: components['schemas']['Id2'];
            /** @description List of trashed link IDs for that share */
            LinkIDs: components['schemas']['Id2'][];
            /** @description List of trashed link's parentLinkIDs */
            ParentIDs: components['schemas']['Id2'][];
        };
        RequestUploadBlockInput: {
            /** @description Block size in bytes */
            Size: number;
            /** @description Index of block in list (must be consecutive starting at 1) */
            Index: number;
            /** @description Hash of encrypted block, base64 encoded */
            Hash: string;
            /** @default null */
            Verifier: components['schemas']['Verifier'] | null;
            /**
             * @description Encrypted PGP Signature of the raw block content. Deprecated: Once clients do not validate the block signature, it should also not be calculated and uploaded anymore.
             * @default null
             */
            EncSignature: string | null;
        };
        RequestUploadThumbnailInput: {
            /** @description Block size in bytes. WARNING: when type is NOT 2=HDPreview(1920) then the max size is 65536 */
            Size: number;
            Type: components['schemas']['ThumbnailType'];
            /** @description Hash of encrypted block, base64 encoded */
            Hash: string;
        };
        BlockURL: {
            BareURL: string;
            Token: string;
            /** @deprecated */
            URL: string;
            Index: number;
        };
        ThumbnailBlockURL: {
            BareURL: string;
            Token: string;
            /** @deprecated */
            URL: string;
            ThumbnailType: components['schemas']['ThumbnailType2'];
        };
        EntitlementsDto: {
            /** @description Maximum number of days revision history can be kept */
            MaxRevisionCount: number;
            /** @description Maximum amount of revisions on a single link that can be kept */
            MaxRevisionDays: number;
            /** @description Allow or not the user to create writable ShareURLs */
            PublicCollaboration: boolean;
        };
        FavoritePhotoDataDto: {
            /** @description Name Hash */
            Hash: string;
            Name: string;
            /**
             * Format: email
             * @description Email address used for signing name
             */
            NameSignatureEmail: string;
            NodePassphrase: components['schemas']['PGPMessage'];
            /** @description Photo content hash */
            ContentHash: string;
            /** @description Nullable; Node Passphrase Signature. Required when moving an anonymous Link. It must be signed by the SignatureEmail address. */
            NodePassphraseSignature?: components['schemas']['PGPSignature'] | null;
            /**
             * Format: email
             * @description Nullable: Required when moving an anonymous link. Email address used for the NodePassphraseSignature
             */
            SignatureEmail?: string | null;
            /** @default [] */
            RelatedPhotos: components['schemas']['AlbumPhotoLinkDataDto'][];
        };
        FavoriteRelatedPhotoResponseDto: {
            LinkID: components['schemas']['Id2'];
        };
        PhotoListingItemResponse: {
            LinkID: components['schemas']['Id2'];
            /** @description Unix timestamp of when the photo was taken as extracted by client from exif */
            CaptureTime: number;
            /** @description File name hash */
            Hash: string;
            /** @description Photo content hash, Hashmac of content using parent folder's hash key */
            ContentHash?: string | null;
            /**
             * @description Tags assigned to the photo
             * @default []
             */
            Tags: number[];
            /** @default [] */
            RelatedPhotos: components['schemas']['PhotoListingRelatedItemResponse'][];
        };
        FileResponseDto: {
            ID: components['schemas']['Id2'];
            RevisionID: components['schemas']['Id2'];
            ClientUID?: string | null;
        };
        LinkWithAuthorizationTokenDto: {
            LinkID: components['schemas']['Id'];
            /** @default null */
            AuthorizationToken: string | null;
        };
        AnonymousUploadBlockDto: {
            /** @description Block size in bytes */
            Size: number;
            /** @description Index of block in list (must be consecutive starting at 1) */
            Index: number;
            /** @description Hash of encrypted block, base64 encoded */
            Hash: string;
            Verifier: components['schemas']['Verifier'];
            /**
             * @description Encrypted PGP Signature of the raw block content. Deprecated: Once clients do not validate the block signature, it should also not be calculated and uploaded anymore.
             * @default null
             */
            EncSignature: string | null;
        };
        ShareURLContext: {
            /** @description Share ID of the share highest in the tree with permissions */
            ContextShareID: string;
            ShareURLs: components['schemas']['ShareURLResponseDto2'][];
            /** @description Related link IDs and ancestors up to the share. */
            LinkIDs: components['schemas']['Id2'][];
        };
        LinkMapItemResponse: {
            Index: number;
            LinkID: components['schemas']['Id2'];
            ParentLinkID?: components['schemas']['Id2'] | null;
            Type: components['schemas']['NodeType2'];
            Name: components['schemas']['PGPMessage2'];
            Hash?: string | null;
            State: components['schemas']['LinkState2'];
            Size: number;
            MIMEType: string;
            CreateTime: number;
            ModifyTime: number;
            /** @default null */
            NodeKey: components['schemas']['PGPPrivateKey2'];
            /** @default null */
            NodePassphrase: components['schemas']['PGPMessage2'];
            /** @default null */
            NodePassphraseSignature: components['schemas']['PGPSignature2'];
            /** @default null */
            NodeSignatureEmail: string;
        };
        VolumeDto: {
            VolumeID: components['schemas']['Id2'];
            UsedSpace: number;
        };
        ShareDto: {
            ShareID: components['schemas']['Id2'];
            /** Format: email */
            CreatorEmail: string;
            Key: components['schemas']['PGPPrivateKey2'];
            Passphrase: components['schemas']['PGPMessage2'];
            PassphraseSignature: components['schemas']['PGPSignature2'];
            AddressID: components['schemas']['Id2'];
            InviterSharePassphraseKeyPacketSignature?: components['schemas']['PGPSignature2'] | null;
            InviteeSharePassphraseSessionKeySignature?: components['schemas']['PGPSignature2'] | null;
        };
        FolderDetailsDto2: {
            Link: components['schemas']['LinkDto2'];
            Folder: components['schemas']['FolderDto2'];
            /** @default null */
            Sharing: components['schemas']['SharingDto2'] | null;
            /** @default null */
            Membership: components['schemas']['MembershipDto2'] | null;
            /** @default null */
            File: null | null;
            /** @default null */
            Album: null | null;
        };
        /**
         * @description <p>1=Main, 2=Standard, 3=Device, 4=Photo</p><details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Name</th><th>Description</th></tr><tr><td>1</td><td>Main</td><td>* Root share for my files</td></tr><tr><td>2</td><td>Standard</td><td>* Collaborative share anywhere in the link tree (but not at the root folder as it cannot be shared)</td></tr><tr><td>3</td><td>Device</td><td>* Root share of devices</td></tr><tr><td>4</td><td>Photo</td><td>* Root share for photos</td></tr></table></details></details>
         * @enum {integer}
         */
        ShareType: 1 | 2 | 3 | 4;
        /**
         * @description <p>1=Active, 3=Restored</p><details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>1</td><td>Active</td></tr><tr><td>2</td><td>Deleted</td></tr><tr><td>3</td><td>Restored</td></tr><tr><td>4</td><td>Migrating</td></tr><tr><td>5</td><td>Migrated</td></tr><tr><td>6</td><td>Locked</td></tr></table></details></details>
         * @enum {integer}
         */
        ShareState: 1 | 2 | 3 | 4 | 5 | 6;
        /**
         * @description <p>1=Regular, 2=Photo</p><details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>1</td><td>Regular</td></tr><tr><td>2</td><td>Photo</td></tr></table></details></details>
         * @enum {integer}
         */
        VolumeType: 1 | 2;
        /**
         * @description <p>1=folder, 2=file</p><details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>1</td><td>Folder</td></tr><tr><td>2</td><td>File</td></tr><tr><td>3</td><td>Album</td></tr></table></details></details>
         * @enum {integer}
         */
        NodeType: 1 | 2 | 3;
        /** @description An armored PGP Private Key */
        PGPPrivateKey2: string;
        /** @description An armored PGP Message */
        PGPMessage2: string;
        /** @description An armored PGP Signature */
        PGPSignature2: string;
        MemberResponseDto: {
            MemberID: components['schemas']['Id2'];
            ShareID: components['schemas']['Id2'];
            AddressID: components['schemas']['Id2'];
            AddressKeyID: components['schemas']['Id2'];
            /** Format: email */
            Inviter: string;
            /**
             * @description Permission bitfield, valid permissions:
             *      - 4: read access
             *      - 6: read + write access
             *      - 22: read + write + admin access
             *
             * @enum {integer}
             */
            Permissions: 4 | 6 | 22;
            /** @description base64 encoded key packet, encrypting the share passphrase's session key with the invitee's address key */
            KeyPacket: string;
            /** @description PGP signature of the member key packet (encrypted) by inviter */
            KeyPacketSignature: string;
            /** @description Signature of the share passphrase's session key with the private key of the user (invitee). */
            SessionKeySignature: string;
            State: components['schemas']['ShareMemberState'];
            CreateTime: number;
            ModifyTime: number;
            /** @deprecated */
            CreationTime: number;
            /**
             * @deprecated
             * @description Deprecated and always null
             * @default null
             */
            Unlockable: boolean | null;
        };
        KeyPacketResponseDto: {
            AddressID: components['schemas']['Id2'];
            AddressKeyID: components['schemas']['Id2'];
            KeyPacket: components['schemas']['BinaryString2'];
            State: components['schemas']['ShareMemberState'];
            /**
             * @deprecated
             * @description Deprecated and always null
             * @default null
             */
            Unlockable: boolean | null;
        };
        ShareResponseDto: {
            ShareID: components['schemas']['Id2'];
            VolumeID: components['schemas']['Id2'];
            Type: components['schemas']['ShareType'];
            State: components['schemas']['ShareState'];
            VolumeType: components['schemas']['VolumeType'];
            /** Format: email */
            Creator: string;
            Locked?: boolean | null;
            CreateTime: number;
            ModifyTime: number;
            LinkID: components['schemas']['Id2'];
            /**
             * @deprecated
             * @description Deprecated: Use `CreateTime`
             */
            CreationTime: number;
            /** @deprecated */
            PermissionsMask: number;
            /** @deprecated */
            LinkType: number;
            /** @deprecated */
            Flags: number;
            /** @deprecated */
            BlockSize: number;
            /** @deprecated */
            VolumeSoftDeleted: boolean;
        };
        ShareKPMigrationData: {
            /** @description Share to migrate. Can only be Active (State=1) Shares of Type=2 */
            ShareID: string;
            /** @description Key packet to decrypt the share passphrase, encrypted with the node key, base64 encoded */
            PassphraseNodeKeyPacket: string;
        };
        /** @description Share unable to be migrated with reason and code; NOT_EXISTS, INCOMPATIBLE_STATE, PERMISSION_DENIED, ENCRYPTION_VERIFICATION_FAILED */
        ShareKPMigrationError: {
            ShareID: components['schemas']['Id2'];
            Error: string;
            Code: number;
        };
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>0</td><td>ProtonDrive</td></tr><tr><td>1</td><td>ProtonDoc</td></tr><tr><td>2</td><td>ProtonSheet</td></tr></table></details></details>
         * @enum {integer}
         */
        VendorType: 0 | 1 | 2;
        TokenResponseDto: {
            /**
             * @description Url Token
             * @example YTZZRH7DA8
             */
            Token: string;
            LinkType: components['schemas']['NodeType3'];
            LinkID: components['schemas']['Id2'];
            SharePasswordSalt: components['schemas']['BinaryString2'];
            SharePassphrase: components['schemas']['PGPMessage2'];
            ShareKey: components['schemas']['PGPPrivateKey2'];
            NodePassphrase: components['schemas']['PGPMessage2'];
            NodeKey: components['schemas']['PGPPrivateKey2'];
            Name: components['schemas']['PGPMessage2'];
            /** @description Base64 encoded content key packet. Null for folders */
            ContentKeyPacket?: components['schemas']['BinaryString2'] | null;
            /** @example text/plain */
            MIMEType: string;
            /**
             * @description Permission bitfield, cannot exceed the owner's permissions. Valid permissions:
             *      - 4: read access
             *      - 6: read + write access
             *
             * @enum {integer}
             */
            Permissions: 4 | 6;
            /** @description File size, null for folders */
            Size?: number | null;
            /** @description File properties */
            ThumbnailURLInfo?: components['schemas']['ThumbnailURLInfoResponseDto'] | null;
            /** @default null */
            NodeHashKey: components['schemas']['PGPMessage2'] | null;
            /**
             * @description Signature email of the share owner. Only set for a ShareURL with read+write permissions.
             * @default null
             */
            SignatureEmail: string | null;
            /**
             * @description Only set for a ShareURL with read+write permissions.
             * @default null
             */
            NodePassphraseSignature: components['schemas']['PGPSignature2'] | null;
        };
        DetailedRevisionResponseDto: {
            Blocks: components['schemas']['BlockResponseDto'][];
            Photo?: components['schemas']['PhotoResponseDto'] | null;
            ID: components['schemas']['Id2'];
            ManifestSignature?: components['schemas']['PGPSignature2'] | null;
            /** @description Size of revision (in bytes) */
            Size: number;
            State: components['schemas']['RevisionState'];
            XAttr?: components['schemas']['PGPMessage2'] | null;
            /**
             * @deprecated
             * @description Flag stating if revision has a thumbnail
             * @enum {integer}
             */
            Thumbnail: 0 | 1;
            /** @deprecated */
            ThumbnailHash?: components['schemas']['BinaryString2'] | null;
            /**
             * @deprecated
             * @description Size thumbnail in bytes; 0 if no thumbnail present
             */
            ThumbnailSize: number;
            Thumbnails: components['schemas']['ThumbnailResponseDto'][];
            ClientUID?: string | null;
            /** @default null */
            CreateTime: number | null;
            /**
             * Format: email
             * @description User's email associated with the share and used to sign the manifest and block contents.
             * @default null
             */
            SignatureEmail: string | null;
            /**
             * Format: email
             * @deprecated
             * @description [DEPRECATED] use `SignatureEmail` Email address corresponding to the signature
             * @default null
             */
            SignatureAddress: string | null;
        };
        GetSharedFileInfoPayloadDto: {
            SharePasswordSalt: components['schemas']['BinaryString2'];
            SharePassphrase: components['schemas']['PGPMessage2'];
            ShareKey: components['schemas']['PGPPrivateKey2'];
            NodePassphrase: components['schemas']['PGPMessage2'];
            NodeKey: components['schemas']['PGPPrivateKey2'];
            Name: components['schemas']['PGPMessage2'];
            Size: number;
            MIMEType: string;
            /** @description UNIX timestamp after which this link is no longer accessible */
            ExpirationTime?: number | null;
            ContentKeyPacket: components['schemas']['BinaryString2'];
            BlockURLs: components['schemas']['ThumbnailURLInfoResponseDto'][];
            ThumbnailURLInfo: components['schemas']['ThumbnailURLInfoResponseDto'];
            /** @deprecated */
            Blocks: string[];
            /** @deprecated */
            ThumbnailURL?: string | null;
        };
        ShareURLResponseDto2: {
            Token: string;
            ShareURLID: components['schemas']['Id2'];
            ShareID: components['schemas']['Id2'];
            /** @description URL to use to access the ShareURL */
            PublicUrl: string;
            ExpirationTime?: number | null;
            LastAccessTime?: number | null;
            CreateTime: number;
            MaxAccesses: number;
            NumAccesses: number;
            Name?: components['schemas']['PGPMessage2'] | null;
            CreatorEmail: string;
            /**
             * @description Permission bitfield, cannot exceed the owner's permissions. Valid permissions:
             *      - 4: read access
             *      - 6: read + write access
             *
             * @enum {integer}
             */
            Permissions: 4 | 6;
            /** @description Bitmap:
             *                 - `1`: FLAG_CUSTOM_PASSWORD,
             *                 - `2`: FLAG_RANDOM_PASSWORD */
            Flags: number;
            UrlPasswordSalt: components['schemas']['BinaryString2'];
            SharePasswordSalt: components['schemas']['BinaryString2'];
            SRPVerifier: components['schemas']['BinaryString2'];
            SRPModulusID: components['schemas']['Id2'];
            Password: components['schemas']['PGPMessage2'];
            SharePassphraseKeyPacket: components['schemas']['BinaryString2'];
        };
        /** Link */
        ExtendedLinkTransformer2: {
            /**
             * @deprecated
             * @description Shared flag. 0 => No public URL, 1 => shared with a public URL. Deprecated, use SharingDetails properties instead.
             * @enum {integer}
             */
            Shared: 0 | 1;
            /** @deprecated */
            ShareUrls: {
                /**
                 * @deprecated
                 * @description Share URL ID Deprecated
                 */
                ShareUrlId?: string;
                /** @description ShareURL ID */
                ShareURLID?: string;
                /**
                 * @deprecated
                 * @description ShareID
                 */
                ShareID?: string;
                /** @description URL Token (not always provided) */
                Token?: string;
                /**
                 * @deprecated
                 * @description Expiration time timestamp of ShareURL.
                 */
                ExpireTime?: number;
                /** @description Expiration Timestamp */
                ExpirationTime?: number;
                /** @description Creation time timestamp of ShareURL. */
                CreateTime?: number;
                /**
                 * @description Number of Accesses (by access is meant download; first block is enough to increase the counter)
                 * @example 1
                 */
                NumAccesses?: number;
            }[];
            /** @description Link sharing details, null if not shared. */
            SharingDetails: {
                ShareID?: string;
                /** @description Share URL linking to this file or folder */
                ShareUrl?: {
                    /**
                     * @deprecated
                     * @description Share URL ID Deprecated
                     */
                    ShareUrlId?: string;
                    /** @description ShareURL ID */
                    ShareURLID?: string;
                    /** @description URL Token (not always provided) */
                    Token?: string;
                    /**
                     * @deprecated
                     * @description Expiration time timestamp of ShareURL.
                     */
                    ExpireTime?: number | null;
                    /** @description Expiration Timestamp */
                    ExpirationTime?: number | null;
                    /** @description Creation time timestamp of ShareURL. */
                    CreateTime?: number;
                    /** @description Number of Accesses (by access is meant download; first block is enough to increase the counter) */
                    NumAccesses?: number;
                } | null;
            } | null;
            /**
             * @deprecated
             * @description Deprecated, use `SharingDetails.ShareID` since there will only be one share per link. List of Shares related to this link.
             */
            ShareIDs: string[];
            /**
             * @deprecated
             * @description Deprecated, use `SharingDetails.ShareURLs` and count URLs. Number of Share URLs linking to this file or folder.
             */
            NbUrls: number;
            /**
             * @deprecated
             * @description Deprecated, use `SharingDetails.ShareURLs` and count valid URLs. Number of active urls
             */
            ActiveUrls: number;
            /**
             * @deprecated
             * @description Deprecated, use `SharingDetails.ShareURLs` and check for valid URLs. Set if all URLs are expired. 0 => at least one valid URL, 1 => no usable URL
             * @enum {integer}
             */
            UrlsExpired: 0 | 1;
            /** @description Extended attributes encrypted with link key */
            XAttr: string | null;
            /** @description File properties */
            FileProperties: {
                /** @description Content key packet */
                ContentKeyPacket?: string;
                /** @description Signature of content key packet. Should be the signature of the (plain) Session Key, signed with the Node Key. Legacy versions must be accepted and can be a signature of the encrypted ContentKeyPacket and can be signed with the NodePassphraseEmail. */
                ContentKeyPacketSignature?: string;
                /** @description Active revision */
                ActiveRevision?: {
                    /** @description Revision ID */
                    ID?: string;
                    /** @description Creation time (UNIX timestamp) */
                    CreateTime?: number;
                    /** @description Size of revision (in bytes) */
                    Size?: number;
                    /** @description Signature of the manifest, signed with SignatureEmail */
                    ManifestSignature?: string;
                    /**
                     * Format: email
                     * @description Signature email address for blocks, XAttributes and manifest
                     */
                    SignatureEmail?: string;
                    /**
                     * Format: email
                     * @deprecated
                     * @description [DEPRECATED] Signature email address for blocks, XAttributes, and manifest
                     */
                    SignatureAddress?: string;
                    /**
                     * @description State; Will always be active; 1=active
                     * @enum {integer}
                     */
                    State?: 1;
                    /**
                     * @deprecated
                     * @description Revision has a thumbnail
                     * @enum {integer}
                     */
                    Thumbnail?: 0 | 1;
                    /**
                     * @deprecated
                     * @description Download URL for the thumbnail block
                     */
                    ThumbnailDownloadUrl?: string;
                    /**
                     * @deprecated
                     * @description Thumbnail properties
                     */
                    ThumbnailURLInfo?: {
                        /**
                         * @deprecated
                         * @description Bare Download URL for the thumbnail block
                         */
                        BareURL?: string;
                        /**
                         * @deprecated
                         * @description Token for the thumbnail block
                         */
                        Token?: string;
                    };
                    Thumbnails?: components['schemas']['ThumbnailTransformer'][];
                    Photo?: components['schemas']['PhotoTransformer'] | null;
                };
            } | null;
            FolderProperties: {
                /** @description Node hash key (signed since 1st August 2021 with either node or address key, after 1st May 2022 (on web, iOS unknown) changed to node key) */
                NodeHashKey?: string;
            } | null;
            /** @description ProtonDocument properties; optional */
            DocumentProperties?: {
                /** @description Document size */
                Size?: number;
            } | null;
            /** @description Album properties; optional */
            AlbumProperties?: {
                /** @description Is the album locked */
                Locked?: boolean;
                /** @description ID of the album cover link */
                CoverLinkID?: string | null;
                /** @description Last time a Photo was added to the Album */
                LastActivityTime?: number;
                /** @description Amount of photos in album */
                PhotoCount?: number;
                /** @description Node hash key */
                NodeHashKey?: string;
            } | null;
            /** @description Photo properties; optional */
            PhotoProperties?: {
                /** @description A list of Albums the Photo-Link is part of */
                Albums?: {
                    /** @description Album Link ID */
                    AlbumLinkID?: string;
                    /** @description NameHash in Album context (encrypted with Album-Link-NodeKey) */
                    Hash?: string;
                    /** @description ContentHash in Album context (encrypted with Album-Link-NodeKey) */
                    ContentHash?: string;
                    /** @description Timestamp Photo-Link was added to this album */
                    AddedTime?: number;
                }[];
                /** @description A list of tags assigned to the photo. The list will always be empty when requested by a user that is not the volume-owner. */
                Tags?: number[];
            } | null;
        } & components['schemas']['LinkTransformer'];
        LinkSharedByMeResponseDto: {
            ShareID: components['schemas']['Id2'];
            LinkID: components['schemas']['Id2'];
            ContextShareID: components['schemas']['Id2'];
        };
        LinkSharedWithMeResponseDto: {
            VolumeID: components['schemas']['Id2'];
            ShareID: components['schemas']['Id2'];
            LinkID: components['schemas']['Id2'];
            ShareTargetType: components['schemas']['TargetType2'];
        };
        ExternalInvitationRequestDto: {
            InviterAddressID: components['schemas']['Id'];
            /** Format: email */
            InviteeEmail: string;
            /**
             * @description Permission bitfield, valid permissions:
             *      - 4: read access
             *      - 6: read + write access
             *      - 22: read + write + admin access
             *
             * @enum {integer}
             */
            Permissions: 4 | 6 | 22;
            /** @description Base64 signature of "inviteemail|base64(share passphrase session key)" signed with the admin's address key and the signature context `drive.share-member.external-invitation` */
            ExternalInvitationSignature: string;
        };
        InvitationEmailDetailsRequestDto: {
            Message?: string | null;
            ItemName?: string | null;
        };
        ExternalInvitationResponseDto: {
            ExternalInvitationID: components['schemas']['Id2'];
            /** Format: email */
            InviterEmail: string;
            /** Format: email */
            InviteeEmail: string;
            /**
             * @description Permission bitfield, valid permissions:
             *      - 4: read access
             *      - 6: read + write access
             *      - 22: read + write + admin access
             *
             * @enum {integer}
             */
            Permissions: 4 | 6 | 22;
            /** @description Base64 signature of "inviteemail|base64(share passphrase session key)" signed with the admin's address key and the signature context `drive.share-member.external-invitation` */
            ExternalInvitationSignature: string;
            State: components['schemas']['ExternalInvitationState'];
            CreateTime: number;
        };
        UserRegisteredExternalInvitationItemDto: {
            VolumeID: components['schemas']['Id2'];
            ShareID: components['schemas']['Id2'];
            ExternalInvitationID: components['schemas']['Id2'];
        };
        InvitationRequestDto: {
            /** Format: email */
            InviterEmail: string;
            /** Format: email */
            InviteeEmail: string;
            /**
             * @description Permission bitfield, valid permissions:
             *      - 4: read access
             *      - 6: read + write access
             *      - 22: read + write + admin access
             *
             * @enum {integer}
             */
            Permissions: 4 | 6 | 22;
            /** @description Encrypting the share passphrase's session key with the invitee's public address key, base64 encoded */
            KeyPacket: string;
            /** @description Signature of the above member key packet with the private key of the user (inviter) and the signature context `drive.share-member.inviter`, base64 encoded */
            KeyPacketSignature: string;
            /** @default null */
            ExternalInvitationID: components['schemas']['Id'] | null;
        };
        InvitationResponseDto: {
            InvitationID: components['schemas']['Id2'];
            /** Format: email */
            InviterEmail: string;
            /** Format: email */
            InviteeEmail: string;
            /**
             * @description Permission bitfield, valid permissions:
             *      - 4: read access
             *      - 6: read + write access
             *      - 22: read + write + admin access
             *
             * @enum {integer}
             */
            Permissions: 4 | 6 | 22;
            /** @description base64 encoded key packet, encrypting the share passphrase's session key with the invitee's address key */
            KeyPacket: string;
            /** @description PGP signature of the member key packet (encrypted) by inviter */
            KeyPacketSignature: string;
            CreateTime: number;
        };
        PendingInvitationItemDto: {
            VolumeID: components['schemas']['Id2'];
            ShareID: components['schemas']['Id2'];
            InvitationID: components['schemas']['Id2'];
            ShareTargetType: components['schemas']['TargetType2'];
        };
        ShareResponseDto2: {
            ShareID: components['schemas']['Id2'];
            VolumeID: components['schemas']['Id2'];
            Passphrase: components['schemas']['PGPMessage2'];
            ShareKey: components['schemas']['PGPPrivateKey2'];
            /** Format: email */
            CreatorEmail: string;
        };
        LinkResponseDto: {
            Type: components['schemas']['NodeType2'];
            LinkID: components['schemas']['Id2'];
            Name: components['schemas']['PGPMessage2'];
            MIMEType?: string | null;
        };
        ContextShareDto: {
            VolumeID: components['schemas']['Id2'];
            ShareID: components['schemas']['Id2'];
            LinkID: components['schemas']['Id2'];
        };
        MemberResponseDto2: {
            MemberID: components['schemas']['Id2'];
            /** Format: email */
            InviterEmail: string;
            /** Format: email */
            Email: string;
            /**
             * @description Permission bitfield, cannot exceed the inviter's permissions. Valid permissions:
             *      - 4: read access
             *      - 6: read + write access
             *      - 22: read + write + admin access
             *
             * @enum {integer}
             */
            Permissions: 4 | 6 | 22;
            /** @description base64 encoded key packet, encrypting the share passphrase's session key with the invitee's address key */
            KeyPacket: string;
            /** @description PGP signature of the member key packet (encrypted) by inviter */
            KeyPacketSignature: string;
            /** @description Signature of the share passphrase's session key with the private key of the user (invitee). */
            SessionKeySignature: string;
            CreateTime: number;
        };
        SecurityResponseResultDto: {
            Hash: string;
            /** @description Whether file is safe or not, true if yes, false if not */
            Safe: boolean;
        };
        SecurityResponseErrorDto: {
            Hash: string;
            /**
             * @description An error message describing the error, translated. Can be displayed directly to user.
             * @example We cannot check this file at present, please proceed with caution
             */
            Error: string;
        };
        ThumbnailResponse: {
            ThumbnailID: components['schemas']['Id2'];
            BareURL: string;
            Token: string;
        };
        ThumbnailErrorResponse: {
            ThumbnailID: components['schemas']['Id2'];
            Error: string;
            Code: number;
        };
        UserSettings: {
            Layout?: components['schemas']['LayoutSetting2'] | null;
            Sort?: components['schemas']['SortSetting2'] | null;
            /** @description Number of days revisions should be retained. If null, default will be used by backend. Changing the setting is only available to paid users, free users will always use the default. */
            RevisionRetentionDays?: components['schemas']['RevisionRetentionDays2'] | null;
            /** @description Indicates if B2BPhotos (possibility to the user to use Photos) is enabled. If null, the default value to 0 = false will be used by backend. Changing the setting is only available to B2B users */
            B2BPhotosEnabled?: boolean | null;
            /** @description Indicates if email notifications for comment activity in Proton Docs are enabled. If null, the default value to 0 = false will be used by backend. */
            DocsCommentsNotificationsEnabled?: boolean | null;
            /** @description Indicates if email notifications for comment activity in Proton Docs should include the document name. If null, the default value to 0 = false will be used by backend. */
            DocsCommentsNotificationsIncludeDocumentName?: boolean | null;
            /** @description Indicates user-preferred font in Proton Docs. */
            DocsFontPreference?: string | null;
            /** @description Order and visibility of Photo Tags, tags not in the list should not be shown; Use defaults when NULL; Show no tags if empty array. */
            PhotoTags?: number[] | null;
        };
        Defaults: {
            RevisionRetentionDays: components['schemas']['RevisionRetentionDays3'];
            /** @description Indicates if B2BPhotos (possibility to the user to use Photos) is enabled. If null, the default value to 0 = false will be used by backend. Changing the setting is only available to B2B users */
            B2BPhotosEnabled: boolean;
            /** @description Indicates if email notifications for comment activity in Proton Docs are enabled. If null, the default value to 0 = false will be used by backend. */
            DocsCommentsNotificationsEnabled: boolean;
            /** @description Indicates if email notifications for comment activity in Proton Docs should include the document name. */
            DocsCommentsNotificationsIncludeDocumentName: boolean;
            /** @description Default order and visibility of Photo Tags. */
            PhotoTags: number[];
        };
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>0</td><td>List</td></tr><tr><td>1</td><td>Grid</td></tr></table></details></details>
         * @enum {integer}
         */
        LayoutSetting: 0 | 1;
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>-4</td><td>ModifiedDesc</td></tr><tr><td>-2</td><td>SizeDesc</td></tr><tr><td>-1</td><td>NameDesc</td></tr><tr><td>1</td><td>NameAsc</td></tr><tr><td>2</td><td>SizeAsc</td></tr><tr><td>4</td><td>ModifiedAsc</td></tr></table></details></details>
         * @enum {integer}
         */
        SortSetting: -4 | -2 | -1 | 1 | 2 | 4;
        /**
         * @description <p>Number of days revisions should be retained. If null, default will be used by backend. Changing the setting is only available to paid users, free users will always use the default.</p><details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>0</td><td>DAYS_0</td></tr><tr><td>7</td><td>DAYS_7</td></tr><tr><td>30</td><td>DAYS_30</td></tr><tr><td>180</td><td>DAYS_180</td></tr><tr><td>365</td><td>DAYS_365</td></tr><tr><td>3650</td><td>DAYS_3650</td></tr></table></details></details>
         * @enum {integer}
         */
        RevisionRetentionDays: 0 | 7 | 30 | 180 | 365 | 3650;
        VolumeResponseDto: {
            ID: components['schemas']['Id2'];
            /**
             * @deprecated
             * @description Deprecated, use `CreateTime` instead
             */
            CreationTime: number;
            /**
             * @deprecated
             * @default null
             */
            MaxSpace: number | null;
            VolumeID: components['schemas']['Id2'];
            CreateTime: number;
            ModifyTime: number;
            /** @description Used space in bytes */
            UsedSpace: number;
            DownloadedBytes: number;
            UploadedBytes: number;
            State: components['schemas']['VolumeState'];
            Share: components['schemas']['ShareReferenceResponseDto'];
            Type: components['schemas']['VolumeType2'];
        };
        RestoreMainShareDto: {
            /** @description ShareID of the existing, locked main share */
            LockedShareID: string;
            /** @description Folder name as armored PGP message */
            Name: string;
            /** @description Hash of the name */
            Hash: string;
            NodePassphrase: components['schemas']['PGPMessage'];
            NodePassphraseSignature: components['schemas']['PGPSignature'];
            /**
             * @description Node Hash Key should be provided if it needs to be signed because it was unsigned or signed  with the address key (legacy). It should be signed with the new parent's node key. If it was properly signed with the parent node key, it should not be updated. Armored PGP message.
             * @default null
             */
            NodeHashKey: string | null;
        };
        RestoreRootShareDto: {
            /** @description ShareID of the existing share on the old volume */
            LockedShareID: string;
            /** @description Key packet for the share passphrase, encrypted with the active key associated with the new volume. Encoded with Base64. */
            ShareKeyPacket: string;
            /** @description Signed with new key as armored PGP signature */
            PassphraseSignature: string;
        };
        ConflictErrorDetailsDto: {
            ConflictLinkID: components['schemas']['Id'];
            /**
             * @description A conflicting Revision in Active state.
             * @default null
             */
            ConflictRevisionID: string | null;
            /**
             * @description A conflicting Revision in Draft state.
             * @default null
             */
            ConflictDraftRevisionID: string | null;
            /**
             * @description ClientUID of conflicting Revision if in Draft state.
             * @default null
             */
            ConflictDraftClientUID: string | null;
            /**
             * @deprecated
             * @description [DEPRECATED] for backwards compatibility on create revision, same value as ConflictDraftRevisionID
             * @default null
             */
            RevisionID: string | null;
        };
        /** Thumbnail */
        ThumbnailTransformer: {
            ThumbnailID: string;
            /** @enum {integer} */
            Type: 1 | 2 | 3;
            /** @description Base64 encoded thumbnail-content-hash */
            Hash: string;
            Size: number;
        };
        /** Photo */
        PhotoTransformer: {
            LinkID: string;
            /** @description Unix timestamp of when the photo was taken as extracted by client from exif */
            CaptureTime: number;
            MainPhotoLinkID: string | null;
            /** @description File name hash */
            Hash: string;
            /**
             * @deprecated
             * @description Deprecated: Clients persist exif information in xAttr instead
             */
            Exif?: string | null;
            /** @description Photo content hash, Hashmac of content using parent folder's hash key */
            ContentHash: string | null;
            /** @description LinkIDs of related Photos if there are any */
            RelatedPhotosLinkIDs: string[];
        };
        /** Link */
        LinkTransformer: {
            /** @description Encrypted link ID */
            LinkID: string;
            /** @description Encrypted parent link ID */
            ParentLinkID: string | null;
            /** @description Encrypted volume link ID */
            VolumeID: string;
            /**
             * @description Node type (1=folder, 2=file)
             * @enum {integer}
             */
            Type: 1 | 2;
            /**
             * @description Link name
             * @example ----BEGIN PGP MESSAGE----...
             */
            Name: string;
            /**
             * Format: email
             * @description Link name signature email (signed since 1st January 2021)
             */
            NameSignatureEmail: string;
            /** @description Name Hash */
            Hash: string | null;
            /**
             * @description State (0=draft, 1=active, 2=trashed)
             * @enum {integer}
             */
            State: 0 | 1 | 2;
            /**
             * @deprecated
             * @description [Deprecated] ExpirationTime (always null)
             */
            ExpirationTime: number | null;
            /**
             * @deprecated
             * @description Encrypted size (for files of active revisions, better to use FileProperties > ActiveRevision > Size)
             */
            Size: number;
            /** @description Encrypted size of Node  (all active and obsolete revisions for files) */
            TotalSize: number;
            /**
             * @description Mime type
             * @example application/ms-xls
             */
            MIMEType: string;
            /**
             * @deprecated
             * @description Always returns 1
             * @enum {integer}
             */
            Attributes: 1;
            /**
             * @deprecated
             * @description Always returns 7, read+write+execute
             */
            Permissions: number;
            /**
             * @description Node Key
             * @example -----BEGIN PGP PRIVATE KEY BLOCK-----...
             */
            NodeKey: string;
            /**
             * @description Node passphrase
             * @example ----BEGIN PGP MESSAGE-----...
             */
            NodePassphrase: string;
            /**
             * @description Node passphrase signature
             * @example -----BEGIN PGP SIGNATURE-----...
             */
            NodePassphraseSignature: string;
            /**
             * Format: email
             * @description Signature email address used for passphrase, should be the user's address associated with the Share.
             */
            SignatureEmail: string;
            /**
             * Format: email
             * @deprecated
             * @description [Deprecated] Signature email address used for passphrase
             */
            SignatureAddress: string;
            /** @description Creation timestamp */
            CreateTime: number;
            /** @description Last modification timestamp (on API, real modify date is stored in XAttr) */
            ModifyTime: number;
            /** @description Timestamp, time at which the file was trashed, null if file is not trashed. */
            Trashed: number | null;
        };
        DetailedRevisionResponseDto2: {
            Blocks: components['schemas']['BlockResponseDto2'][];
            Photo?: components['schemas']['PhotoResponseDto2'] | null;
            ID: components['schemas']['Id'];
            ManifestSignature?: components['schemas']['PGPSignature'] | null;
            /** @description Size of revision (in bytes) */
            Size: number;
            State: components['schemas']['RevisionState2'];
            XAttr?: components['schemas']['PGPMessage'] | null;
            /**
             * @deprecated
             * @description Flag stating if revision has a thumbnail
             * @enum {integer}
             */
            Thumbnail: 0 | 1;
            /** @deprecated */
            ThumbnailHash?: components['schemas']['BinaryString'] | null;
            /**
             * @deprecated
             * @description Size thumbnail in bytes; 0 if no thumbnail present
             */
            ThumbnailSize: number;
            Thumbnails: components['schemas']['ThumbnailResponseDto2'][];
            ClientUID?: string | null;
            /** @default null */
            CreateTime: number | null;
            /**
             * Format: email
             * @description User's email associated with the share and used to sign the manifest and block contents.
             * @default null
             */
            SignatureEmail: string | null;
            /**
             * Format: email
             * @deprecated
             * @description [DEPRECATED] use `SignatureEmail` Email address corresponding to the signature
             * @default null
             */
            SignatureAddress: string | null;
        };
        ShareConflictErrorDetailsDto: {
            ConflictLinkID: components['schemas']['Id'];
            /** @description A conflicting Share on the Link. */
            ConflictShareID: string;
        };
        AlbumLinkResponseDto: {
            LinkID: components['schemas']['Id2'];
        };
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>1</td><td>Active</td></tr><tr><td>3</td><td>Locked</td></tr></table></details></details>
         * @enum {integer}
         */
        VolumeState: 1 | 3;
        ShareReferenceResponseDto: {
            ShareID: components['schemas']['Id2'];
            ID: components['schemas']['Id2'];
            LinkID: components['schemas']['Id2'];
        };
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>1</td><td>Regular</td></tr><tr><td>2</td><td>Photo</td></tr></table></details></details>
         * @enum {integer}
         */
        VolumeType2: 1 | 2;
        /**
         * @description <p>Can be null if the Link was deleted</p><details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>0</td><td>Draft</td></tr><tr><td>1</td><td>Active</td></tr><tr><td>2</td><td>Trashed</td></tr></table></details></details>
         * @enum {integer}
         */
        LinkState: 0 | 1 | 2;
        ListPhotosAlbumRelatedPhotoItemResponseDto: {
            LinkID: components['schemas']['Id2'];
            CaptureTime: number;
            Hash: string;
            ContentHash: string;
        };
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>1</td><td>Active</td></tr><tr><td>3</td><td>Deleted</td></tr></table></details></details>
         * @enum {integer}
         */
        BookmarkShareURLState: 1 | 3;
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>0</td><td>Disabled</td></tr><tr><td>1</td><td>Enabled</td></tr></table></details></details>
         * @enum {integer}
         */
        DeviceSyncState: 0 | 1;
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>1</td><td>Windows</td></tr><tr><td>2</td><td>MacOS</td></tr><tr><td>3</td><td>Linux</td></tr></table></details></details>
         * @enum {integer}
         */
        DeviceType: 1 | 2 | 3;
        DeviceDataDto3: {
            DeviceID: components['schemas']['Id2'];
            VolumeID: components['schemas']['Id2'];
            SyncState: components['schemas']['DeviceSyncState2'];
            Type: components['schemas']['DeviceType2'];
            /** @description UNIX timestamp when the Device got last synced */
            LastSyncTime?: number | null;
            CreateTime: number;
            ModifyTime: number;
            /**
             * @deprecated
             * @description Deprecated: use `CreateTime`
             */
            CreationTime: number;
        };
        ShareDataDto4: {
            ShareID: components['schemas']['Id2'];
            LinkID: components['schemas']['Id2'];
            /** @deprecated */
            Name: string;
        };
        DeviceDto: {
            DeviceID: components['schemas']['Id2'];
            CreateTime: number;
            ModifyTime: number;
            Type: components['schemas']['DeviceType2'];
        };
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>0</td><td>Delete</td></tr><tr><td>1</td><td>Create</td></tr><tr><td>2</td><td>Update</td></tr><tr><td>3</td><td>UpdateMetadata</td></tr></table></details></details>
         * @enum {integer}
         */
        EventType: 0 | 1 | 2 | 3;
        EventLinkDataDto: {
            LinkID: components['schemas']['Id2'];
            ParentLinkID?: components['schemas']['Id2'] | null;
            IsShared: boolean;
            IsTrashed: boolean;
        };
        RelatedPhotoDto: {
            LinkID: components['schemas']['Id'];
            /** @description Name, reusing same session key as previously. */
            Name: string;
            /** @description Node passphrase, reusing same session key as previously. */
            NodePassphrase: string;
            /** @description Name hash */
            Hash: string;
            /** @description Photo content hash, hmacsha256 of sha1 content using parent folder's hash key [ hmacSha256(folder hash key, sha1(plain content)) ] */
            ContentHash: string;
        };
        LinkDto: {
            LinkID: components['schemas']['Id'];
            Type: components['schemas']['NodeType4'];
            ParentLinkID?: components['schemas']['Id'] | null;
            State: components['schemas']['LinkState3'];
            CreateTime: number;
            ModifyTime: number;
            TrashTime?: number | null;
            Name: components['schemas']['PGPMessage'];
            NameHash?: string | null;
            NodeKey: components['schemas']['PGPPrivateKey'];
            NodePassphrase: components['schemas']['PGPMessage'];
            NodePassphraseSignature: components['schemas']['PGPSignature'];
            /** Format: email */
            SignatureEmail?: string | null;
            /** Format: email */
            NameSignatureEmail?: string | null;
            /** @default null */
            DirectPermissions: number | null;
        };
        FileDto: {
            TotalEncryptedSize: number;
            ContentKeyPacket: components['schemas']['BinaryString'];
            MediaType?: string | null;
            ActiveRevision?: components['schemas']['ActiveRevisionDto'] | null;
            ContentKeyPacketSignature?: components['schemas']['PGPSignature'] | null;
        };
        SharingDto: {
            ShareID: components['schemas']['Id'];
            ShareURLID?: components['schemas']['Id'] | null;
        };
        MembershipDto: {
            ShareID: components['schemas']['Id'];
            MembershipID: components['schemas']['Id'];
            /**
             * @description Permission bitfield, valid permissions:
             *      - 4: read access
             *      - 6: read + write access
             *      - 22: read + write + admin access
             *
             * @enum {integer}
             */
            Permissions: 4 | 6 | 22;
            InviteTime: number;
            /** Format: email */
            InviterEmail: string;
            /** @description base64 encoded key packet, encrypting the share passphrase's session key with the invitee's address key */
            MemberSharePassphraseKeyPacket: string;
            /** @description PGP signature of the member key packet (encrypted) by inviter */
            InviterSharePassphraseKeyPacketSignature: string;
            /** @description Signature of the share passphrase's session key with the private key of the user (invitee). */
            InviteeSharePassphraseSessionKeySignature: string;
        };
        FolderDto: {
            NodeHashKey?: components['schemas']['PGPMessage'] | null;
            XAttr?: components['schemas']['PGPMessage'] | null;
        };
        AlbumDto: {
            NodeHashKey?: components['schemas']['PGPMessage'] | null;
            XAttr?: components['schemas']['PGPMessage'] | null;
        };
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>0</td><td>Draft</td></tr><tr><td>1</td><td>Active</td></tr><tr><td>2</td><td>Obsolete</td></tr></table></details></details>
         * @enum {integer}
         */
        RevisionState: 0 | 1 | 2;
        ThumbnailResponseDto: {
            ThumbnailID: components['schemas']['Id2'];
            Type: components['schemas']['ThumbnailType2'];
            Hash: components['schemas']['BinaryString2'];
            Size: number;
        };
        Verifier: {
            Token: components['schemas']['BinaryString'];
        };
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Name</th><th>Description</th></tr><tr><td>1</td><td>Preview</td><td>512 px, max. 65536 bytes in encrypted size</td></tr><tr><td>2</td><td>HDPreview</td><td>1920 px, max. 1048576 bytes in encrypted size</td></tr><tr><td>3</td><td>MachineLearning</td><td>max. 65536 bytes in encrypted size</td></tr></table></details></details>
         * @enum {integer}
         */
        ThumbnailType: 1 | 2 | 3;
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Name</th><th>Description</th></tr><tr><td>1</td><td>Preview</td><td>512 px, max. 65536 bytes in encrypted size</td></tr><tr><td>2</td><td>HDPreview</td><td>1920 px, max. 1048576 bytes in encrypted size</td></tr><tr><td>3</td><td>MachineLearning</td><td>max. 65536 bytes in encrypted size</td></tr></table></details></details>
         * @enum {integer}
         */
        ThumbnailType2: 1 | 2 | 3;
        PhotoListingRelatedItemResponse: {
            LinkID: components['schemas']['Id2'];
            /** @description Unix timestamp of when the photo was taken as extracted by client from exif */
            CaptureTime: number;
            /** @description File name hash */
            Hash: string;
            /** @description Photo content hash, Hashmac of content using parent folder's hash key */
            ContentHash?: string | null;
        };
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>1</td><td>Folder</td></tr><tr><td>2</td><td>File</td></tr><tr><td>3</td><td>Album</td></tr></table></details></details>
         * @enum {integer}
         */
        NodeType2: 1 | 2 | 3;
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>0</td><td>Draft</td></tr><tr><td>1</td><td>Active</td></tr><tr><td>2</td><td>Trashed</td></tr></table></details></details>
         * @enum {integer}
         */
        LinkState2: 0 | 1 | 2;
        LinkDto2: {
            LinkID: components['schemas']['Id2'];
            Type: components['schemas']['NodeType2'];
            ParentLinkID?: components['schemas']['Id2'] | null;
            State: components['schemas']['LinkState2'];
            CreateTime: number;
            ModifyTime: number;
            TrashTime?: number | null;
            Name: components['schemas']['PGPMessage2'];
            NameHash?: string | null;
            NodeKey: components['schemas']['PGPPrivateKey2'];
            NodePassphrase: components['schemas']['PGPMessage2'];
            NodePassphraseSignature: components['schemas']['PGPSignature2'];
            /** Format: email */
            SignatureEmail?: string | null;
            /** Format: email */
            NameSignatureEmail?: string | null;
            /** @default null */
            DirectPermissions: number | null;
        };
        FolderDto2: {
            NodeHashKey?: components['schemas']['PGPMessage2'] | null;
            XAttr?: components['schemas']['PGPMessage2'] | null;
        };
        SharingDto2: {
            ShareID: components['schemas']['Id2'];
            ShareURLID?: components['schemas']['Id2'] | null;
        };
        MembershipDto2: {
            ShareID: components['schemas']['Id2'];
            MembershipID: components['schemas']['Id2'];
            /**
             * @description Permission bitfield, valid permissions:
             *      - 4: read access
             *      - 6: read + write access
             *      - 22: read + write + admin access
             *
             * @enum {integer}
             */
            Permissions: 4 | 6 | 22;
            InviteTime: number;
            /** Format: email */
            InviterEmail: string;
            /** @description base64 encoded key packet, encrypting the share passphrase's session key with the invitee's address key */
            MemberSharePassphraseKeyPacket: string;
            /** @description PGP signature of the member key packet (encrypted) by inviter */
            InviterSharePassphraseKeyPacketSignature: string;
            /** @description Signature of the share passphrase's session key with the private key of the user (invitee). */
            InviteeSharePassphraseSessionKeySignature: string;
        };
        /**
         * @description <p>1=active, 3=locked</p><details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Name</th><th>Description</th></tr><tr><td>1</td><td>Active</td><td></td></tr><tr><td>2</td><td>Deleted</td><td></td></tr><tr><td>3</td><td>Locked</td><td>* Locked membership can have two reasons:
         *          * - either the associated address was disabled/deleted, e.g. due to account deletion
         *          * - or the associated address key was made inactive due to a password reset
         *          *
         *          * It means the membership cannot be used for decryption unless it is restored with account recovery.</td></tr></table></details></details>
         * @enum {integer}
         */
        ShareMemberState: 1 | 2 | 3;
        /**
         * @description <p>Types: Folder - 1, File - 2}</p><details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>1</td><td>Folder</td></tr><tr><td>2</td><td>File</td></tr><tr><td>3</td><td>Album</td></tr></table></details></details>
         * @enum {integer}
         */
        NodeType3: 1 | 2 | 3;
        ThumbnailURLInfoResponseDto: {
            /**
             * @deprecated
             * @description Download URL for the thumbnail
             */
            URL?: string | null;
            /** @description Bare Download URL for the thumbnail */
            BareURL?: string | null;
            /** @description Token for the thumbnail URL */
            Token?: string | null;
        };
        BlockResponseDto: {
            Index: number;
            Hash: components['schemas']['BinaryString2'];
            Token?: string | null;
            /** @deprecated */
            URL?: string | null;
            BareURL?: string | null;
            /**
             * @deprecated
             * @default null
             */
            EncSignature: components['schemas']['PGPMessage2'] | null;
            /**
             * Format: email
             * @deprecated
             * @description Email used to sign block
             * @default null
             */
            SignatureEmail: string | null;
        };
        PhotoResponseDto: {
            LinkID: components['schemas']['Id2'];
            /** @description Unix timestamp of when the photo was taken as extracted by client from exif */
            CaptureTime: number;
            MainPhotoLinkID?: components['schemas']['Id2'] | null;
            /** @description File name hash */
            Hash?: string | null;
            /** @description Photo content hash, Hashmac of content using parent folder's hash key */
            ContentHash?: string | null;
            /** @description LinkIDs of related Photos if there are any */
            RelatedPhotosLinkIDs: components['schemas']['Id2'][];
            /**
             * @deprecated
             * @description Deprecated: Clients persist exif information in xAttr instead
             * @default null
             */
            Exif: string | null;
        };
        /**
         * @description <p>The target type of the Share that is corresponding to this invitation.<br />
         *                 This should not be used as source of information to know what NodeType or MIMEType the targeted Share is.</p><details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Name</th><th>Description</th></tr><tr><td>0</td><td>Root</td><td>main, device or photo root share</td></tr><tr><td>1</td><td>Folder</td><td></td></tr><tr><td>2</td><td>File</td><td></td></tr><tr><td>3</td><td>Album</td><td></td></tr><tr><td>4</td><td>Photo</td><td></td></tr><tr><td>5</td><td>ProtonVendor</td><td>documents and sheets</td></tr></table></details></details>
         * @enum {integer}
         */
        TargetType2: 0 | 1 | 2 | 3 | 4 | 5;
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>1</td><td>Pending</td></tr><tr><td>2</td><td>UserRegistered</td></tr><tr><td>4</td><td>Deleted</td></tr></table></details></details>
         * @enum {integer}
         */
        ExternalInvitationState: 1 | 2 | 4;
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>0</td><td>List</td></tr><tr><td>1</td><td>Grid</td></tr></table></details></details>
         * @enum {integer}
         */
        LayoutSetting2: 0 | 1;
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>-4</td><td>ModifiedDesc</td></tr><tr><td>-2</td><td>SizeDesc</td></tr><tr><td>-1</td><td>NameDesc</td></tr><tr><td>1</td><td>NameAsc</td></tr><tr><td>2</td><td>SizeAsc</td></tr><tr><td>4</td><td>ModifiedAsc</td></tr></table></details></details>
         * @enum {integer}
         */
        SortSetting2: -4 | -2 | -1 | 1 | 2 | 4;
        /**
         * @description <p>Number of days revisions should be retained. If null, default will be used by backend. Changing the setting is only available to paid users, free users will always use the default.</p><details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>0</td><td>DAYS_0</td></tr><tr><td>7</td><td>DAYS_7</td></tr><tr><td>30</td><td>DAYS_30</td></tr><tr><td>180</td><td>DAYS_180</td></tr><tr><td>365</td><td>DAYS_365</td></tr><tr><td>3650</td><td>DAYS_3650</td></tr></table></details></details>
         * @enum {integer}
         */
        RevisionRetentionDays2: 0 | 7 | 30 | 180 | 365 | 3650;
        /**
         * @description <p>Number of days revisions should be retained if not defined by the user. Default ALWAYS used for free users, even if different value is set (premium feature).</p><details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>0</td><td>DAYS_0</td></tr><tr><td>7</td><td>DAYS_7</td></tr><tr><td>30</td><td>DAYS_30</td></tr><tr><td>180</td><td>DAYS_180</td></tr><tr><td>365</td><td>DAYS_365</td></tr><tr><td>3650</td><td>DAYS_3650</td></tr></table></details></details>
         * @enum {integer}
         */
        RevisionRetentionDays3: 0 | 7 | 30 | 180 | 365 | 3650;
        BlockResponseDto2: {
            Index: number;
            Hash: components['schemas']['BinaryString'];
            Token?: string | null;
            /** @deprecated */
            URL?: string | null;
            BareURL?: string | null;
            /**
             * @deprecated
             * @default null
             */
            EncSignature: components['schemas']['PGPMessage'] | null;
            /**
             * Format: email
             * @deprecated
             * @description Email used to sign block
             * @default null
             */
            SignatureEmail: string | null;
        };
        PhotoResponseDto2: {
            LinkID: components['schemas']['Id'];
            /** @description Unix timestamp of when the photo was taken as extracted by client from exif */
            CaptureTime: number;
            MainPhotoLinkID?: components['schemas']['Id'] | null;
            /** @description File name hash */
            Hash?: string | null;
            /** @description Photo content hash, Hashmac of content using parent folder's hash key */
            ContentHash?: string | null;
            /** @description LinkIDs of related Photos if there are any */
            RelatedPhotosLinkIDs: components['schemas']['Id'][];
            /**
             * @deprecated
             * @description Deprecated: Clients persist exif information in xAttr instead
             * @default null
             */
            Exif: string | null;
        };
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>0</td><td>Draft</td></tr><tr><td>1</td><td>Active</td></tr><tr><td>2</td><td>Obsolete</td></tr></table></details></details>
         * @enum {integer}
         */
        RevisionState2: 0 | 1 | 2;
        ThumbnailResponseDto2: {
            ThumbnailID: components['schemas']['Id'];
            Type: components['schemas']['ThumbnailType'];
            Hash: components['schemas']['BinaryString'];
            Size: number;
        };
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>0</td><td>Disabled</td></tr><tr><td>1</td><td>Enabled</td></tr></table></details></details>
         * @enum {integer}
         */
        DeviceSyncState2: 0 | 1;
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>1</td><td>Windows</td></tr><tr><td>2</td><td>MacOS</td></tr><tr><td>3</td><td>Linux</td></tr></table></details></details>
         * @enum {integer}
         */
        DeviceType2: 1 | 2 | 3;
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>1</td><td>Folder</td></tr><tr><td>2</td><td>File</td></tr><tr><td>3</td><td>Album</td></tr></table></details></details>
         * @enum {integer}
         */
        NodeType4: 1 | 2 | 3;
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>0</td><td>Draft</td></tr><tr><td>1</td><td>Active</td></tr><tr><td>2</td><td>Trashed</td></tr></table></details></details>
         * @enum {integer}
         */
        LinkState3: 0 | 1 | 2;
        ActiveRevisionDto: {
            RevisionID: components['schemas']['Id'];
            CreateTime: number;
            EncryptedSize: number;
            ManifestSignature?: components['schemas']['PGPSignature'] | null;
            XAttr?: components['schemas']['PGPMessage'] | null;
            Thumbnails: components['schemas']['ThumbnailDto'][];
            Photo?: components['schemas']['PhotoDto'] | null;
            /** Format: email */
            SignatureEmail?: string | null;
        };
        ThumbnailDto: {
            ThumbnailID: components['schemas']['Id'];
            Type: components['schemas']['ThumbnailType'];
            Hash: components['schemas']['BinaryString'];
            EncryptedSize: number;
        };
        PhotoDto: {
            CaptureTime: number;
            MainPhotoLinkID?: components['schemas']['Id'] | null;
            ContentHash?: string | null;
            RelatedPhotosLinkIDs: components['schemas']['Id'][];
        };
    };
    responses: {
        /** @description Plain success response without additional information */
        ProtonSuccessResponse: {
            headers: {
                /** @description The same as the body code */
                'X-Pm-Code'?: 1000;
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['ProtonSuccess'];
            };
        };
        /** @description General Error */
        ProtonErrorResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['ProtonError'];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    'post_drive-photos-volumes-{volumeID}-albums-{linkID}-add-multiple': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
                linkID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['AddPhotosToAlbumRequestDto'];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        Code?: 1001;
                        Responses?: components['schemas']['AddPhotoToAlbumWithLinkIDResponseDto'][];
                    };
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2501: The album does not exist.
                         *      - 200300: Album has reached the limit of photos.
                         *      - 2000: All main photos have to be sent with related photos.
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'get_drive-photos-volumes-{volumeID}-albums': {
        parameters: {
            query?: {
                AnchorID?: string | null;
            };
            header?: never;
            path: {
                volumeID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ListAlbumsResponseDto'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2501: a photo share does not exist for this volume
                         *      - 2011: Insufficient permissions
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'post_drive-photos-volumes-{volumeID}-albums': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CreateAlbumRequestDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CreateAlbumResponseDto'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 200300: Limit of albums per volume reached
                         *      - 2501: a photo share does not exist for this volume
                         *      */
                        Code: number;
                    };
                };
            };
            /** @description Failed dependency */
            424: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Potential codes:
                         *      - 2032
                         *
                         * @enum {integer}
                         */
                        Code: 2032;
                    };
                };
            };
        };
    };
    'post_drive-photos-volumes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CreatePhotoShareRequestDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GetPhotoVolumeResponseDto'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2500: A volume is already active
                         *      - 2500: Cannot create the new Photo volume. Should be migrated from current Photo stream
                         *      - 2001: Invalid PGP message
                         *      - 200501: Operation failed: Please retry
                         *      - 200200: Address not found
                         *      */
                        Code: number;
                    };
                };
            };
            /** @description Failed dependency */
            424: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Potential codes:
                         *      - 2032
                         *
                         * @enum {integer}
                         */
                        Code: 2032;
                    };
                };
            };
        };
    };
    'put_drive-photos-volumes-{volumeID}-albums-{linkID}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
                linkID: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['UpdateAlbumRequestDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2501: a photo share does not exist for this volume
                         *      - 2011: Insufficient permissions
                         *      */
                        Code: number;
                    };
                };
            };
            /** @description Failed dependency */
            424: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Potential codes:
                         *      - 2501: File or folder not found
                         *      - 2001: Invalid PGP message
                         *      - 200501: Operation failed: Please retry
                         *      - 2032
                         *
                         * @enum {integer}
                         */
                        Code: 2032;
                    };
                };
            };
        };
    };
    'delete_drive-photos-volumes-{volumeID}-albums-{linkID}': {
        parameters: {
            query?: {
                /** @description Whether or not to delete the album even with direct children. */
                DeleteAlbumPhotos?: 0 | 1 | null;
            };
            header?: never;
            path: {
                volumeID: string;
                linkID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 200302: Album is not empty. Delete operation would result in data loss.
                         *      - 2011: Insufficient permissions
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'post_drive-photos-volumes-{volumeID}-albums-{linkID}-duplicates': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
                linkID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['FindDuplicatesInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['FindDuplicatesOutputCollection'];
                };
            };
        };
    };
    'get_drive-photos-volumes-{volumeID}-tags-migration': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PhotoTagMigrationStatusResponseDto'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2501: volume does not exist, or is not photo volume
                         *      - 2011: Insufficient permissions, not volume owner
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'post_drive-photos-volumes-{volumeID}-tags-migration': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['UpdatePhotoTagMigrationStatusRequestDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2501: volume does not exist, or is not photo volume
                         *      - 2011: Insufficient permissions, not volume owner
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'get_drive-photos-volumes-{volumeID}-albums-{linkID}-children': {
        parameters: {
            query?: {
                AnchorID?: components['schemas']['ListPhotosAlbumQueryParameters']['AnchorID'];
                Sort?: components['schemas']['ListPhotosAlbumQueryParameters']['Sort'];
                Desc?: components['schemas']['ListPhotosAlbumQueryParameters']['Desc'];
                Tag?: components['schemas']['ListPhotosAlbumQueryParameters']['Tag'];
                OnlyChildren?: components['schemas']['ListPhotosAlbumQueryParameters']['OnlyChildren'];
                IncludeTrashed?: components['schemas']['ListPhotosAlbumQueryParameters']['IncludeTrashed'];
            };
            header?: never;
            path: {
                volumeID: string;
                linkID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ListPhotosAlbumResponseDto'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2501: Volume not found
                         *      - 2501: File or folder not found
                         *      - 2011: Insufficient permissions
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'put_drive-photos-volumes-{volumeID}-recover-multiple': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['TransferPhotoLinksRequestDto'];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        Code?: 1001;
                        Responses?: {
                            /** @description Encrypted link ID */
                            LinkID?: string;
                            Response?: components['schemas']['ProtonSuccess'] | components['schemas']['ProtonError'];
                        }[];
                    };
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2501: The volume does not exist.
                         *      - 2511: cannot recover photos from a share
                         *      - 2011: cannot move favorite photos from a share
                         *      - 2000: All main photos have to be sent with related photos.
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'post_drive-photos-volumes-{volumeID}-albums-{linkID}-remove-multiple': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
                linkID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['RemovePhotosFromAlbumRequestDto'];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        Code?: 1001;
                        Responses?: components['schemas']['RemovePhotoFromAlbumWithLinkIDResponseDto'][];
                    };
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2500: A volume is already active
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'get_drive-photos-albums-shared-with-me': {
        parameters: {
            query?: {
                AnchorID?: components['schemas']['Id'] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SharedWithMeResponseDto'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2011: Insufficient permissions
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'put_drive-volumes-{volumeID}-links-transfer-multiple': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['TransferPhotoLinksRequestDto'];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        Code?: 1001;
                        Responses?: {
                            /** @description Encrypted link ID */
                            LinkID?: string;
                            Response?: components['schemas']['ProtonSuccess'] | components['schemas']['ProtonError'];
                        }[];
                    };
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2501: The volume does not exist.
                         *      - 2511: cannot move favorite photos from a share
                         *      - 2000: All main photos have to be sent with related photos.
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'put_drive-photos-volumes-{volumeID}-links-transfer-multiple': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['TransferPhotoLinksRequestDto'];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        Code?: 1001;
                        Responses?: {
                            /** @description Encrypted link ID */
                            LinkID?: string;
                            Response?: components['schemas']['ProtonSuccess'] | components['schemas']['ProtonError'];
                        }[];
                    };
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2501: The volume does not exist.
                         *      - 2511: cannot move favorite photos from a share
                         *      - 2000: All main photos have to be sent with related photos.
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'post_drive-v2-urls-{token}-bookmark': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ShareURL Token */
                token: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CreateBookmarkShareURLRequestDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CreateBookmarkShareURLResponseDto'];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2001: the token format is invalid
                         *      */
                        Code: number;
                    };
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 200001: You have reached the maximum number of items you can save.
                         *      - 2501: Item link not found
                         *      - 2500: This item is already saved in your drive
                         *      - 200501: Operation failed: Please retry
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'delete_drive-v2-urls-{token}-bookmark': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ShareURL Token */
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2001: the token format is invalid
                         *      */
                        Code: number;
                    };
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2501: Item link not found
                         *      - 2501: Item not found
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'get_drive-v2-shared-bookmarks': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ListBookmarksOfUserResponseDto'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2501: Item link not found
                         *      - 2501: item not found
                         *      - 2501: Invalid Link ID
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'get_drive-devices': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ListDevicesResponseDto'];
                };
            };
        };
    };
    'post_drive-devices': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CreateDeviceRequestDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CreateDeviceResponseDto'];
                };
            };
        };
    };
    'put_drive-devices-{deviceID}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deviceID: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['UpdateDeviceRequestDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
        };
    };
    'delete_drive-devices-{deviceID}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deviceID: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
        };
    };
    'get_drive-v2-devices': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ListDevicesResponseDto2'];
                };
            };
        };
    };
    'post_drive-shares-{shareID}-documents': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CreateDocumentDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CreateDocumentResponseDto'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | {
                              /**
                               * @description Potential codes and their meaning:
                               *      - 200300: max folder size reached
                               *      - 2500: file or folder with same name already exists
                               *      - 2501: parent folder was not found
                               *      - 2011: the user does not have permissions to create a file in this share
                               *
                               * @enum {integer}
                               */
                              Code: 200300 | 2500 | 2501 | 2011;
                          }
                        | components['schemas']['ConflictErrorResponseDto'];
                };
            };
            /** @description Failed dependency */
            424: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Potential codes and their meaning:
                         *      - 2032: Blocked due to feature being disabled, clients are encouraged to refetch feature flags
                         *
                         * @enum {integer}
                         */
                        Code: 2032;
                    };
                };
            };
        };
    };
    'get_drive-shares-{shareID}-events-latest': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['LatestEventIDResponseDto'];
                };
            };
        };
    };
    'get_drive-volumes-{volumeID}-events-latest': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['LatestEventIDResponseDto'];
                };
            };
        };
    };
    'get_drive-shares-{shareID}-events-{eventID}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
                eventID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ListEventsResponseDto'];
                };
            };
        };
    };
    'get_drive-volumes-{volumeID}-events-{eventID}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
                eventID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ListEventsResponseDto'];
                };
            };
        };
    };
    'get_drive-v2-volumes-{volumeID}-events-{eventID}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
                eventID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ListEventsV2ResponseDto'];
                };
            };
        };
    };
    'post_drive-shares-{shareID}-folders': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CreateFolderRequestDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CreateFolderResponseDto'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | {
                              /** @description Potential codes and their meaning:
                               *      - 2511: the link targeted is a photo link
                               *      - 200300: max folder size reached
                               *      - 200301: max folder depth reached
                               *      - 2500: file or folder with same name already exists
                               *      - 2501: parent folder was not found
                               *      */
                              Code?: number;
                          }
                        | components['schemas']['ConflictErrorResponseDto'];
                };
            };
        };
    };
    'post_drive-shares-{shareID}-folders-{linkID}-delete_multiple': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
                linkID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['LinkIDsRequestDto'];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        Code?: 1001;
                        Responses?: components['schemas']['MultiDeleteTransformer'][];
                    };
                };
            };
        };
    };
    'get_drive-shares-{shareID}-folders-{linkID}-children': {
        parameters: {
            query?: {
                /** @description Field to sort by */
                Sort?: 'MIMEType' | 'Size' | 'ModifyTime' | 'CreateTime' | 'Type';
                /** @description Sort order */
                Desc?: 0 | 1;
                /** @description Show all files including those in non-active (drafts) state. */
                ShowAll?: 0 | 1;
                /** @description Show folders only */
                FoldersOnly?: 0 | 1;
                /**
                 * @deprecated
                 * @description Get thumbnail download URLs
                 */
                Thumbnails?: 0 | 1;
                PageSize?: components['schemas']['OffsetPagination']['PageSize'] & unknown;
                Page?: components['schemas']['OffsetPagination']['Page'] & unknown;
            };
            header?: never;
            path: {
                shareID: string;
                linkID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Links */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code: components['schemas']['ResponseCodeSuccess'];
                        /** @description Allow sorting of items in folder */
                        AllowSorting: boolean;
                        Links: components['schemas']['ExtendedLinkTransformer'][];
                    };
                };
            };
        };
    };
    'post_drive-shares-{shareID}-folders-{linkID}-trash_multiple': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
                linkID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['LinkIDsRequestDto'];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        Code?: 1001;
                        Responses?: components['schemas']['MultiDeleteTransformer'][];
                    };
                };
            };
        };
    };
    'put_drive-shares-{shareID}-folders-{linkID}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
                linkID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['UpdateFolderRequestDto'];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code: components['schemas']['ResponseCodeSuccess'];
                        Link: components['schemas']['ExtendedLinkTransformer'];
                    };
                };
            };
        };
    };
    'post_drive-v2-volumes-{volumeID}-folders': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CreateFolderRequestDto2'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CreateFolderResponseDto'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | {
                              /** @description Potential codes and their meaning:
                               *      - 2511: the link targeted is a photo link
                               *      - 200300: max folder size reached
                               *      - 200301: max folder depth reached
                               *      - 2500: file or folder with same name already exists
                               *      - 2501: parent folder was not found
                               *      */
                              Code?: number;
                          }
                        | components['schemas']['ConflictErrorResponseDto'];
                };
            };
        };
    };
    'get_drive-v2-volumes-{volumeID}-folders-{linkID}-children': {
        parameters: {
            query?: {
                /** @description Link ID use to indicate where to start the next page */
                AnchorID?: (string & components['schemas']['Id']) | null;
                /** @description Show folders only */
                FoldersOnly?: 0 | 1;
            };
            header?: never;
            path: {
                volumeID: string;
                linkID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ListChildrenResponseDto'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2032: sharing is temporarily disabled and the user is not the volume owner.
                         *      - 2011: The user does not have permission to access this folder.
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'post_drive-v2-volumes-{volumeID}-links-{linkID}-checkAvailableHashes': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
                linkID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CheckAvailableHashesRequestDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AvailableHashesResponseDto'];
                };
            };
        };
    };
    'post_drive-shares-{shareID}-links-{linkID}-checkAvailableHashes': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
                linkID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CheckAvailableHashesRequestDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AvailableHashesResponseDto'];
                };
            };
        };
    };
    'post_drive-volumes-{volumeID}-links-{linkID}-copy': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
                linkID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CopyLinkRequestDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CopyLinkResponseDto'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Potential codes and their meaning:
                         *      - 2011: Copying Proton Docs to another account is not possible yet.
                         *      - 2501: Volume not found
                         *      - 2501: File or folder not found
                         *      - 2501: parent folder was not found
                         *      - 200300: max folder size reached
                         *      - 2011: the user does not have permissions to create a file in this share
                         *      - 2000: the user cannot move or rename root folder
                         *      - 200002: Storage quota exceeded
                         *      - 200301: target parent exceeded max folder depth
                         *
                         * @enum {integer}
                         */
                        Code: 200300 | 2501 | 2011 | 2000 | 200002 | 200301;
                    };
                };
            };
        };
    };
    'post_drive-v2-volumes-{volumeID}-delete_multiple': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['LinkIDsRequestDto'];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        Code?: 1001;
                        Responses?: components['schemas']['MultiDeleteTransformer'][];
                    };
                };
            };
        };
    };
    'post_drive-shares-{shareID}-links-fetch_metadata': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['FetchLinksMetadataRequestDto'];
            };
        };
        responses: {
            /** @description Links */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code: components['schemas']['ResponseCodeSuccess'];
                        Links: components['schemas']['ExtendedLinkTransformer'][];
                        Parents: components['schemas']['ExtendedLinkTransformer'][];
                    };
                };
            };
        };
    };
    'post_drive-volumes-{volumeID}-links-fetch_metadata': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['FetchLinksMetadataRequestDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['FetchLinksMetadataResponseDto'];
                };
            };
        };
    };
    'get_drive-shares-{shareID}-links-{linkID}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
                linkID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Link */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code: components['schemas']['ResponseCodeSuccess'];
                        Link: components['schemas']['ExtendedLinkTransformer'];
                    };
                };
            };
        };
    };
    'get_drive-sanitization-mhk': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ListMissingHashKeyResponseDto'];
                };
            };
        };
    };
    'post_drive-sanitization-mhk': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['UpdateMissingHashKeyRequestDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
        };
    };
    'post_drive-v2-volumes-{volumeID}-links': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['LinkIDsRequestDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['LoadLinkDetailsResponseDto'];
                };
            };
        };
    };
    'put_drive-volumes-{volumeID}-links-move-multiple': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['MoveLinkBatchRequestDto'];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        Code?: 1001;
                        Responses?: {
                            /** @description Encrypted link ID */
                            LinkID?: string;
                            Response?: components['schemas']['ProtonSuccess'] | components['schemas']['ProtonError'];
                        }[];
                    };
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2501: The volume does not exist.
                         *      - 2511: cannot move favorite photos from a share
                         *      - 2000: All main photos have to be sent with related photos.
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'put_drive-shares-{shareID}-links-{linkID}-move': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
                linkID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['MoveLinkRequestDto'];
            };
        };
        responses: {
            200: components['responses']['ProtonSuccessResponse'];
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | {
                              /** @description Potential codes and their meaning:
                               *      - 200300: max folder size reached
                               *      - 200301: max folder depth reached
                               *      - 2500: file or folder with same name already exists
                               *      - 2511: cannot move favorite photos from a share
                               *      - 2501: parent folder was not found
                               *      */
                              Code?: number;
                              /** @description Error message */
                              Error?: string;
                          }
                        | components['schemas']['ConflictErrorResponseDto'];
                };
            };
        };
    };
    'put_drive-v2-volumes-{volumeID}-links-{linkID}-rename': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
                linkID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['RenameLinkRequestDto'];
            };
        };
        responses: {
            200: components['responses']['ProtonSuccessResponse'];
            /** @description Conflict, a file or folder with the new name already exists in the current folder. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ConflictErrorResponseDto'];
                };
            };
        };
    };
    'put_drive-shares-{shareID}-links-{linkID}-rename': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
                linkID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['RenameLinkRequestDto'];
            };
        };
        responses: {
            200: components['responses']['ProtonSuccessResponse'];
            /** @description Conflict, a file or folder with the new name already exists in the current folder. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ConflictErrorResponseDto'];
                };
            };
        };
    };
    'put_drive-v2-volumes-{volumeID}-links-{linkID}-move': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
                linkID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['MoveLinkRequestDto2'];
            };
        };
        responses: {
            200: components['responses']['ProtonSuccessResponse'];
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | {
                              /** @description Potential codes and their meaning:
                               *      - 200300: max folder size reached
                               *      - 200301: max folder depth reached
                               *      - 2500: file or folder with same name already exists
                               *      - 2511: cannot move favorite photos from a share
                               *      - 2501: parent folder was not found
                               *      */
                              Code?: number;
                              /** @description Error message */
                              Error?: string;
                          }
                        | components['schemas']['ConflictErrorResponseDto'];
                };
            };
        };
    };
    'get_drive-v2-volumes-{volumeID}-files-{linkID}-revisions-{revisionID}': {
        parameters: {
            query?: {
                /** @description Number of blocks */
                PageSize?: components['schemas']['GetRevisionQueryParameters']['PageSize'];
                /** @description Block index from which to fetch block list */
                FromBlockIndex?: components['schemas']['GetRevisionQueryParameters']['FromBlockIndex'];
                /** @description Do not generate download URLs for blocks */
                NoBlockUrls?: components['schemas']['GetRevisionQueryParameters']['NoBlockUrls'];
            };
            header?: never;
            path: {
                volumeID: string;
                linkID: string;
                revisionID: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Revision */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GetRevisionResponseDto2'];
                };
            };
        };
    };
    'put_drive-v2-volumes-{volumeID}-files-{linkID}-revisions-{revisionID}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
                linkID: string;
                revisionID: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CommitRevisionDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | {
                              /** @description Potential codes and their meaning:
                               *      - 200003: Max file size limited to 100 MB on your plan. Please upgrade.
                               *      */
                              Code: number;
                          }
                        | components['schemas']['ConflictErrorResponseDto'];
                };
            };
        };
    };
    'delete_drive-v2-volumes-{volumeID}-files-{linkID}-revisions-{revisionID}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
                linkID: string;
                revisionID: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | components['schemas']['ShareConflictErrorResponseDto']
                        | {
                              /** @description Potential codes and their meaning:
                               *      - 2501: the link (must be active or trashed) or revision does not exist in the volume
                               *      - 2011: the current user does not have permission to delete the revision
                               *      - 2511: if the revision is active - create or revert to another revision first
                               *      - 200700: if the link is a proton doc (revisions are not used for docs)
                               *      */
                              Code?: number;
                          };
                };
            };
        };
    };
    'get_drive-shares-{shareID}-files-{linkID}-revisions-{revisionID}': {
        parameters: {
            query?: {
                /** @description Number of blocks */
                PageSize?: components['schemas']['GetRevisionQueryParameters']['PageSize'];
                /** @description Block index from which to fetch block list */
                FromBlockIndex?: components['schemas']['GetRevisionQueryParameters']['FromBlockIndex'];
                /** @description Do not generate download URLs for blocks */
                NoBlockUrls?: components['schemas']['GetRevisionQueryParameters']['NoBlockUrls'];
            };
            header?: never;
            path: {
                shareID: string;
                linkID: string;
                revisionID: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Revision */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GetRevisionResponseDto2'];
                };
            };
        };
    };
    'put_drive-shares-{shareID}-files-{linkID}-revisions-{revisionID}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
                linkID: string;
                revisionID: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CommitRevisionDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | {
                              /** @description Potential codes and their meaning:
                               *      - 200003: Max file size limited to 100 MB on your plan. Please upgrade.
                               *      */
                              Code: number;
                          }
                        | components['schemas']['ConflictErrorResponseDto'];
                };
            };
        };
    };
    'delete_drive-shares-{shareID}-files-{linkID}-revisions-{revisionID}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
                linkID: string;
                revisionID: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | components['schemas']['ShareConflictErrorResponseDto']
                        | {
                              /** @description Potential codes and their meaning:
                               *      - 2501: the link (must be active or trashed) or revision does not exist in the volume
                               *      - 2011: the current user does not have permission to delete the revision
                               *      - 2511: if the revision is active - create or revert to another revision first
                               *      - 200700: if the link is a proton doc (revisions are not used for docs)
                               *      */
                              Code?: number;
                          };
                };
            };
        };
    };
    'post_drive-v2-volumes-{volumeID}-files': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CreateFileDto'];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code: components['schemas']['ResponseCodeSuccess'];
                        File: {
                            /** @description Encrypted link ID */
                            ID: string;
                            /** @description Encrypted revision ID. */
                            RevisionID: string;
                            ClientUID: string | null;
                        };
                    };
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | {
                              /** @description Potential codes and their meaning:
                               *      - 200300: max folder size reached
                               *      - 200301: max folder depth reached
                               *      - 2500: file or folder with same name already exists
                               *      - 2501: parent folder was not found
                               *      - 200003: Max file size limited to 100 MB on your plan. Please upgrade.
                               *      - 200701: A document type cannot create a revision
                               *      - 200901: Photos backup is disabled for your account. Please enable it in the settings.
                               *      */
                              Code: number;
                          }
                        | components['schemas']['ConflictErrorResponseDto'];
                };
            };
        };
    };
    'post_drive-shares-{shareID}-files': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CreateFileDto'];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code: components['schemas']['ResponseCodeSuccess'];
                        File: {
                            /** @description Encrypted link ID */
                            ID: string;
                            /** @description Encrypted revision ID. */
                            RevisionID: string;
                            ClientUID: string | null;
                        };
                    };
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | {
                              /** @description Potential codes and their meaning:
                               *      - 200300: max folder size reached
                               *      - 200301: max folder depth reached
                               *      - 2500: file or folder with same name already exists
                               *      - 2501: parent folder was not found
                               *      - 200003: Max file size limited to 100 MB on your plan. Please upgrade.
                               *      - 200701: A document type cannot create a revision
                               *      - 200901: Photos backup is disabled for your account. Please enable it in the settings.
                               *      */
                              Code: number;
                          }
                        | components['schemas']['ConflictErrorResponseDto'];
                };
            };
        };
    };
    'get_drive-v2-volumes-{volumeID}-files-{linkID}-revisions': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
                linkID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ListRevisionsResponseDto'];
                };
            };
        };
    };
    'post_drive-v2-volumes-{volumeID}-files-{linkID}-revisions': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
                linkID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CreateRevisionRequestDto'];
            };
        };
        responses: {
            /** @description Revision */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code: components['schemas']['ResponseCodeSuccess'];
                        Revision: {
                            /** @description Revision ID */
                            ID: string;
                        };
                    };
                };
            };
            /** @description Conflict, the submitted revision is no longer up to date or another draft is open. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | components['schemas']['ConflictErrorResponseDto']
                        | components['schemas']['ProtonError'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | {
                              /** @description Potential codes and their meaning:
                               *      - 200003: Max file size limited to 100 MB on your plan. Please upgrade.
                               *      - 200700: A document type cannot create a revision
                               *      */
                              Code: number;
                          }
                        | components['schemas']['ConflictErrorResponseDto'];
                };
            };
        };
    };
    'get_drive-shares-{shareID}-files-{linkID}-revisions': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
                linkID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ListRevisionsResponseDto'];
                };
            };
        };
    };
    'post_drive-shares-{shareID}-files-{linkID}-revisions': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
                linkID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CreateRevisionRequestDto'];
            };
        };
        responses: {
            /** @description Revision */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code: components['schemas']['ResponseCodeSuccess'];
                        Revision: {
                            /** @description Revision ID */
                            ID: string;
                        };
                    };
                };
            };
            /** @description Conflict, the submitted revision is no longer up to date or another draft is open. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | components['schemas']['ConflictErrorResponseDto']
                        | components['schemas']['ProtonError'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | {
                              /** @description Potential codes and their meaning:
                               *      - 200003: Max file size limited to 100 MB on your plan. Please upgrade.
                               *      - 200700: A document type cannot create a revision
                               *      */
                              Code: number;
                          }
                        | components['schemas']['ConflictErrorResponseDto'];
                };
            };
        };
    };
    'get_drive-shares-{shareID}-files-{linkID}-revisions-{revisionID}-thumbnail': {
        parameters: {
            query?: {
                /** @description Type of Thumbnail to fetch */
                Type?: 1 | 2 | 3;
            };
            header?: never;
            path: {
                shareID: string;
                linkID: string;
                revisionID: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code: components['schemas']['ResponseCodeSuccess'];
                        /** @description Thumbnail download link */
                        ThumbnailLink: string;
                        /**
                         * @deprecated
                         * @description Bare Thumbnail download link
                         */
                        ThumbnailBareURL?: string;
                        /** @description Thumbnail download token */
                        ThumbnailToken: string;
                    };
                };
            };
        };
    };
    'post_drive-v2-volumes-{volumeID}-files-{linkID}-revisions-{revisionID}-restore': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
                linkID: string;
                revisionID: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Revision restore queued for async processing */
            202: {
                headers: {
                    'x-pm-code': 1002;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['RestoreRevisionAcceptedResponse'];
                };
            };
            422: components['responses']['ProtonErrorResponse'];
        };
    };
    'post_drive-shares-{shareID}-files-{linkID}-revisions-{revisionID}-restore': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
                linkID: string;
                revisionID: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Revision restore queued for async processing */
            202: {
                headers: {
                    'x-pm-code': 1002;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['RestoreRevisionAcceptedResponse'];
                };
            };
            422: components['responses']['ProtonErrorResponse'];
        };
    };
    'get_drive-v2-volumes-{volumeID}-links-{linkID}-revisions-{revisionID}-verification': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
                linkID: string;
                revisionID: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['VerificationData'];
                };
            };
        };
    };
    'get_drive-shares-{shareID}-links-{linkID}-revisions-{revisionID}-verification': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
                linkID: string;
                revisionID: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['VerificationData'];
                };
            };
        };
    };
    'post_drive-v2-volumes-{volumeID}-trash-delete_multiple': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['LinkIDsRequestDto'];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        Code?: 1001;
                        Responses?: components['schemas']['MultiDeleteTransformer'][];
                    };
                };
            };
        };
    };
    'post_drive-shares-{shareID}-trash-delete_multiple': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['LinkIDsRequestDto'];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        Code?: 1001;
                        Responses?: components['schemas']['MultiDeleteTransformer'][];
                    };
                };
            };
        };
    };
    'get_drive-shares-{shareID}-trash': {
        parameters: {
            query?: {
                /**
                 * @deprecated
                 * @description Get thumbnail download URLs
                 */
                Thumbnails?: 0 | 1;
                PageSize?: components['schemas']['OffsetPagination']['PageSize'] & unknown;
                Page?: components['schemas']['OffsetPagination']['Page'] & unknown;
            };
            header?: never;
            path: {
                shareID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code: components['schemas']['ResponseCodeSuccess'];
                        Links: components['schemas']['ExtendedLinkTransformer'][];
                        /** @description Dictionary of ancestors of trashed links. */
                        Parents: {
                            [key: string]: components['schemas']['ExtendedLinkTransformer'];
                        };
                    };
                };
            };
        };
    };
    'delete_drive-shares-{shareID}-trash': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
            /** @description Empty trash queued for async processing */
            202: {
                headers: {
                    'x-pm-code': 1002;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['EmptyTrashAcceptedResponse'];
                };
            };
        };
    };
    'get_drive-volumes-{volumeID}-trash': {
        parameters: {
            query?: {
                PageSize?: components['schemas']['OffsetPagination']['PageSize'] & unknown;
                Page?: components['schemas']['OffsetPagination']['Page'] & unknown;
            };
            header?: never;
            path: {
                volumeID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['VolumeTrashList'];
                };
            };
        };
    };
    'delete_drive-volumes-{volumeID}-trash': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
            /** @description Empty trash queued for async processing */
            202: {
                headers: {
                    'x-pm-code': 1002;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['EmptyTrashAcceptedResponse'];
                };
            };
        };
    };
    'put_drive-v2-volumes-{volumeID}-trash-restore_multiple': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['LinkIDsRequestDto'];
            };
        };
        responses: {
            /** @description Responses */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        Code?: 1001;
                        Responses?: {
                            /** @description Encrypted link ID */
                            LinkID?: string;
                            Response?: {
                                Code?: components['schemas']['ResponseCodeSuccess'];
                            };
                        }[];
                    };
                };
            };
        };
    };
    'put_drive-shares-{shareID}-trash-restore_multiple': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['LinkIDsRequestDto'];
            };
        };
        responses: {
            /** @description Responses */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        Code?: 1001;
                        Responses?: {
                            /** @description Encrypted link ID */
                            LinkID?: string;
                            Response?: {
                                Code?: components['schemas']['ResponseCodeSuccess'];
                            };
                        }[];
                    };
                };
            };
        };
    };
    'post_drive-v2-volumes-{volumeID}-trash_multiple': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['LinkIDsRequestDto'];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        Code?: 1001;
                        Responses?: components['schemas']['MultiDeleteTransformer'][];
                    };
                };
            };
        };
    };
    'post_drive-blocks': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['RequestUploadInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['RequestUploadResponse'];
                };
            };
        };
    };
    'post_drive-v2-volumes-{volumeID}-files-small': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example POST /drive/v2/volumes/{volumeID}/files/small
                 *     Content-Type: multipart/form-data; boundary=[SOME_BOUNDARY]
                 *     Content-Length: [ACTUAL_CONTENT_LENGTH]
                 *
                 *     --[SOME_BOUNDARY]
                 *     Content-Type: application/json
                 *     Content-Disposition: form-data; name="Metadata"
                 *
                 *     {
                 *       "Name": "string",
                 *       "NameHash": "string",
                 *       "ParentLinkID": "string",
                 *       "MIMEType": "string",
                 *       // ... remaining metadata, see SmallFileUploadMetadataRequestDto schema
                 *     }
                 *
                 *     --[SOME_BOUNDARY]
                 *     Content-Type: application/octet-stream
                 *     Content-Disposition: form-data; name="ContentBlock"
                 *
                 *     <encrypted binary data>
                 *     --[SOME_BOUNDARY]
                 *     Content-Type: application/octet-stream
                 *     Content-Disposition: form-data; name="ThumbnailBlockType_1"
                 *
                 *     <encrypted binary data>
                 *     --[SOME_BOUNDARY]--
                 *     Content-Type: application/octet-stream
                 *     Content-Disposition: form-data; name="ThumbnailBlockType_2"
                 *
                 *     <encrypted binary data>
                 *     --[SOME_BOUNDARY]-- */
                'multipart/form-data': {
                    Metadata: components['schemas']['SmallFileUploadMetadataRequestDto'];
                    /**
                     * Format: binary
                     * @description The encrypted binary data of the file content. This is optional as 0-byte files do not have a block.
                     */
                    ContentBlock?: string;
                    /**
                     * Format: binary
                     * @description The encrypted binary data for the Preview thumbnail. This is optional.
                     */
                    ThumbnailBlockType_1?: string;
                    /**
                     * Format: binary
                     * @description The encrypted binary data for the HDPreview thumbnail. This is optional.
                     */
                    ThumbnailBlockType_2?: string;
                    /**
                     * Format: binary
                     * @description The encrypted binary data for the MachineLearning thumbnail. This is optional.
                     */
                    ThumbnailBlockType_3?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SmallUploadResponseDto'];
                };
            };
            /** @description Bad request, the metadata does not pass validation. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ProtonError'];
                };
            };
            /** @description Conflict, there is a name hash collision with another link in the same folder. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ConflictErrorResponseDto'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2501: The parent link does not exist or is trashed
                         *      - 2011: The user does not have write permission on the link
                         *      - 200003: Max file size limited to 100 MB on your plan. Please upgrade.
                         *      - 200002: Storage quota exceeded
                         *      - 2001: PGP data is not correct
                         *      - 200701: A document type cannot create a revision
                         *      - 2511: A photo link is missing photo metadata
                         *      - 200300: max folder size reached
                         *      - 200901: Photos backup is disabled for your account. Please enable it in the settings.
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'post_drive-v2-volumes-{volumeID}-files-{linkID}-revisions-small': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
                linkID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example POST /drive/v2/volumes/{volumeID}/files/{linkID}/revisions/small
                 *     Content-Type: multipart/form-data; boundary=[SOME_BOUNDARY]
                 *     Content-Length: [ACTUAL_CONTENT_LENGTH]
                 *
                 *     --[SOME_BOUNDARY]
                 *     Content-Type: application/json
                 *     Content-Disposition: form-data; name="Metadata"
                 *
                 *     {
                 *       "CurrentRevisionID": string,
                 *       "SignatureEmail": "string",
                 *       "ManifestSignature": "string",
                 *       "BlockEncSignature": "string",
                 *       // ... remaining metadata, see SmallRevisionUploadMetadataRequestDto schema
                 *     }
                 *
                 *     --[SOME_BOUNDARY]
                 *     Content-Type: application/octet-stream
                 *     Content-Disposition: form-data; name="ContentBlock"
                 *
                 *     <encrypted binary data>
                 *     --[SOME_BOUNDARY]
                 *     Content-Type: application/octet-stream
                 *     Content-Disposition: form-data; name="ThumbnailBlockType_1"
                 *
                 *     <encrypted binary data>
                 *     --[SOME_BOUNDARY]--
                 *     Content-Type: application/octet-stream
                 *     Content-Disposition: form-data; name="ThumbnailBlockType_2"
                 *
                 *     <encrypted binary data>
                 *     --[SOME_BOUNDARY]-- */
                'multipart/form-data': {
                    Metadata: components['schemas']['SmallRevisionUploadMetadataRequestDto'];
                    /**
                     * Format: binary
                     * @description The encrypted binary data of the file content. This is optional as 0-byte files do not have a block.
                     */
                    ContentBlock?: string;
                    /**
                     * Format: binary
                     * @description The encrypted binary data for the Preview thumbnail. This is optional.
                     */
                    ThumbnailBlockType_1?: string;
                    /**
                     * Format: binary
                     * @description The encrypted binary data for the HDPreview thumbnail. This is optional.
                     */
                    ThumbnailBlockType_2?: string;
                    /**
                     * Format: binary
                     * @description The encrypted binary data for the MachineLearning thumbnail. This is optional.
                     */
                    ThumbnailBlockType_3?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SmallUploadResponseDto'];
                };
            };
            /** @description Bad request, the metadata does not pass validation. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ProtonError'];
                };
            };
            /** @description Conflict, the passed CurrentRevisionID is no longer up to date. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ProtonError'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2501: The link does not exist or is trashed
                         *      - 2011: The user does not have write permission on the link
                         *      - 200003: Max file size limited to 100 MB on your plan. Please upgrade.
                         *      - 200002: Storage quota exceeded
                         *      - 2001: PGP data is not correct
                         *      - 200700: A document type cannot create a revision
                         *      - 2511: A photo link cannot have multiple revisions
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'get_drive-me-active': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Active User */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /** @enum {boolean} */
                        Active?: true;
                    };
                };
            };
        };
    };
    'post_drive-report-url': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['AbuseReportDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
        };
    };
    'get_drive-v2-checklist-get-started': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ChecklistResponseDto'];
                };
            };
        };
    };
    'get_drive-v2-onboarding': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['OnboardingResponseDto'];
                };
            };
        };
    };
    'post_drive-v2-checklist-get-started-seen-completed-list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
        };
    };
    'get_drive-entitlements': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GetEntitlementResponseDto'];
                };
            };
        };
    };
    'post_drive-photos-volumes-{volumeID}-links-{linkID}-tags': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
                linkID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['AddTagsRequestDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2501: The link or volume does not exist.
                         *      - 2500: One of the tags is already assigned to the photo.
                         *      - 2011: Only the owner can assign tags to photos.
                         *      - 2000: Cannot assign favorite tag on this endpoint. Please use a dedicated favouring photos endpoint.
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'delete_drive-photos-volumes-{volumeID}-links-{linkID}-tags': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
                linkID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['RemoveTagsRequestDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2501: The link or volume does not exist.
                         *      - 2011: Only the owner can assign tags to photos.
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'post_drive-volumes-{volumeID}-photos-share': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid request; update app */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'delete_drive-volumes-{volumeID}-photos-share-{shareID}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
                shareID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
            422: components['responses']['ProtonErrorResponse'];
        };
    };
    'post_drive-photos-volumes-{volumeID}-links-{linkID}-favorite': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
                linkID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['FavoritePhotoRequestDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['FavoritePhotoResponseDto'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2501: The link or volume does not exist.
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'post_drive-volumes-{volumeID}-photos-duplicates': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['FindDuplicatesInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['FindDuplicatesOutputCollection'];
                };
            };
        };
    };
    'get_drive-photos-migrate-legacy': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GetMigrationStatusResponseDto'];
                };
            };
            /** @description Accepted */
            202: {
                headers: {
                    'x-pm-code': 1002;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AcceptedResponse'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2501: The link or volume does not exist.
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'post_drive-photos-migrate-legacy': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['MigrateFromLegacyRequest'];
            };
        };
        responses: {
            /** @description Accepted */
            202: {
                headers: {
                    'x-pm-code': 1002;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AcceptedResponse'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2500: Migration in progress
                         *      - 2501: Share not found
                         *      - 2501: Volume not found
                         *      - 2501: Address not found
                         *      */
                        Code: number;
                    };
                };
            };
            /** @description Failed dependency */
            424: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Potential codes:
                         *      - 2032
                         *
                         * @enum {integer}
                         */
                        Code: 2032;
                    };
                };
            };
        };
    };
    'get_drive-volumes-{volumeID}-photos': {
        parameters: {
            query?: {
                Desc?: components['schemas']['ListPhotosParameters']['Desc'];
                PageSize?: components['schemas']['ListPhotosParameters']['PageSize'];
                /** @description The link ID of the last photo from the previous page when requesting secondary pages */
                PreviousPageLastLinkID?: components['schemas']['ListPhotosParameters']['PreviousPageLastLinkID'];
                /** @description The minimum capture time of photos as UNIX timestamp (to filter out older photos) */
                MinimumCaptureTime?: components['schemas']['ListPhotosParameters']['MinimumCaptureTime'];
                Tag?: components['schemas']['ListPhotosParameters']['Tag'];
            };
            header?: never;
            path: {
                volumeID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PhotoListingResponse'];
                };
            };
        };
    };
    'put_drive-photos-volumes-{volumeID}-links-{linkID}-revisions-{revisionID}-xattr': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
                linkID: string;
                revisionID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['UpdateXAttrRequest'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2001: Wrong signature email passed
                         *      - 2001: Invalid PGP message
                         *      - 200501: Invalid Key Packet
                         *      */
                        Code: number;
                    };
                };
            };
            /** @description Failed dependency */
            424: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Potential codes:
                         *      - 2032
                         *
                         * @enum {integer}
                         */
                        Code: 2032;
                    };
                };
            };
        };
    };
    'post_drive-urls-{token}-files-{linkID}-checkAvailableHashes': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
                linkID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CheckAvailableHashesRequestDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['AvailableHashesResponseDto'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2011: The current ShareURL does not have read+write permissions
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'put_drive-urls-{token}-files-{linkID}-revisions-{revisionID}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
                linkID: string;
                revisionID: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CommitAnonymousRevisionDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | {
                              /** @description Potential codes and their meaning:
                               *      - 2011: The current ShareURL does not have read+write permissions.
                               *      - 200003: Max file size limited to 100 MB on your plan. Please upgrade.
                               *      */
                              Code: number;
                          }
                        | components['schemas']['ConflictErrorResponseDto'];
                };
            };
        };
    };
    'delete_drive-urls-{token}-files-{linkID}-revisions-{revisionID}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
                linkID: string;
                revisionID: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | components['schemas']['ShareConflictErrorResponseDto']
                        | {
                              /** @description Potential codes and their meaning:
                               *      - 2501: the link (must be active or trashed) or revision does not exist in the volume
                               *      - 2511: if the revision not in draft
                               *      - 200700: if the link is a proton doc (revisions are not used for docs)
                               *      */
                              Code?: number;
                          };
                };
            };
        };
    };
    'post_drive-urls-{token}-documents': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CreateAnonymousDocumentDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CreateAnonymousDocumentResponseDto'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | {
                              /**
                               * @description Potential codes and their meaning:
                               *      - 200300: max folder size reached
                               *      - 2500: file or folder with same name already exists
                               *      - 2501: parent folder was not found
                               *      - 2011: The current ShareURL does not have read+write permissions
                               *
                               * @enum {integer}
                               */
                              Code: 200300 | 2500 | 2501 | 2011;
                          }
                        | components['schemas']['ConflictErrorResponseDto'];
                };
            };
            /** @description Failed dependency */
            424: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Potential codes and their meaning:
                         *      - 2032: Blocked due to feature being disabled, clients are encouraged to refetch feature flags
                         *
                         * @enum {integer}
                         */
                        Code: 2032;
                    };
                };
            };
        };
    };
    'post_drive-urls-{token}-files': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CreateAnonymousFileRequestDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CreateAnonymousFileResponseDto'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | {
                              /** @description Potential codes and their meaning:
                               *      - 200300: max folder size reached
                               *      - 200301: max folder depth reached
                               *      - 2500: file or folder with same name already exists
                               *      - 2501: parent folder was not found
                               *      - 2011: The current ShareURL does not have read+write permissions
                               *      - 200003: Max file size limited to 100 MB on your plan. Please upgrade.
                               *      - 200701: A document type cannot create a revision
                               *      - 200901: Photos backup is disabled for your account. Please enable it in the settings.
                               *      */
                              Code: number;
                          }
                        | components['schemas']['ConflictErrorResponseDto'];
                };
            };
        };
    };
    'post_drive-urls-{token}-folders': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CreateAnonymousFolderRequestDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CreateAnonymousFolderResponseDto'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 200300: max folder size reached
                         *      - 200301: max folder depth reached
                         *      - 2500: file or folder with same name already exists
                         *      - 2501: parent folder was not found
                         *      - 2011: The current ShareURL does not have read+write permissions
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'post_drive-urls-{token}-folders-{linkID}-delete_multiple': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
                linkID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['DeleteChildrenRequestDto'];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        Code?: 1001;
                        Responses?: components['schemas']['MultiDeleteTransformer'][];
                    };
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2011: The current ShareURL does not have read+write permissions
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'post_drive-urls-{token}-links-fetch_metadata': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ShareURL Token */
                token: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['LinkIDsRequestDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['FetchLinksMetadataResponseDto'];
                };
            };
            /** @description Unprocessable entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2501: This file was not found, token invalid. */
                        Code: number;
                    };
                };
            };
        };
    };
    'get_drive-urls-{token}-links-{linkID}-path': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
                linkID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ParentEncryptedLinkIDsResponseDto'];
                };
            };
            /** @description Unprocessable entity */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2061: Invalid ID. */
                        Code: number;
                    };
                };
            };
        };
    };
    'put_drive-urls-{token}-links-{linkID}-rename': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
                linkID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['RenameAnonymousLinkRequestDto'];
            };
        };
        responses: {
            200: components['responses']['ProtonSuccessResponse'];
            /** @description Conflict, a file or folder with the new name already exists in the current folder. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ConflictErrorResponseDto'];
                };
            };
        };
    };
    'post_drive-urls-{token}-blocks': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['RequestAnonymousUploadRequestDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['RequestUploadResponse'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2011: The current ShareURL does not have read+write permissions
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'get_drive-urls-{token}-links-{linkID}-revisions-{revisionID}-verification': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
                linkID: string;
                revisionID: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['VerificationData'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2011: The current ShareURL does not have read+write permissions
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'get_drive-volumes-{volumeID}-urls': {
        parameters: {
            query?: {
                PageSize?: components['schemas']['OffsetPagination']['PageSize'] & unknown;
                Page?: components['schemas']['OffsetPagination']['Page'] & unknown;
            };
            header?: never;
            path: {
                volumeID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ShareURLContextsCollection'];
                };
            };
        };
    };
    'get_drive-shares-{shareID}-map': {
        parameters: {
            query?: {
                SessionName?: components['schemas']['LinkMapQueryParameters']['SessionName'];
                LastIndex?: components['schemas']['LinkMapQueryParameters']['LastIndex'];
                PageSize?: components['schemas']['LinkMapQueryParameters']['PageSize'];
            };
            header?: never;
            path: {
                shareID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['LinkMapResponse'];
                };
            };
        };
    };
    'get_drive-v2-shares-my-files': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['MyFilesResponseDto'];
                };
            };
        };
    };
    'get_drive-shares-{shareID}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['BootstrapShareResponseDto'];
                };
            };
        };
    };
    'delete_drive-shares-{shareID}': {
        parameters: {
            query?: {
                /** @description Forces the deletion of the share along with attached members and urls */
                Force?: 0 | 1;
            };
            header?: never;
            path: {
                shareID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2011: the current user does not have admin permission on this share
                         *      - 2005: the share still has members, a public URL or invitations attached and Force=1 has not been used */
                        Code: number;
                    };
                };
            };
        };
    };
    'get_drive-volumes-{volumeID}-links-{linkID}-context': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
                linkID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GetHighestContextForDocumentResponse'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description 2501: Requested data does not exist or you do not have permission to access it
                         *
                         * @enum {integer}
                         */
                        Code: 2501;
                    };
                };
            };
        };
    };
    'get_drive-shares': {
        parameters: {
            query?: {
                /** @description Encrypted AddressID */
                AddressID?: string;
                /** @description Show disabled shares as well, i.e. Shares where the ShareMemberShip for the user is non-active (locked), otherwise only return with active Membership */
                ShowAll?: 0 | 1;
                /** @description Filter on Share Type */
                ShareType?: 1 | 2 | 3 | 4;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ListSharesResponseDto'];
                };
            };
        };
    };
    'post_drive-shares-{shareID}-owner': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['TransferInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
        };
    };
    'post_drive-migrations-shareaccesswithnode': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['MigrateSharesRequestDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['MigrateSharesResponseDto'];
                };
            };
        };
    };
    'get_drive-migrations-shareaccesswithnode-unmigrated': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['UnmigratedSharesResponseDto'];
                };
            };
        };
    };
    'get_drive-urls-{token}-info': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ShareURL Token */
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InitSRPSessionResponseDto'];
                };
            };
            422: components['responses']['ProtonErrorResponse'];
        };
    };
    'post_drive-urls-{token}-auth': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ShareURL Token */
                token: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['AuthShareTokenRequestDto'];
            };
        };
        responses: {
            /** @description Share URL */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code: components['schemas']['ResponseCodeSuccess'];
                        /** @description Session UID */
                        UID: string;
                        /** @description Session Access token (present if new session) */
                        AccessToken?: string;
                        /** @description Duration of the session in seconds (present if new session) */
                        ExpiresIn?: number;
                        /**
                         * @description Type of token (present if new session)
                         * @example bearer
                         */
                        TokenType?: string;
                        /**
                         * @description SRP server proof, base64 encoded.
                         * @example 00o4YSsW/Z7a0+ak
                         */
                        ServerProof: string;
                    };
                };
            };
            422: components['responses']['ProtonErrorResponse'];
        };
    };
    'get_drive-urls-{token}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['BootstrapShareTokenResponseDto'];
                };
            };
            422: components['responses']['ProtonErrorResponse'];
        };
    };
    'get_drive-urls-{token}-folders-{linkID}-children': {
        parameters: {
            query?: {
                /** @description Field to sort by */
                Sort?: 'MIMEType' | 'Size' | 'ModifyTime' | 'CreateTime' | 'Type';
                /** @description Sort order */
                Desc?: 0 | 1;
                /** @description Show all files including those in non-active (drafts) state. */
                ShowAll?: 0 | 1;
                /** @description Show folders only */
                FoldersOnly?: 0 | 1;
                /**
                 * @deprecated
                 * @description Get thumbnail download URLs
                 */
                Thumbnails?: 0 | 1;
                PageSize?: components['schemas']['OffsetPagination']['PageSize'] & unknown;
                Page?: components['schemas']['OffsetPagination']['Page'] & unknown;
            };
            header?: never;
            path: {
                token: string;
                linkID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Links */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code: components['schemas']['ResponseCodeSuccess'];
                        Links: components['schemas']['ExtendedLinkTransformer'][];
                    };
                };
            };
            422: components['responses']['ProtonErrorResponse'];
        };
    };
    'get_drive-urls-{token}-files-{linkID}': {
        parameters: {
            query?: {
                /** @description Number of blocks */
                PageSize?: components['schemas']['GetRevisionQueryParameters']['PageSize'];
                /** @description Block index from which to fetch block list */
                FromBlockIndex?: components['schemas']['GetRevisionQueryParameters']['FromBlockIndex'];
                /** @description Do not generate download URLs for blocks */
                NoBlockUrls?: components['schemas']['GetRevisionQueryParameters']['NoBlockUrls'];
            };
            header?: never;
            path: {
                token: string;
                linkID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GetRevisionResponseDto'];
                };
            };
            422: components['responses']['ProtonErrorResponse'];
        };
    };
    'post_drive-urls-{token}-file': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ShareURL Token */
                token: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['GetSharedFileInfoRequestDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GetSharedFileInfoResponseDto'];
                };
            };
            422: components['responses']['ProtonErrorResponse'];
        };
    };
    'get_drive-shares-{shareID}-urls': {
        parameters: {
            query?: {
                /** @description By default, only shareURL pointing to the share are returned. With Recursive=1, list all shareURLs in the subtree reachable from the Share. 1 (true) or 0 (false). */
                Recursive?: 0 | 1;
                /** @description Fetch Thumbnail URLs */
                Thumbnails?: 0 | 1;
                PageSize?: components['schemas']['OffsetPagination']['PageSize'] & unknown;
                Page?: components['schemas']['OffsetPagination']['Page'] & unknown;
            };
            header?: never;
            path: {
                shareID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ListShareURLsResponseDto'];
                };
            };
        };
    };
    'post_drive-shares-{shareID}-urls': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CreateShareURLRequestDto'];
            };
        };
        responses: {
            /** @description Share URL created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code: components['schemas']['ResponseCodeSuccess'];
                        ShareURL: components['schemas']['ShareURLResponseDto'];
                    };
                };
            };
        };
    };
    'put_drive-shares-{shareID}-urls-{urlID}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
                urlID: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['UpdateShareURLRequestDto'];
            };
        };
        responses: {
            /** @description Share URL updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code: components['schemas']['ResponseCodeSuccess'];
                        ShareURL: components['schemas']['ShareURLResponseDto'];
                    };
                };
            };
            422: components['responses']['ProtonErrorResponse'];
        };
    };
    'delete_drive-shares-{shareID}-urls-{urlID}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
                urlID: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
        };
    };
    'post_drive-shares-{shareID}-urls-delete_multiple': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['DeleteMultipleShareURLsRequestDto'];
            };
        };
        responses: {
            /** @description Responses */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        Code?: 1001;
                        Responses?: {
                            ShareURLID: string;
                            Response: {
                                /** @enum {integer} */
                                Code: 1000 | 2501;
                                Error?: string;
                            };
                        }[];
                    };
                };
            };
        };
    };
    'post_drive-volumes-{volumeID}-shares': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CreateShareRequestDto'];
            };
        };
        responses: {
            /** @description Share */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code: components['schemas']['ResponseCodeSuccess'];
                        Share: {
                            /** @description Share ID */
                            ID: string;
                        };
                    };
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | components['schemas']['ShareConflictErrorResponseDto']
                        | {
                              /** @description Potential codes and their meaning:
                               *      - 2501: the link does not exist in the volume
                               *      - 2011: the current user does not have admin permission on this share
                               *      - 2001: the PGP message is not correct
                               *      - 200601: The user has too many shares already.
                               *      */
                              Code?: number;
                          };
                };
            };
        };
    };
    'get_drive-v2-volumes-{volumeID}-shares': {
        parameters: {
            query?: {
                AnchorID?: components['schemas']['Id'] | null;
            };
            header?: never;
            path: {
                volumeID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SharedByMeResponseDto'];
                };
            };
        };
    };
    'get_drive-v2-sharedwithme': {
        parameters: {
            query?: {
                AnchorID?: components['schemas']['Id'] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SharedWithMeResponseDto2'];
                };
            };
        };
    };
    'put_drive-v2-shares-{shareID}-external-invitations-{invitationID}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
                invitationID: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['UpdateExternalInvitationRequestDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2501: the invitation does not exist, is not pending or accepted
                         *      - 2011: the current user does not have admin permission on this share
                         *      - 2026: trying to grant permissions you do not have to a new member
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'delete_drive-v2-shares-{shareID}-external-invitations-{invitationID}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
                invitationID: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2501: the external invitation does not exist, is not pending or accepted
                         *      - 2011: the current user does not have admin permission on this share
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'get_drive-v2-shares-{shareID}-external-invitations': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ListShareExternalInvitationsResponseDto'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2501: the share does not exist
                         *      - 2011: the current user does not have admin permission on this share */
                        Code: number;
                    };
                };
            };
        };
    };
    'post_drive-v2-shares-{shareID}-external-invitations': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['InviteExternalUserRequestDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InviteExternalUserResponseDto'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2011: the current user does not have admin permission on this share
                         *      - 2500: an external invitation for this user on this share already exists
                         *      - 2026: trying to grant permissions you do not have to a new member
                         *      - 2001: the inviter address does not belong to a Proton account or does not belong to the current user
                         *      - 200502: external invitation signature is invalid
                         *      - 200600: maximum number of invitations and members reached for current share
                         *      - 2008: inviter email is not the same as the one from the context share */
                        Code: number;
                    };
                };
            };
        };
    };
    'get_drive-v2-shares-external-invitations': {
        parameters: {
            query?: {
                AnchorID?: components['schemas']['Id'] | null;
                PageSize?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ListUserRegisteredExternalInvitationResponseDto'];
                };
            };
        };
    };
    'post_drive-v2-shares-{shareID}-external-invitations-{invitationID}-sendemail': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
                invitationID: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2501: the external invitation does not exist, is not pending or rejected
                         *      - 2011: the current user does not have admin permission on this share
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'post_drive-v2-shares-invitations-{invitationID}-accept': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invitationID: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['AcceptInvitationRequestDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2501: the share or the invitation was not found or was not pending
                         *      - 2011: the invitee email doesn't belong to the current user
                         *      - 2032: sharing is temporarily disabled.
                         *      - 200602: The user has joined too many shares already.
                         *      - 200201: the user is already member of a share in this volume with another address
                         *      - 200502: session key signature is invalid
                         *      - 2000: the address or address key couldn't be found to the invitee email address and user
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'put_drive-v2-shares-{shareID}-invitations-{invitationID}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
                invitationID: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['UpdateInvitationRequestDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2501: the invitation does not exist, is not pending or rejected
                         *      - 2011: the current user does not have admin permission on this share
                         *      - 2026: trying to grant permissions you do not have to a new member
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'delete_drive-v2-shares-{shareID}-invitations-{invitationID}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
                invitationID: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2501: the invitation does not exist, is not pending or rejected
                         *      - 2011: the current user does not have admin permission on this share
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'get_drive-v2-shares-{shareID}-invitations': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ListShareInvitationsResponseDto'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2501: the share does not exist
                         *      - 2011: the current user does not have admin permission on this share */
                        Code: number;
                    };
                };
            };
        };
    };
    'post_drive-v2-shares-{shareID}-invitations': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['InviteUserRequestDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InviteUserResponseDto'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2501: the external invitation does not exists or is still pending
                         *      - 2011: the current user does not have admin permission on this share
                         *      - 2500: an invitation for this user on this share already exists
                         *      - 2001: invitee email doesn't belong to a Proton account or you try to invite yourself
                         *      - 2008: inviter email is not the same as the one from the context share
                         *      - 2032: sharing is temporarily disabled.
                         *      - 2026: trying to grant permissions you do not have to a new member
                         *      - 200501: key packet is invalid
                         *      - 200502: key packet signature is invalid
                         *      - 200600: maximum number of invitations and members reached for current share
                         *      - 200202: Sharing with groups is not available yet.
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'get_drive-v2-shares-invitations': {
        parameters: {
            query?: {
                AnchorID?: components['schemas']['ListPendingInvitationQueryParameters']['AnchorID'];
                PageSize?: components['schemas']['ListPendingInvitationQueryParameters']['PageSize'];
                ShareTargetTypes?: components['schemas']['ListPendingInvitationQueryParameters']['ShareTargetTypes'];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ListPendingInvitationResponseDto'];
                };
            };
        };
    };
    'post_drive-v2-shares-invitations-{invitationID}-reject': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invitationID: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2501: the invitation does not exist or is not pending
                         *      - 2011: the invitee email doesn't belong to the current user
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'post_drive-v2-shares-{shareID}-invitations-{invitationID}-sendemail': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
                invitationID: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2501: the invitation does not exist, is not pending or rejected
                         *      - 2011: the current user does not have admin permission on this share
                         *      - 2032: sharing is temporarily disabled.
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'get_drive-v2-shares-invitations-{invitationID}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invitationID: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PendingInvitationResponseDto'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2501: the invitation does not exist or is not pending, or the link/share/volume for it is gone
                         *      - 2011: the invitee email doesn't belong to the current user
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'get_drive-v2-user-link-access': {
        parameters: {
            query?: {
                LinkID?: components['schemas']['Id'];
                VolumeID?: components['schemas']['Id'] | null;
                ShareID?: components['schemas']['Id'] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['LinkAccessesResponseDto'];
                };
            };
        };
    };
    'get_drive-v2-shares-{shareID}-members': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ListShareMembersResponseDto'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2501: the share does not exist
                         *      - 2011: the current user does not have admin permission on this share */
                        Code: number;
                    };
                };
            };
        };
    };
    'put_drive-v2-shares-{shareID}-members-{memberID}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
                memberID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['UpdateShareMemberRequestDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2501: the member does not exist or is removed.
                         *      - 2011: the current user does not have admin permission on this share
                         *      - 2026: trying to grant permissions you do not have to a member
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'delete_drive-v2-shares-{shareID}-members-{memberID}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
                memberID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2011: the user does not have enough permission to remove another member
                         *      - 2501: the user is not a member of the share
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'post_drive-v2-shares-{shareID}-security': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                shareID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['SecurityRequestDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SecurityResponseDto'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 2011: the current user does not have read permission on this share */
                        Code: number;
                    };
                };
            };
        };
    };
    'post_drive-urls-{token}-security': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['SecurityRequestDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SecurityResponseDto'];
                };
            };
            /** @description Code 2028 if feature is disabled, rate-limited or blocked because of abuse. Code 9001 for HV captcha. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ProtonError'];
                };
            };
        };
    };
    'post_drive-volumes-{volumeID}-thumbnails': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['ThumbnailIDsListInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ListThumbnailsResponse'];
                };
            };
        };
    };
    'get_drive-me-settings': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SettingsResponse'];
                };
            };
        };
    };
    'put_drive-me-settings': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['UserSettingsRequest'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SettingsResponse'];
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Potential codes and their meaning:
                         *      - 200900: Photos cannot be disabled. There is data in your Photos section.
                         *      */
                        Code: number;
                    };
                };
            };
        };
    };
    'get_drive-volumes': {
        parameters: {
            query?: {
                PageSize?: components['schemas']['OffsetPagination']['PageSize'] & unknown;
                Page?: components['schemas']['OffsetPagination']['Page'] & unknown;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ListVolumesResponseDto'];
                };
            };
        };
    };
    'post_drive-volumes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CreateVolumeRequestDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GetVolumeResponseDto'];
                };
            };
        };
    };
    'put_drive-volumes-{volumeID}-delete_locked': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
            422: components['responses']['ProtonErrorResponse'];
        };
    };
    'get_drive-volumes-{volumeID}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GetVolumeResponseDto'];
                };
            };
            422: components['responses']['ProtonErrorResponse'];
        };
    };
    'put_drive-volumes-{volumeID}-restore': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                volumeID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['RestoreVolumeDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
            422: components['responses']['ProtonErrorResponse'];
        };
    };
}
