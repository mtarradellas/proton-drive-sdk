/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/core/{_version}/addresses/allowAddressDeletion': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_core-{_version}-addresses-allowAddressDeletion'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/keys/address/active': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update list of active keys per address */
        put: operations['put_core-{_version}-keys-address-active'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/keys': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get mail-enabled active public keys.
         * @deprecated
         * @description This route returns **all the mail-enabled** public keys that
         *     the owner of the address is **able to decrypt**.
         *
         *     Deprecated! Please refer to https://confluence.protontech.ch/pages/viewpage.action?pageId=157816403 to upgrade
         */
        get: operations['get_core-{_version}-keys'];
        put?: never;
        /** POST /keys route (Deprecated, AddressKey migration step 1.2)
         *     Only used for address-associated keys, otherwise this would be a backdoor way to change the mailbox password
         *     Does not enforce key list validation. */
        post: operations['post_core-{_version}-keys'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/keys/address': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Creates a new AddressKeyUser instance, linked to an AddressKey instance.
         * @description Locked route, only used for address-associated keys,
         *     otherwise this would be a backdoor way to change the mailbox password.
         */
        post: operations['post_core-{_version}-keys-address'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/keys/group': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a group key */
        post: operations['post_core-{_version}-keys-group'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/keys/setup': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Setup keys for new account, private user.
         * @description Initial key setup for new private users.
         */
        post: operations['post_core-{_version}-keys-setup'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/keys/{enc_id}/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Delete address key.
         * @deprecated
         * @description Locked route
         */
        put: operations['put_core-{_version}-keys-{enc_id}-delete'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/keys/address/{enc_id}/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete address key.
         * @description Locked route
         */
        post: operations['post_core-{_version}-keys-address-{enc_id}-delete'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/keys/private': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update user keys for password change.
         * @description Update private keys only, use for mailbox password/single password updates.
         *
         *     This route can not be used to re-activate keys that we don't have access to,
         *     in that case the route "Activate Key" must be used first.
         */
        put: operations['put_core-{_version}-keys-private'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/images/logo': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get logo corresponding to an address or a domain. */
        get: operations['get_core-{_version}-images-logo'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/{enc_id}/addresses': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get addresses of a member. */
        get: operations['get_core-{_version}-members-{enc_id}-addresses'];
        put?: never;
        /**
         * Create new address.
         * @description allow admins to create address (`Local@Domain`) for UserID.
         *
         *     MEMBERS ROUTE TOO!!
         *
         *     Response body example:
         *
         *     ```json
         *     {
         *       "Code": 30004,
         *       "Error": "Domain not found",
         *       "Details": }
         *     }
         *     ```
         */
        post: operations['post_core-{_version}-members-{enc_id}-addresses'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/addresses': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_core-{_version}-addresses'];
        put?: never;
        /**
         * Create new address.
         * @description allow admins to create address (`Local@Domain`) for UserID.
         *
         *     MEMBERS ROUTE TOO!!
         *
         *     Response body example:
         *
         *     ```json
         *     {
         *       "Code": 30004,
         *       "Error": "Domain not found",
         *       "Details": }
         *     }
         *     ```
         */
        post: operations['post_core-{_version}-addresses'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/addresses/available': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Validates an address before creation (format and availability). */
        post: operations['post_core-{_version}-members-addresses-available'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/addresses/order': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Reorder user's addresses. */
        put: operations['put_core-{_version}-addresses-order'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/addresses/setup': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Setup new non-subuser address. */
        post: operations['post_core-{_version}-addresses-setup'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/addresses/canonical': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the canonical form of email addresses. */
        get: operations['get_core-{_version}-addresses-canonical'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/addresses/{enc_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a single address. */
        get: operations['get_core-{_version}-addresses-{enc_id}'];
        /**
         * Update address.
         * @description Update display name and/or signature.
         */
        put: operations['put_core-{_version}-addresses-{enc_id}'];
        post?: never;
        /**
         * Delete a Disabled Address.
         * @deprecated
         * @description This route now edit the Address & AddressUser objects. In the future, will edit only AddressUser object.
         *
         *     Warning - Locked route
         */
        delete: operations['delete_core-{_version}-addresses-{enc_id}'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/domains/{enc_id}/addresses': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a specific domain's addresses. */
        get: operations['get_core-{_version}-domains-{enc_id}-addresses'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/domains/{enc_id}/claimedAddresses': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get external addresses belonging to users outside the organization
         *     with the same domain name as the specified domain. */
        get: operations['get_core-{_version}-domains-{enc_id}-claimedAddresses'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/addresses/{enc_id}/enable': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Enable Address.
         * @description This route now edit the Address & AddressUser objects. In the future, will edit only AddressUser object.
         *
         *     Warning - Locked route
         */
        put: operations['put_core-{_version}-addresses-{enc_id}-enable'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/addresses/{enc_id}/disable': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Disable Address.
         * @description This route now edit the Address & AddressUser objects. In the future, will edit only AddressUser object.
         *
         *     Warning - Locked route
         */
        put: operations['put_core-{_version}-addresses-{enc_id}-disable'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/addresses/{enc_id}/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Delete a Disabled Address.
         * @description This route now edit the Address & AddressUser objects. In the future, will edit only AddressUser object.
         *
         *     Warning - Locked route
         */
        put: operations['put_core-{_version}-addresses-{enc_id}-delete'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/addresses/{enc_id}/type': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Change address type.
         * @description As of now it is possible only to convert an external address into a custom address when a domain has been activated.
         */
        put: operations['put_core-{_version}-addresses-{enc_id}-type'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/addresses/{enc_id}/rename/internal': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Rename address keeping the keys, keeping the same clean email */
        put: operations['put_core-{_version}-addresses-{enc_id}-rename-internal'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/addresses/{enc_id}/rename/external': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Rename unverified external addresses freely (any change is allowed) */
        put: operations['put_core-{_version}-addresses-{enc_id}-rename-external'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/addresses/{enc_addressId}/encryption': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Set encryption signature flags.
         * @description Allows setting "E2EE disabled" or "Do not expect signed" flags, address wide.
         */
        put: operations['put_core-{_version}-addresses-{enc_addressId}-encryption'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/addresses/permissions/organization/switch': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Switch an array of permissions for an array of addressIDs owned by the organization.
         * @description Only custom addresses are affected.
         *     Having both PERMISSIONS_SEND_ALL and PERMISSIONS_SEND_ORG in the permissions array is forbidden.
         *     Having both PERMISSIONS_RECEIVE_ALL and PERMISSIONS_RECEIVE_ORG in the permissions array is forbidden.
         */
        put: operations['put_core-{_version}-members-addresses-permissions-organization-switch'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/{memberId}/saml': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['post_core-{_version}-members-{memberId}-saml'];
        delete: operations['delete_core-{_version}-members-{memberId}-saml'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/{memberId}/devices/{deviceId}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations['delete_core-{_version}-members-{memberId}-devices-{deviceId}'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/{memberId}/devices': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations['delete_core-{_version}-members-{memberId}-devices'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/{id}/devices': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_core-{_version}-members-{id}-devices'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/devices/pending': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_core-{_version}-members-devices-pending'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/{memberId}/devices/{deviceId}/reject': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations['put_core-{_version}-members-{memberId}-devices-{deviceId}-reject'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/{memberId}/devices/reset': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['post_core-{_version}-members-{memberId}-devices-reset'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/{enc_id}/keys': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['post_core-{_version}-members-{enc_id}-keys'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/organizations/scim': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_core-{_version}-organizations-scim'];
        put: operations['put_core-{_version}-organizations-scim'];
        post: operations['post_core-{_version}-organizations-scim'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/keys/user': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['post_core-{_version}-keys-user'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/domains': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Domains.
         * @description Get all domains for this user's organization and check their DNS's
         */
        get: operations['get_core-{_version}-domains'];
        put?: never;
        /**
         * Create Domain.
         * @description Create new Domain, Return domain info if success, locked route
         *
         *     Response body on error:
         *
         *     ```json
         *     {
         *       "Code": 30106,
         *       "Error": "Domain setup failed or domain is already in use within Proton Mail",
         *       "Details": }
         *     }
         *     ```
         */
        post: operations['post_core-{_version}-domains'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/domains/available': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get available domains. */
        get: operations['get_core-{_version}-domains-available'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/domains/premium': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get premium domains. */
        get: operations['get_core-{_version}-domains-premium'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/domains/optin': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get opt-in domain if user is eligible. */
        get: operations['get_core-{_version}-domains-optin'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/domains/{enc_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Domain.
         * @description Get a specific domains and its check DNS
         */
        get: operations['get_core-{_version}-domains-{enc_id}'];
        put?: never;
        post?: never;
        /**
         * Delete Domain.
         * @description Delete a Domain, locked route
         */
        delete: operations['delete_core-{_version}-domains-{enc_id}'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/domains/{enc_id}/catchall': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Set catch-all address, locked route. */
        put: operations['put_core-{_version}-domains-{enc_id}-catchall'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/organizations': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information of current organization */
        get: operations['get_core-{_version}-organizations'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/groups/external/{jwt}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations['put_core-{_version}-groups-external-{jwt}'];
        post?: never;
        delete: operations['delete_core-{_version}-groups-external-{jwt}'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/groups/members': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['post_core-{_version}-groups-members'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/groups': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_core-{_version}-groups'];
        put?: never;
        post: operations['post_core-{_version}-groups'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/groups/unsubscribe/{jwt}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['post_core-{_version}-groups-unsubscribe-{jwt}'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/groups/{enc_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations['put_core-{_version}-groups-{enc_id}'];
        post?: never;
        delete: operations['delete_core-{_version}-groups-{enc_id}'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/groups/members/{enc_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations['delete_core-{_version}-groups-members-{enc_id}'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/groups/members/{groupMemberId}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations['put_core-{_version}-groups-members-{groupMemberId}'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/v4/groups/members/external/{jwt}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_core-v4-groups-members-external-{jwt}'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/v4/groups/{group_enc_id}/members': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_core-v4-groups-{group_enc_id}-members'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/v4/groups/members/internal': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_core-v4-groups-members-internal'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/groups/{enc_id}/reinvite': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations['put_core-{_version}-groups-{enc_id}-reinvite'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/groups/members/{groupMemberId}/resume': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations['put_core-{_version}-groups-members-{groupMemberId}-resume'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/invites': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['post_core-{_version}-invites'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/invites/unused': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['post_core-{_version}-invites-unused'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/invites/check': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['post_core-{_version}-invites-check'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/keys/all': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all active public keys.
         * @description This route returns **all the public keys** that the owner of the address is **able to decrypt**.
         *
         *     This route replaces GET /keys. Please refer to https://confluence.protontech.ch/pages/viewpage.action?pageId=157816403 to upgrade
         */
        get: operations['get_core-{_version}-keys-all'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/keys/signedkeylists': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get multiple signed key lists for different epochs */
        get: operations['get_core-{_version}-keys-signedkeylists'];
        put?: never;
        /** Update signed key list. */
        post: operations['post_core-{_version}-keys-signedkeylists'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/keys/signedkeylist': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a single signed key lists for a specific epoch */
        get: operations['get_core-{_version}-keys-signedkeylist'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/keys/salts': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get key salts.
         * @description Locked route
         */
        get: operations['get_core-{_version}-keys-salts'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/keys/address/{enc_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** (Migrated keys) Reactivate just an address key */
        put: operations['put_core-{_version}-keys-address-{enc_id}'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/keys/address/{enc_id}/subkeys': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Add subkeys to an existing keypair. */
        put: operations['put_core-{_version}-keys-address-{enc_id}-subkeys'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/keys/signedkeylists/signature': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update signed key list signature for a specific revision. */
        put: operations['put_core-{_version}-keys-signedkeylists-signature'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/keys/{enc_id}/primary': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Make address key primary.
         * @description Locked route, only used for address-associated keys,
         *     otherwise this could be a backdoor way to revert to an earlier mailbox password.
         */
        put: operations['put_core-{_version}-keys-{enc_id}-primary'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/keys/{enc_id}/flags': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update key flags.
         * @description Locked route
         */
        put: operations['put_core-{_version}-keys-{enc_id}-flags'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/keys/tokens': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations['put_core-{_version}-keys-tokens'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/keys/user/{enc_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Reactivate inactive user key.
         * @description Reactivate inactive user key by sending a key copy encrypted with current mailbox password and the list
         *     of address key fingerprints to reactivate. Locked route.
         */
        put: operations['put_core-{_version}-keys-user-{enc_id}'];
        post?: never;
        delete: operations['delete_core-{_version}-keys-user-{enc_id}'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/keys/private/upgrade': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upgrade private keys with obsolete or incorrect metadata.
         * @description Upgrade keys from lower version to current version. Done by webclient on login.
         *
         *     This route can not be used to re-activate keys that we don't have access to,
         *     in that case the route "Activate Key" must be used first.
         */
        post: operations['post_core-{_version}-keys-private-upgrade'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/keys/migrate': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upgrade keys for key migration step 2
         *     This route can not be used to re-activate keys that we don't have access to,
         *     in that case the route "Activate Key" must be used before or after. */
        post: operations['post_core-{_version}-keys-migrate'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/keys/{enc_id}/activate': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** (Legacy keys) Activate newly-provisioned member address key by sending a key copy encrypted with
         *     current mailbox password. */
        put: operations['put_core-{_version}-keys-{enc_id}-activate'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/keys/{enc_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** (Legacy keys) Activate just an address key, when access to the user key is lost */
        put: operations['put_core-{_version}-keys-{enc_id}'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/keys/reset': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Install a new key for each address. */
        post: operations['post_core-{_version}-keys-reset'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Members.
         * @description Get all members of user's organization
         */
        get: operations['get_core-{_version}-members'];
        put?: never;
        /**
         * Create a new member.
         * @description Locked route
         *
         *     phpcs:disable Generic.Metrics.CyclomaticComplexity.MaxExceeded
         */
        post: operations['post_core-{_version}-members'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/invitations': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['post_core-{_version}-members-invitations'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/invitations/{enc_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Edit a pending invitation.
         * @description Locked route
         */
        put: operations['put_core-{_version}-members-invitations-{enc_id}'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/{enc_id}/disable': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Disable a member.
         * @description Locked route
         */
        put: operations['put_core-{_version}-members-{enc_id}-disable'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/{enc_id}/enable': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Enable a member.
         * @description Locked route
         */
        put: operations['put_core-{_version}-members-{enc_id}-enable'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/{enc_id}/quota': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update disk space quota in bytes.
         * @description Locked route
         */
        put: operations['put_core-{_version}-members-{enc_id}-quota'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/{enc_id}/name': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update member name.
         * @description Locked route
         */
        put: operations['put_core-{_version}-members-{enc_id}-name'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/{enc_id}/role': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update member role. */
        put: operations['put_core-{_version}-members-{enc_id}-role'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/{memberId}/ai': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update AI entitlement for member. */
        put: operations['put_core-{_version}-members-{memberId}-ai'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/{enc_id}/privatize': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Make account private.
         * @description Locked route
         */
        put: operations['put_core-{_version}-members-{enc_id}-privatize'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/me': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user's member. */
        get: operations['get_core-{_version}-members-me'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/me/unprivatize': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get unprivatization info for self */
        get: operations['get_core-{_version}-members-me-unprivatize'];
        put?: never;
        /** Accept member unprivatization */
        post: operations['post_core-{_version}-members-me-unprivatize'];
        /** Refuse unprivatization for self */
        delete: operations['delete_core-{_version}-members-me-unprivatize'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/{id}/unprivatize/resend': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resend magic link email */
        post: operations['post_core-{_version}-members-{id}-unprivatize-resend'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/{id}/unprivatize': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Request unprivatization to existing member. */
        post: operations['post_core-{_version}-members-{id}-unprivatize'];
        /** Cancel unprivatization for member */
        delete: operations['delete_core-{_version}-members-{id}-unprivatize'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/{enc_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a specific member. */
        get: operations['get_core-{_version}-members-{enc_id}'];
        put?: never;
        post?: never;
        /**
         * Delete a member.
         * @description Remove member, deletes user if not PM user, locked route.
         */
        delete: operations['delete_core-{_version}-members-{enc_id}'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/{enc_id}/details': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_core-{_version}-members-{enc_id}-details'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/{enc_id}/authlog': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_core-{_version}-members-{enc_id}-authlog'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/{enc_id}/require2fa': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Enforce two-factor for a member based on the current organization two-factor grace period setting, locked route */
        put: operations['put_core-{_version}-members-{enc_id}-require2fa'];
        post?: never;
        /** Do not enforce two-factor for a member, locked route */
        delete: operations['delete_core-{_version}-members-{enc_id}-require2fa'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/{enc_id}/permissions/forwarding': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Allow member to use Email Forwarding */
        post: operations['post_core-{_version}-members-{enc_id}-permissions-forwarding'];
        /** Forbid member to use Email Forwarding */
        delete: operations['delete_core-{_version}-members-{enc_id}-permissions-forwarding'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/permissions': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Add or remove Permissions field for a list of MemberIDs */
        put: operations['put_core-{_version}-members-permissions'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/{enc_id}/keys/setup': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Setup Member Keys.
         * @description Setup new member keys, locked route.
         */
        post: operations['post_core-{_version}-members-{enc_id}-keys-setup'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/{enc_id}/keys/migrate': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upgrade keys for key migration step 2
         * @description This route can not be used to re-activate keys that we don't have access to,
         *     in that case the route "Activate Key" must be used before or after.
         */
        post: operations['post_core-{_version}-members-{enc_id}-keys-migrate'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/{enc_id}/keys/signedkeylists': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update signed key lists for a subuser. */
        post: operations['post_core-{_version}-members-{enc_id}-keys-signedkeylists'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/{enc_id}/keys/unprivatize': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unprivatize member
         * @description Can be called from the background provided validation of InvitationData succeeds
         */
        post: operations['post_core-{_version}-members-{enc_id}-keys-unprivatize'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/{enc_id}/auth': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Session.
         * @description Login as non-private member, password route
         */
        post: operations['post_core-{_version}-members-{enc_id}-auth'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/{enc_id}/sessions': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get sessions route.
         * @description Get active sessions.
         */
        get: operations['get_core-{_version}-members-{enc_id}-sessions'];
        put?: never;
        /**
         * Create Session.
         * @description Login as non-private member, password route
         */
        post: operations['post_core-{_version}-members-{enc_id}-sessions'];
        /**
         * Revoke all sessions route.
         * @description Revoke all access tokens, locked.
         */
        delete: operations['delete_core-{_version}-members-{enc_id}-sessions'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/{enc_id}/sessions/{uid}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Revoke a session by UID, locked. */
        delete: operations['delete_core-{_version}-members-{enc_id}-sessions-{uid}'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/organizations/keys': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get organization keys.
         * @description Get PGP keys of the current organization
         */
        get: operations['get_core-{_version}-organizations-keys'];
        /**
         * Create or replace organization keys.
         * @description Replace current organization keys and member keys
         */
        put: operations['put_core-{_version}-organizations-keys'];
        /**
         * Create or replace organization keys.
         * @description Replace current organization keys and member keys
         */
        post: operations['post_core-{_version}-organizations-keys'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/organizations/keys/backup': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get backup key.
         * @description Get current organization backup private key, locked route.
         */
        get: operations['get_core-{_version}-organizations-keys-backup'];
        /**
         * Update backup key.
         * @description Update current organization backup private key, locked route.
         */
        put: operations['put_core-{_version}-organizations-keys-backup'];
        /**
         * Update backup key.
         * @description Update current organization backup private key, locked route.
         */
        post: operations['post_core-{_version}-organizations-keys-backup'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/organizations/name': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update organization name.
         * @description Update current organization name, locked route
         */
        put: operations['put_core-{_version}-organizations-name'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/organizations/email': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update organization email.
         * @description Update current organization email, locked route.
         */
        put: operations['put_core-{_version}-organizations-email'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/organizations/2fa': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update current organization two-factor grace period setting, locked route */
        put: operations['put_core-{_version}-organizations-2fa'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/organizations/require2fa': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Enforce current organization two-factor authentication for a specific group of members, locked route */
        put: operations['put_core-{_version}-organizations-require2fa'];
        post?: never;
        /** Remove current organization two-factor authentication enforcement, locked route */
        delete: operations['delete_core-{_version}-organizations-require2fa'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/organizations/keys/activate': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Activate organization private key.
         * @description Update inactive private key with new copy encrypted with current mailbox password, locked route.
         */
        put: operations['put_core-{_version}-organizations-keys-activate'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/organizations/membership': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Leave organization.
         * @description Lets a member delete themselves from an organization.
         */
        delete: operations['delete_core-{_version}-organizations-membership'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/organizations/2fa/remind': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send a 2FA reminder email to all members without 2FA set. */
        post: operations['post_core-{_version}-organizations-2fa-remind'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/organizations/keys/migrate': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Migrate organization key. */
        post: operations['post_core-{_version}-organizations-keys-migrate'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/organizations/keys/signature': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_core-{_version}-organizations-keys-signature'];
        put: operations['put_core-{_version}-organizations-keys-signature'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/organizations/logo/{logo_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Having {enc_id} in the route allows us to cache the logo without invalidating the cache when a new logo is uploaded */
        get: operations['get_core-{_version}-organizations-logo-{logo_id}'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/organizations/settings': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_core-{_version}-organizations-settings'];
        put: operations['put_core-{_version}-organizations-settings'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/organizations/settings/logo': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['post_core-{_version}-organizations-settings-logo'];
        delete: operations['delete_core-{_version}-organizations-settings-logo'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/captcha': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Captcha page.
         * @deprecated
         */
        get: operations['get_core-{_version}-captcha'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/resources/captcha': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Captcha page. */
        get: operations['get_core-{_version}-resources-captcha'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/resources/zendesk': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Zendesk chat. */
        get: operations['get_core-{_version}-resources-zendesk'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/saml/setup/fields': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['post_core-{_version}-saml-setup-fields'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/saml/setup/xml': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['post_core-{_version}-saml-setup-xml'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/saml/setup/url': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['post_core-{_version}-saml-setup-url'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/saml/configs': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_core-{_version}-saml-configs'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/saml/configs/{enc_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_core-{_version}-saml-configs-{enc_id}'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/saml/configs/{enc_id}/fields': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations['put_core-{_version}-saml-configs-{enc_id}-fields'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/saml/configs/{enc_id}/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations['put_core-{_version}-saml-configs-{enc_id}-delete'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/saml/sp/info': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_core-{_version}-saml-sp-info'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/saml/edugain/info': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_core-{_version}-saml-edugain-info'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/saml/edugain/info/{domainName}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_core-{_version}-saml-edugain-info-{domainName}'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/saml/metadata': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the XML representation of the Service Provider metadata. */
        get: operations['get_core-{_version}-saml-metadata'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get general settings. */
        get: operations['get_core-{_version}-settings'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/password': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update login password. Only called in 2-password mode (or onboarding to 2-password mode). */
        put: operations['put_core-{_version}-settings-password'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/password/upgrade': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Upgrade Password.
         * @description Upgrade login password on login if version < 4.
         */
        put: operations['put_core-{_version}-settings-password-upgrade'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/email': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations['put_core-{_version}-settings-email'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/email/verify': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Verify associated email address. */
        post: operations['post_core-{_version}-settings-email-verify'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/email/notify': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Toggle email notifications. */
        put: operations['put_core-{_version}-settings-email-notify'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/email/reset': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Enable or disable login password reset by email. */
        put: operations['put_core-{_version}-settings-email-reset'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/phone': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations['put_core-{_version}-settings-phone'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/phone/verify': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Verify associated phone number. */
        post: operations['post_core-{_version}-settings-phone-verify'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/phone/notify': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Toggle phone notifications. */
        put: operations['put_core-{_version}-settings-phone-notify'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/phone/reset': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Enable or disable login password reset by phone. */
        put: operations['put_core-{_version}-settings-phone-reset'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/locale': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations['put_core-{_version}-settings-locale'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/logauth': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update authentication logging. */
        put: operations['put_core-{_version}-settings-logauth'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/devicerecovery': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update device recovery enabled preference. */
        put: operations['put_core-{_version}-settings-devicerecovery'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/news': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update newsletter subscription.
         * @deprecated
         */
        put: operations['put_core-{_version}-settings-news'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Patch newsletter subscription. */
        patch: operations['patch_core-{_version}-settings-news'];
        trace?: never;
    };
    '/core/{_version}/settings/news/external': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get newsletter subscription status as external user. */
        get: operations['get_core-{_version}-settings-news-external'];
        /**
         * Update newsletter subscription as external user.
         * @deprecated
         */
        put: operations['put_core-{_version}-settings-news-external'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Patch newsletter subscription as external user. */
        patch: operations['patch_core-{_version}-settings-news-external'];
        trace?: never;
    };
    '/core/{_version}/settings/density': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update the mail list density. */
        put: operations['put_core-{_version}-settings-density'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/invoicetext': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update invoice user-defined text. */
        put: operations['put_core-{_version}-settings-invoicetext'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/2fa/codes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Regenerate recovery codes.
         * @description Replace current recovery codes with new ones.
         */
        post: operations['post_core-{_version}-settings-2fa-codes'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/2fa/totp': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations['put_core-{_version}-settings-2fa-totp'];
        /** Signup for TOTP. */
        post: operations['post_core-{_version}-settings-2fa-totp'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/2fa': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Disable all the 2FA methods. */
        put: operations['put_core-{_version}-settings-2fa'];
        /** Signup for TOTP. */
        post: operations['post_core-{_version}-settings-2fa'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/2fa/reset': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Request Reset 2FA.
         * @description Reset all 2FA methods to disabled state.
         */
        post: operations['post_core-{_version}-settings-2fa-reset'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/2fa/register': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a challenge for registration of a FIDO2 credential. */
        get: operations['get_core-{_version}-settings-2fa-register'];
        put?: never;
        /** Register a FIDO2 credential. */
        post: operations['post_core-{_version}-settings-2fa-register'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/2fa/{credentialID}/remove': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Remove a FIDO2 credential. */
        post: operations['post_core-{_version}-settings-2fa-{credentialID}-remove'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/2fa/{credentialID}/rename': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Rename a FIDO2 credential. */
        put: operations['put_core-{_version}-settings-2fa-{credentialID}-rename'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/hide-side-panel': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update HideSidePanel for the current client. */
        put: operations['put_core-{_version}-settings-hide-side-panel'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/username': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Set username for external ProtonAccount. */
        put: operations['put_core-{_version}-settings-username'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/theme': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations['put_core-{_version}-settings-theme'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/themetype': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations['put_core-{_version}-settings-themetype'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/weekstart': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations['put_core-{_version}-settings-weekstart'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/dateformat': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations['put_core-{_version}-settings-dateformat'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/timeformat': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations['put_core-{_version}-settings-timeformat'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/welcome': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations['put_core-{_version}-settings-welcome'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/earlyaccess': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update BetaFlags. */
        put: operations['put_core-{_version}-settings-earlyaccess'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/flags': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations['put_core-{_version}-settings-flags'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/telemetry': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update telemetry enabled preference. */
        put: operations['put_core-{_version}-settings-telemetry'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/crashreports': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update crash reports enabled preference. */
        put: operations['put_core-{_version}-settings-crashreports'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/highsecurity': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * High Security program - enable
         * @description https://confluence.protontech.ch/display/MSA/High+Security+Program
         */
        post: operations['post_core-{_version}-settings-highsecurity'];
        /**
         * High Security program - disable
         * @description https://confluence.protontech.ch/display/MSA/High+Security+Program
         */
        delete: operations['delete_core-{_version}-settings-highsecurity'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/breachalerts': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Breach Alert - enable
         * @description https://confluence.protontech.ch/pages/viewpage.action?pageId=176045452#Proposalfornotifications&resolvingthem-UserSettings.BreachAlertssetting
         */
        post: operations['post_core-{_version}-settings-breachalerts'];
        /**
         * Breach Alert - disable
         * @description https://confluence.protontech.ch/pages/viewpage.action?pageId=176045452#Proposalfornotifications&resolvingthem-UserSettings.BreachAlertssetting
         */
        delete: operations['delete_core-{_version}-settings-breachalerts'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/sessionaccountrecovery': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update session account recovery preference. */
        put: operations['put_core-{_version}-settings-sessionaccountrecovery'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/ai-assistant-flags': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update setting to enable or disable AI Assistant. */
        put: operations['put_core-{_version}-settings-ai-assistant-flags'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/news/unsubscribe': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['post_core-{_version}-settings-news-unsubscribe'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/support/schedulecall': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_core-{_version}-support-schedulecall'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/{memberId}/lumo': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations['put_core-{_version}-members-{memberId}-lumo'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/product-disabled': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update setting to enable or disable specific product for all platforms. */
        put: operations['put_core-{_version}-settings-product-disabled'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/users/delete': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Can user delete account.
         * @description > 1. Free user: delete (you’ll have to enter your password and we might want to do feedback like on web)
         *
         *     > 2. Paid user and the only user: delete (there might be an unsubscribe first)
         *
         *     > 3. Multi-user organization and are a proton a non-admin proton user:
         *     > you should be able to leave the org and delete (might not be built yet, not a current case).
         *
         *     > 4. Multi-user organization and a proton user and an admin:
         *     > you need to be demoted by another admin first, then #3 applies
         *
         *     > 5. Managed user in a multi-user organization (non-proton): you can’t delete yourself
         */
        get: operations['get_core-{_version}-users-delete'];
        /** Delete self, will invalidate API access token. */
        put: operations['put_core-{_version}-users-delete'];
        post?: never;
        /** Delete self, will invalidate API access token. */
        delete: operations['delete_core-{_version}-users-delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/users/reset': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get available reset methods and account type. */
        get: operations['get_core-{_version}-users-reset'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/users': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user's info.
         * @description Alternative response for user without address:
         *
         *     ```js
         *     {
         *         "User": {
         *             "ID": "MJLke8kWh1BBvG95JBIrZvzpgsZ94hNNgjNHVyhXMiv4g9cn6SgvqiIFR5cigpml2LD_iUk_3DkV29oojTt3eA==",
         *             "Name": "jason",
         *             "UsedSpace": 96691332,
         *             "Currency": "USD",
         *             "Credit": 0,
         *             "CreateTime": 1654615960,
         *             "MaxSpace": 10737418240,
         *             "MaxUpload": 26214400,
         *             "Role": 2,
         *             "Private": 1,
         *             "Subscribed": 1,
         *             "Services": 1,
         *             "Delinquent": 0,
         *             "Keys": []
         *         },
         *         "Code": 1000
         *     }
         *     ```
         *
         *     Alternative response for organization admin logged in as a sub-user:
         *
         *     ```js
         *     {
         *          "User": {
         *              "ID": "MJLke8kWh1BBvG95JBIrZvzpgsZ94hNNgjNHVyhXMiv4g9cn6SgvqiIFR5cigpml2LD_iUk_3DkV29oojTt3eA==",
         *              "Name": "jason",
         *              "UsedSpace": 96691332,
         *              "Currency": "USD",
         *              "Credit": 0,
         *              "CreateTime": 1654615960,
         *              "MaxSpace": 10737418240,
         *              "MaxUpload": 26214400,
         *              "Role": 2,
         *              "Private": 1,
         *              "Subscribed": 1,
         *              "Services": 1,
         *              "Delinquent": 0,
         *              "OrganizationPrivateKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----*",
         *              "Email": "jason@protonmail.ch",
         *              "DisplayName": "Jason",
         *              "Keys": [
         *                  {
         *                      "ID": "IlnTbqicN-2HfUGIn-ki8bqZfLqNj5ErUB0z24Qx5g-4NvrrIc6GLvEpj2EPfwGDv28aKYVRRrSgEFhR_zhlkA==",
         *                      "Version": 3,
         *                      "PrivateKey": "-----BEGIN PGP PRIVATE KEY BLOCK-----*-----END PGP PRIVATE KEY BLOCK-----", // correspond to OrgPrivateKey
         *                      "Token": "-----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE-----", // contains the organization (keypackets, signature) pair
         *                      "Fingerprint": "c93f767df53b0ca8395cfde90483475164ec6353", // DEPRECATED
         *                      "Primary": 1
         *                  }
         *              ]
         *          },
         *          "Code": 1000
         *      }
         *     ```
         */
        get: operations['get_core-{_version}-users'];
        put?: never;
        /**
         * Create a user or ProtonID user with a 3rd party email as username.
         * @description TODO(fsalathe): Refactor this function into a service [refactor]
         */
        post: operations['post_core-{_version}-users'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/users/external': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a user or ProtonID user with a 3rd party email as username.
         * @description TODO(fsalathe): Refactor this function into a service [refactor]
         */
        post: operations['post_core-{_version}-users-external'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/users/check': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Check user creation token validity. */
        put: operations['put_core-{_version}-users-check'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/users/availableExternal': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check if username already taken. */
        get: operations['get_core-{_version}-users-availableExternal'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/users/available': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check if username already taken. */
        get: operations['get_core-{_version}-users-available'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/users/available/{username}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @deprecated */
        get: operations['get_core-{_version}-users-available-{username}'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/users/direct': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Deprecated. Placeholder left in place for handling old clients. */
        get: operations['get_core-{_version}-users-direct'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/users/code': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send a verification code. */
        post: operations['post_core-{_version}-users-code'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/users/lock': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Lock sensitive settings for keys/organization. */
        put: operations['put_core-{_version}-users-lock'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/users/unlock': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Unlock sensitive settings for keys/organization. */
        put: operations['put_core-{_version}-users-unlock'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/users/password': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Unlock password changes. */
        put: operations['put_core-{_version}-users-password'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/users/captcha/{token}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get captcha (javascript) (hv1). */
        get: operations['get_core-{_version}-users-captcha-{token}'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/users/disable/{jwt}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_core-{_version}-users-disable-{jwt}'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/members/{enc_id}/vpn': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_core-{_version}-members-{enc_id}-vpn'];
        /**
         * Update max number of VPNs for member.
         * @description Update number of maximum VPN connections, locked route.
         */
        put: operations['put_core-{_version}-members-{enc_id}-vpn'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/v4/features': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the list of the features (optionally filtered).
         * @description TypeScript typing files:
         *     https://gitlab.protontech.ch/ProtonMail/Slim-API/-/blob/develop/bundles/FeatureBundle/tests/Mock/Feature.ts
         */
        get: operations['get_core-v4-features'];
        put?: never;
        /** Add a new feature definition. */
        post: operations['post_core-v4-features'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/v4/features/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update feature configuration. */
        put: operations['put_core-v4-features-{id}'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/v4/features/{featureID}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove a feature definition. */
        delete: operations['delete_core-v4-features-{featureID}'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/v4/features/{code}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a single feature by its code. */
        get: operations['get_core-v4-features-{code}'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/v4/features/{code}/value': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Set the value of a single feature by its code. */
        put: operations['put_core-v4-features-{code}-value'];
        post?: never;
        /** Clear the value of a single feature by its code. */
        delete: operations['delete_core-v4-features-{code}-value'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/v4/features/{code}/user/value': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Set the value of a single feature by its code for a given list of users (selected by ID or Username). */
        put: operations['put_core-v4-features-{code}-user-value'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/auth/info': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set up SRP authentication request. */
        post: operations['post_core-{_version}-auth-info'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/auth/sso/{token}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Initiate SSO flow using token from POST /auth/info */
        get: operations['get_core-{_version}-auth-sso-{token}'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/auth/saml': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** HTTP-POST binding for SAML authentication. Only to be called by an IdP. */
        post: operations['post_core-{_version}-auth-saml'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/auth': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Authenticate. */
        post: operations['post_core-{_version}-auth'];
        /** Revoke a token. */
        delete: operations['delete_core-{_version}-auth'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/auth/jwt': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Authenticate using pre-issued JWT. */
        post: operations['post_core-{_version}-auth-jwt'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/auth/2fa': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit second factor. */
        post: operations['post_core-{_version}-auth-2fa'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/auth/modulus': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get random SRP modulus. */
        get: operations['get_core-{_version}-auth-modulus'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/auth/scopes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the current user scopes.
         * @description Note that the bitmap of scopes is a string to avoid truncations of big numbers.
         */
        get: operations['get_core-{_version}-auth-scopes'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/auth/refresh': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh an expired token.
         * @description Other response 200 body example:
         *     ```js
         *     {
         *       "Code": 1000,
         *       "AccessToken": "8a2575fad8788d253543957073d494c86f22f829", // Decrypted if reset scope or no keys set up
         *       "ExpiresIn": 360000, // DEPRECATED
         *       "TokenType": "Bearer",
         *       "Scope": "reset", // DEPRECATED
         *       "Scopes": ["reset"], // Can only be used to reset mailbox password
         *       "RefreshToken": "b894b4c4f20003f12d486900d8b88c7d68e67235"
         *     }
         *     ```
         */
        post: operations['post_core-{_version}-auth-refresh'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/auth/cookies': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set secure cookies, web app only.
         * @description Cookies have lifetime of one year for persistent sessions.
         *     For non-persistent sessions cookie expiration is set to 0 and the client should garbage collect them at the end
         *     of the session.
         */
        post: operations['post_core-{_version}-auth-cookies'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/auth/credentialless': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create and authenticate a credential-less user. */
        post: operations['post_core-{_version}-auth-credentialless'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/mnemonic': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get mnemonic keyring to restore keys.
         * @description Returns the mnemonic keyring and its encryption salt, to allow re-enabling user keys if a logged in user
         *     remembers an old mnemonic.
         */
        get: operations['get_core-{_version}-settings-mnemonic'];
        /**
         * Update or set mnemonic.
         * @description This route allows submission of a new mnemonic or update an existing mnemonic, alongside a backup keyring.
         *     If a keyring already exists the keys will be merged (newer replaces older).
         */
        put: operations['put_core-{_version}-settings-mnemonic'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/mnemonic/reset': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get mnemonic keyring to restore keys.
         * @description Returns the mnemonic keyring and its encryption salt, to allow re-enabling user keys in the reset flow.
         */
        get: operations['get_core-{_version}-settings-mnemonic-reset'];
        put?: never;
        /**
         * Reset account using a mnemonic.
         * @description This route accepts a new password, returns the mnemonic keyring and its encryption salt,
         *     to allow resetting an account. This will change the session's scopes to the regular user's scopes.
         *     It logs out other sessions for security reasons.
         */
        post: operations['post_core-{_version}-settings-mnemonic-reset'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/mnemonic/disable': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable mnemonic for current user.
         * @description To re-enable it's needed to submit a new mnemonic via PUT /settings/mnemonic.
         *     This route removes the PASSWORD scope from the token.
         */
        post: operations['post_core-{_version}-settings-mnemonic-disable'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/mnemonic/reactivate': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update or set mnemonic.
         * @description This route allows submission of a new mnemonic or update an existing mnemonic, alongside a backup keyring.
         *     If a keyring already exists the keys will be merged (newer replaces older).
         *
         *     This route requires LOCKED scope only to allow prompting a mnemonic by default right after login.
         *     It will work only if the mnemonic needs to be (re) activated and is to be prompted automatically (i.e. for
         *     states MNEMONIC_ENABLED and MNEMONIC_OUTDATED).
         */
        put: operations['put_core-{_version}-settings-mnemonic-reactivate'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/pushes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get active pushes info.
         * @deprecated
         * @description List of active notifications for the current logged user.
         *     Can be used by the clients to always know what should still be showed as active notification.
         */
        get: operations['get_core-{_version}-pushes'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/pushes/active': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get active pushes info.
         * @description List of active notifications for the current logged user.
         *     Can be used by the clients to always know what should still be showed as active notification.
         */
        get: operations['get_core-{_version}-pushes-active'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/pushes/active/session': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get active pushes info (using session).
         * @description List of active notifications for the current logged user using the current session.
         *     Can be used by the clients to always know what should still be showed as active notification.
         */
        get: operations['get_core-{_version}-pushes-active-session'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/pushes/{enc_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete the given push.
         * @description If the session belongs to a family, the pushes for the whole session family will be deleted.
         */
        delete: operations['delete_core-{_version}-pushes-{enc_id}'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/referrals': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List current user referrals. */
        get: operations['get_core-{_version}-referrals'];
        put?: never;
        /** Send referral invitation by email to a list of recipients. */
        post: operations['post_core-{_version}-referrals'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/referrals/status': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Current user referral status. */
        get: operations['get_core-{_version}-referrals-status'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/referrals/identifiers/{identifier}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check if referrer identifier exists */
        get: operations['get_core-{_version}-referrals-identifiers-{identifier}'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/devices': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register device. The registering will delete any duplicate having the same (UserID, Product, DeviceToken) from
         *     different sessions. If the registering is done from a session already having a registered device, the existing
         *     device will be replaced with the new one. */
        post: operations['post_core-{_version}-devices'];
        /**
         * Unregister device.
         * @description > Note: Please use the `DELETE /core/v4/devices` route
         */
        delete: operations['delete_core-{_version}-devices'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/betas/{client_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a specific beta registration. */
        get: operations['get_core-{_version}-betas-{client_id}'];
        /** Create or update beta registration. */
        put: operations['put_core-{_version}-betas-{client_id}'];
        post?: never;
        /** Delete a specific beta registration. */
        delete: operations['delete_core-{_version}-betas-{client_id}'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/betas': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all beta registrations. */
        get: operations['get_core-{_version}-betas'];
        put?: never;
        post?: never;
        /** Delete all beta registrations. */
        delete: operations['delete_core-{_version}-betas'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/geofeed/geofeed.csv': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a CSV export for GeoFeed. */
        get: operations['get_core-{_version}-geofeed-geofeed-csv'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/geofeed/geofeed-public.csv': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get geofeed data containing only the custom admin-set data */
        get: operations['get_core-{_version}-geofeed-geofeed-public-csv'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/load': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Placeholder route.
         * @description Placeholder route for app pages and modals that are loaded by front-end JavaScript instead of
         *     obtained via a GET request.
         */
        get: operations['get_core-{_version}-load'];
        put?: never;
        /**
         * Placeholder route.
         * @description Placeholder route for app pages and modals that are loaded by front-end JavaScript instead of
         *     obtained via a GET request.
         */
        post: operations['post_core-{_version}-load'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/logs/auth': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get authentication logs. */
        get: operations['get_core-{_version}-logs-auth'];
        put?: never;
        post?: never;
        /** Delete all authentication logs. */
        delete: operations['delete_core-{_version}-logs-auth'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/metrics': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Send Simple Metrics. */
        get: operations['get_core-{_version}-metrics'];
        put?: never;
        /**
         * Send Metrics Report.
         * @description The `Data` key can contain anything, that is what will be saved in the log (as context).
         */
        post: operations['post_core-{_version}-metrics'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/settings/recovery/secret': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set secret when empty.
         * @description This route allows submission of new secrets when they are empty for the primary user key.
         */
        post: operations['post_core-{_version}-settings-recovery-secret'];
        /**
         * Reset secrets to the null state, in case the files are (suspect) compromised.
         * @description To re-enable it's needed to submit new secrets.
         */
        delete: operations['delete_core-{_version}-settings-recovery-secret'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/reports/form/{portal_id}/{form_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Please refer to the Hubspot API docs for this route: https://legacydocs.hubspot.com/docs/methods/forms/submit_form */
        post: operations['post_core-{_version}-reports-form-{portal_id}-{form_id}'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/reports/bug': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Report a bug.
         * @description Request Body example:
         *     ```
         *     ----WebKitFormBoundary7MA4YWxkTrZu0gW
         *     Content-Disposition: form-data; name="OS"
         *
         *     iOS
         *     ----WebKitFormBoundary7MA4YWxkTrZu0gW
         *     Content-Disposition: form-data; name="OSVersion"
         *
         *     8.0.3
         *     ----WebKitFormBoundary7MA4YWxkTrZu0gW
         *     Content-Disposition: form-data; name="Client"
         *
         *     Web
         *     ----WebKitFormBoundary7MA4YWxkTrZu0gW
         *     Content-Disposition: form-data; name="ClientVersion"
         *
         *     2.0.0
         *     ----WebKitFormBoundary7MA4YWxkTrZu0gW
         *     Content-Disposition: form-data; name="ClientType"
         *
         *     1 // 1 = email, 2 = VPN
         *     ----WebKitFormBoundary7MA4YWxkTrZu0gW
         *     Content-Disposition: form-data; name="Title"
         *
         *     My issue title
         *     ----WebKitFormBoundary7MA4YWxkTrZu0gW
         *     Content-Disposition: form-data; name="Description"
         *
         *     Some text here
         *     ----WebKitFormBoundary7MA4YWxkTrZu0gW
         *     Content-Disposition: form-data; name="Username"
         *
         *     4w350m3h4x0r
         *     ----WebKitFormBoundary7MA4YWxkTrZu0gW
         *     Content-Disposition: form-data; name="Email"
         *
         *     derp@gmail.com
         *     ----WebKitFormBoundary7MA4YWxkTrZu0gW
         *     Content-Disposition: form-data; name="Country"
         *
         *     MK
         *     ----WebKitFormBoundary7MA4YWxkTrZu0gW
         *     Content-Disposition: form-data; name="ISP"
         *
         *     Makedonski Telekom AD-Skopje
         *     ----WebKitFormBoundary7MA4YWxkTrZu0gW
         *     Content-Disposition: form-data; name="MyAttachment"; filename="logs.txt"
         *     Content-Type: text/plain
         *
         *     {attachment contents}
         *     ----WebKitFormBoundary7MA4YWxkTrZu0gW
         *     ```
         */
        post: operations['post_core-{_version}-reports-bug'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/reports/bug/attachments': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload attachment for the ticket
         * @description ```
         *     ----WebKitFormBoundary7MA4YWxkTrZu0gW
         *      Content-Disposition: form-data; name="ISP"
         *
         *      Makedonski Telekom AD-Skopje
         *      ----WebKitFormBoundary7MA4YWxkTrZu0gW
         *      Content-Disposition: form-data; name="MyAttachment"; filename="logs.txt"
         *      Content-Type: text/plain
         *
         *      {attachment contents}
         *      ----WebKitFormBoundary7MA4YWxkTrZu0gW
         *     ```
         */
        post: operations['post_core-{_version}-reports-bug-attachments'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/reports/bug/{ticketId}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Solve ticket */
        delete: operations['delete_core-{_version}-reports-bug-{ticketId}'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/reports/abuse': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Report abuse. This is different to bug report, because the expectation
         *     is that the reporting user will be visiting from the public website and
         *     may not even be a Proton customer. The reporting user can submit
         *     multiple Proton accounts as potential abusers.
         * @description Request Body example:
         *     ```
         *     ----WebKitFormBoundary7MA4YWxkTrZu0gW
         *     Content-Disposition: form-data; name="Category"
         *
         *     harassment
         *     ----WebKitFormBoundary7MA4YWxkTrZu0gW
         *     Content-Disposition: form-data; name="Description"
         *
         *     These people have been harassing me.
         *     ----WebKitFormBoundary7MA4YWxkTrZu0gW
         *     Content-Disposition: form-data; name="Usernames"
         *
         *     abuser123,abuser456
         *     ----WebKitFormBoundary7MA4YWxkTrZu0gW
         *     Content-Disposition: form-data; name="Email"
         *
         *     reporter@example.com
         *     ----WebKitFormBoundary7MA4YWxkTrZu0gW
         *     Content-Disposition: form-data; name="Screenshot"; filename="screenshot.png"
         *     Content-Type: image/png
         *
         *     {binary data}
         *     ----WebKitFormBoundary7MA4YWxkTrZu0gW
         *     ```
         */
        post: operations['post_core-{_version}-reports-abuse'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/reports/crash': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Report a client crash. */
        post: operations['post_core-{_version}-reports-crash'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/reports/sentry/api/{id}/{type}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Report a client crash via Sentry Proxy (new).
         * @description The interface proxies request generated by a Sentry client to a configured Sentry server.
         *
         *     This endpoint uses the new version of Sentry (https://sentry-new.protontech.ch).
         *
         *     <div style="border: 2px solid #E57373; padding: .6rem">
         *       When configuring a Sentry client, the <em>DSN</em> should not be built with this URI but with:
         *       <code>https://SENTRY_PUBLIC_KEY@api.protonmail.ch/core/v4/reports/sentry/{sentry_project_id}</code>
         *     </div>
         */
        post: operations['post_core-{_version}-reports-sentry-api-{id}-{type}'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/reports/sentry/api/{id}/{type}/': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Report a client crash via Sentry Proxy (new).
         * @description The interface proxies request generated by a Sentry client to a configured Sentry server.
         *
         *     This endpoint uses the new version of Sentry (https://sentry-new.protontech.ch).
         *
         *     <div style="border: 2px solid #E57373; padding: .6rem">
         *       When configuring a Sentry client, the <em>DSN</em> should not be built with this URI but with:
         *       <code>https://SENTRY_PUBLIC_KEY@api.protonmail.ch/core/v4/reports/sentry/{sentry_project_id}</code>
         *     </div>
         */
        post: operations['post_core-{_version}-reports-sentry-api-{id}-{type}'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/reports/phishing': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Report a phishing email. */
        post: operations['post_core-{_version}-reports-phishing'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/reports/spam': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Report spam. */
        post: operations['post_core-{_version}-reports-spam'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/reports/cancel-plan': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['post_core-{_version}-reports-cancel-plan'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/reset/{username}/{token}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Validate reset token. */
        get: operations['get_core-{_version}-reset-{username}-{token}'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/reset': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Request login reset token. */
        post: operations['post_core-{_version}-reset'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/reset/username': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send usernames to notification email. */
        post: operations['post_core-{_version}-reset-username'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/system/config': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_core-{_version}-system-config'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/system/version': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_core-{_version}-system-version'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/tests/exception': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_core-{_version}-tests-exception'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/tests/error': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_core-{_version}-tests-error'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/tests/notice': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_core-{_version}-tests-notice'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/tests/memoryLeak': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Simulate a memory leak. */
        get: operations['get_core-{_version}-tests-memoryLeak'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/tests/logger': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_core-{_version}-tests-logger'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/tests/logger/observability': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_core-{_version}-tests-logger-observability'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/tests/ping': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * A "ping" route to check connectivity.
         * @description More info about when to use this route:
         *     https://confluence.protontech.ch/display/CP/When+and+How+to+Retry+API+Requests
         */
        get: operations['get_core-{_version}-tests-ping'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/tests/version': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @deprecated */
        get: operations['get_core-{_version}-tests-version'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/tests/stream': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Test endpoint to check streaming capabilities */
        get: operations['get_core-{_version}-tests-stream'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/update': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_core-{_version}-update'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/users/invitations': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets organization invitations sent to a user. */
        get: operations['get_core-{_version}-users-invitations'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/users/invitations/{enc_id}/reject': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Rejects an invitation. */
        post: operations['post_core-{_version}-users-invitations-{enc_id}-reject'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/users/invitations/{enc_id}/accept': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Accepts an invitation. */
        post: operations['post_core-{_version}-users-invitations-{enc_id}-accept'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/validate/email': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Validate email address. */
        post: operations['post_core-{_version}-validate-email'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/validate/phone': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Validate phone number. */
        post: operations['post_core-{_version}-validate-phone'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/verification/ownership/{token}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get details of a given Ownership Verification. */
        get: operations['get_core-{_version}-verification-ownership-{token}'];
        put?: never;
        /** Request ownership verification. */
        post: operations['post_core-{_version}-verification-ownership-{token}'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/verification/ownership-email/{token}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get details of a given Ownership Verification. */
        get: operations['get_core-{_version}-verification-ownership-email-{token}'];
        put?: never;
        /** Request ownership verification. */
        post: operations['post_core-{_version}-verification-ownership-email-{token}'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/verification/ownership-sms/{token}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get details of a given Ownership Verification. */
        get: operations['get_core-{_version}-verification-ownership-sms-{token}'];
        put?: never;
        /** Request ownership verification. */
        post: operations['post_core-{_version}-verification-ownership-sms-{token}'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/verification/ownership/{token}/{code}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Request ownership verification. */
        post: operations['post_core-{_version}-verification-ownership-{token}-{code}'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/verification/ownership-email/{token}/{code}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Request ownership verification. */
        post: operations['post_core-{_version}-verification-ownership-email-{token}-{code}'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/verification/ownership-sms/{token}/{code}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Request ownership verification. */
        post: operations['post_core-{_version}-verification-ownership-sms-{token}-{code}'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/v6/events/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_core-v6-events-{id}'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/events/latest': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_core-{_version}-events-latest'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/events/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get events since ID.
         * @description Get a list of models to refresh for each event type.
         */
        get: operations['get_core-{_version}-events-{id}'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/v4/events/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get events since ID.
         * @deprecated
         * @description Get a list of models to refresh for each event type.
         */
        get: operations['get_core-v4-events-{id}'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/feedback': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Log general user feedback. */
        post: operations['post_core-{_version}-feedback'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/checklist/get-started': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_core-{_version}-checklist-get-started'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/checklist/paying-user': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['get_core-{_version}-checklist-paying-user'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/checklist/get-started/seen-completed-list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['post_core-{_version}-checklist-get-started-seen-completed-list'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/checklist/paying-user/hide': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['post_core-{_version}-checklist-paying-user-hide'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/checklist/paying-user/seen-completed-list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['post_core-{_version}-checklist-paying-user-seen-completed-list'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/checklist/get-started/init': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['post_core-{_version}-checklist-get-started-init'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/checklist/paying-user/init': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['post_core-{_version}-checklist-paying-user-init'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/checklist/check-item': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations['put_core-{_version}-checklist-check-item'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/checklist/update-display': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations['put_core-{_version}-checklist-update-display'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/verify/send': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send a verification link. */
        post: operations['post_core-{_version}-verify-send'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/verify/validate': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Validate JWT token. */
        post: operations['post_core-{_version}-verify-validate'];
        /** Validate JWT token. */
        delete: operations['delete_core-{_version}-verify-validate'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/verify/email': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Trigger ownership verification using email only. */
        post: operations['post_core-{_version}-verify-email'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/verify/phone': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Trigger ownership verification on phone number only. */
        post: operations['post_core-{_version}-verify-phone'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/verify/reauth/email': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Re-authenticate by verifying email and add Password scope to the session if the verification is successful. */
        post: operations['post_core-{_version}-verify-reauth-email'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/verify/reauth/phone': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Re-authenticate by verifying phone and add Password scope to the session if the verification is successful. */
        post: operations['post_core-{_version}-verify-reauth-phone'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/notifications': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all the notifications. */
        get: operations['get_core-{_version}-notifications'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/v4/labels/{enc_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Patch existing label. */
        patch: operations['patch_core-v4-labels-{enc_id}'];
        trace?: never;
    };
    '/core/v4/labels/by-ids': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get user labels by IDs. */
        post: operations['post_core-v4-labels-by-ids'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/labels': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user's labels. */
        get: operations['get_core-{_version}-labels'];
        put?: never;
        /** Create new label. */
        post: operations['post_core-{_version}-labels'];
        /** Delete multiple labels. */
        delete: operations['delete_core-{_version}-labels'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/labels/available': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check Label name availability.
         * @description Validates that a name is available for creation.
         *     For labels and folders, it must be a unique name at the root label.
         *
         *     If a ParentID is passed, it must be for folders only and the uniqueness is checked only under that parent folder.
         *
         *     The name can't be a reserved name like `Inbox`, `Sent`, ...
         */
        get: operations['get_core-{_version}-labels-available'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/labels/order': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Change label priority. */
        put: operations['put_core-{_version}-labels-order'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/labels/order/tree/{startLabelId}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations['put_core-{_version}-labels-order-tree-{startLabelId}'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/labels/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update existing label. */
        put: operations['put_core-{_version}-labels-{id}'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/labels/{enc_id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a label. */
        delete: operations['delete_core-{_version}-labels-{enc_id}'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/labels/{enc_labelID}/detach': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Detach messages from the label.
         * @description Remove the label from all messages that have it. It deletes the MessageLabels entries in the db.
         */
        put: operations['put_core-{_version}-labels-{enc_labelID}-detach'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/core/{_version}/images': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get image through proxy. */
        get: operations['get_core-{_version}-images'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * ProtonResponseCode
         * @enum {integer}
         */
        ResponseCodeSuccess: 1000;
        ProtonSuccess: {
            Code: components['schemas']['ResponseCodeSuccess'];
        };
        ProtonError: {
            /** ErrorCode */
            Code: number;
            /** @description Error message */
            Error: string;
            /** @description Error description (can be an empty object) */
            Details: Record<string, never>;
        };
        DriveConstants: {
            /** @enum {integer} */
            BlockMaxSizeInBytes?: 5300000;
            /** @enum {integer} */
            ThumbnailMaxSizeInBytes?: 65536;
            /** @enum {integer} */
            DraftRevisionLifetimeInSec?: 14400;
            /** @enum {integer} */
            ExtendedAttributesMaxSizeInBytes?: 65535;
            /** @enum {integer} */
            UploadTokenExpirationTimeInSec?: 10800;
            /** @enum {integer} */
            DownloadTokenExpirationTimeInSec?: 1800;
        };
        CreateLegacyKeyInput: {
            AddressID: components['schemas']['EncryptedId'];
            PrivateKey: components['schemas']['PGPPrivateKey'];
            /** @example 1 */
            Primary?: number | null;
            SignedKeyList: components['schemas']['SignedKeyListInput'];
            AddressForwardingID: Record<string, never>;
            /** @default null */
            GroupMemberID: Record<string, never> | null;
            /** @default null */
            Signature: string | null;
            /** @default null */
            OrgToken: string | null;
            /** @default null */
            OrgSignature: string | null;
            /** @default null */
            Token: string | null;
        };
        SetupKeyInput: {
            /** @example -----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK----- */
            PrimaryKey: string;
            /**
             * @description RANDOMLY generated client-side
             * @example <base64_encoded_key_salt>
             */
            KeySalt: string;
            /**
             * @description For setup using magic link, the primary key encrypted to the token contained in OrgActivationToken
             * @example -----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK-----
             */
            OrgPrimaryUserKey: string;
            /**
             * @description For setup using magic link, a 32-byte random token encoded as hex and encrypted to the organization key, signed with the newly created address key. Context should be set to account.key-token.user-unprivatization
             * @example -----BEGIN PGP MESSAGE-----.*
             */
            OrgActivationToken: string;
            AddressKeys: components['schemas']['AddressKeyInput5'][];
            Auth: components['schemas']['AuthInput2'];
            AddressList: components['schemas']['KTAddressListTransformer'];
            /**
             * @description base64 encoded AES-GCM encrypted secret using the DeviceSecret as key
             * @example dzOtLW5psxgB8oNc8On...oFRykab4EW1ka3GtQPF9x
             */
            EncryptedSecret: string;
        };
        SignedKeyListInputWrapper: {
            SignedKeyList: components['schemas']['SignedKeyListInput'];
        };
        UpdateKeyInput: {
            /** @example <base64_encoded_key_salt> */
            KeySalt: string;
            Keys: {
                /** @example G1MbEt3Ep5P_EWz8WbHVAOl_6h== */
                ID?: string;
                /** @example -----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK----- */
                PrivateKey?: string;
            }[];
            UserKeys: {
                /** @example G1MbEt3Ep5P_EWz8WbHVAOl_6h== */
                ID?: string;
                /** @example -----BEGIN PGP PRIVATE KEY BLOCK-----.* */
                PrivateKey?: string;
            }[];
            /**
             * @description If org admin (legacy scheme) that can decrypt org key
             * @example -----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK-----
             */
            OrganizationKey: string;
            Auth: components['schemas']['AuthInput2'];
            /**
             * @description Optional, for inline re-authentication
             * @example <base64_encoded_ephemeral>
             */
            ClientEphemeral: string;
            /**
             * @description Optional, for inline re-authentication
             * @example <base64_encoded_proof>
             */
            ClientProof: string;
            /**
             * @description Optional, for inline re-authentication
             * @example <hex_encoded_session_id>
             */
            SRPSession: string;
            /**
             * @description Optional, for inline re-authentication, either this or the FIDO2 object
             * @example 123456 or recovery code
             */
            TwoFactorCode: string;
            FIDO2: components['schemas']['Fido2Input'];
            /**
             * @description Required only when the session is SSO, base64 encoded AES-GCM encrypted secret using the DeviceSecret as key
             * @example <base64_encoded_secret>
             */
            EncryptedSecret: string;
        };
        LogoRequest: {
            /**
             * The percent encoded address. Either Domain or Address are required.
             * @example noreply%40amazon.com
             */
            Address?: string | null;
            /**
             * Domain to get the logo for. Either Domain or Address are required.
             * @default null
             * @example amazon.com
             */
            Domain: string | null;
            /**
             * The size of the logo to be returned.
             * @default 32
             * @example 64
             */
            Size: number;
            /**
             * The theme being used.
             * @default light
             * @enum {string}
             */
            Mode: 'light' | 'dark';
            /**
             * The bimi-selector of the message
             * @default default
             */
            BimiSelector: string;
            /**
             * The maximum factor an image can be scaled up.
             * @default 2
             * @example 2
             * @enum {integer}
             */
            MaxScaleUpFactor: 1 | 2 | 3 | 4;
            /**
             * Format to convert SVG images to
             * @default null
             * @enum {string|null}
             */
            Format: 'png' | null;
            ComputedAddress: string;
        };
        CreateAddressInput: {
            /** @example me */
            Local: string;
            /**
             * @description Either custom domain or a protonmail domain
             * @example funoccupied.com
             */
            Domain: string;
            /**
             * @description Optional, default empty
             * @example hi
             */
            DisplayName: string;
            /**
             * @description Optional, default empty
             * @example signature
             */
            Signature: string;
            MemberID: Record<string, never>;
            RequesterMemberId?: number | null;
            AddressList: components['schemas']['KTAddressListTransformer'];
        };
        ReorderAddressesInput: {
            /** @description Will amend the order of addresses with the order of the corresponding AddressIDs */
            AddressIDs: string[];
        };
        AddressListInput: {
            AddressList: components['schemas']['KTAddressListTransformer'];
        };
        ChangeAddressTypeInput: {
            /**
             * @description 1: original, 2: Alias, 3: Custom, 4: Premium, 5: External
             * @example 3
             */
            Type: number;
            /** @default null */
            SignedKeyList: components['schemas']['SignedKeyListInput'] | null;
        };
        RenameUnverifiedAddressInput: {
            /** @example me */
            Local: string;
            /**
             * @description either custom domain or a protonmail domain
             * @example funoccupied.com
             */
            Domain: string;
            AddressList: components['schemas']['KTAddressListTransformer'];
            AddressKeys: {
                /** @example G1MbEt3Ep5P_...EWz8WbHVAOl_6h== */
                ID?: string;
                /** @example -----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK----- */
                PrivateKey?: string;
            }[];
        };
        UpdateAddressInput: {
            /**
             * @description Optional, if empty string - use default
             * @example hi
             */
            DisplayName: string;
            /**
             * @description Optional, if empty string - use default
             * @example signature
             */
            Signature: string;
        };
        UpdateEncryptionSignatureFlagsInput: {
            /** @example 1 */
            Encrypt: number;
            /** @example 1 */
            Sign: number;
            SignedKeyList: components['schemas']['KTKeyList'];
        };
        AddressIdsInput: {
            /** @description List of encrypted addressIDs */
            IDs: unknown[];
            /** @description Permissions bit to apply */
            Permissions: (1 | 2 | 8 | 16)[];
        };
        /** @description An encrypted ID */
        Id: string;
        ResetAuthDevicesInput: {
            AuthDeviceID: components['schemas']['Id'];
            EncryptedSecret: components['schemas']['BinaryString'];
            /** @description List of re-encrypted user keys secret to random generated secret (32 bytes, then hex encoded) */
            UserKeys: components['schemas']['ResetAuthDevicesUserKeyDto'][];
        };
        CreateMemberKeysInput: {
            /** @example xRvCGwFq_TW7i8FtJaGyFEq0g== */
            AddressID: string;
            /** @example -----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK----- */
            PrivateKey: string;
            /** @example -----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE----- */
            Token: string;
            /** @example -----BEGIN PGP SIGNATURE-----.*-----END PGP SIGNATURE----- */
            Signature: string;
            /** @example -----BEGIN PGP SIGNATURE-----.*-----END PGP SIGNATURE----- */
            OrgSignature: string;
            /** @example 1 */
            Primary: number;
            SignedKeyList: {
                /** @example JSON.stringify([{""SHA256Fingerprints"": [""5ab9c...900a"", ""e456a9...ac730""],""Fingerprint"": ""c93f767df53b0ca8395cfde90483475164ec6353"",""Primary"": 1,""Flags"": 3}]) */
                Data?: string;
                /** @example -----BEGIN PGP SIGNATURE-----.*-----END PGP SIGNATURE----- */
                Signature?: string;
            };
        };
        CreateScimTenantInput: {
            /** @description The password for the SCIM tenant, used for the integration with the IdP */
            Password: string;
        };
        AddNewUserKeyInput: {
            /** @example -----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK----- */
            PrivateKey: string;
            /** @example 1 */
            Primary: Record<string, never>;
        };
        CreateDomainInput: {
            /** @example funoccupied.com */
            Name: string;
            /**
             * @description True if this domain is intended for Mail usage
             * @default true
             */
            AllowedForMail: boolean;
            /**
             * @description True if this domain is intended for SSO usage
             * @default false
             */
            AllowedForSSO: boolean;
        };
        UpdateCatchAllAddressInput: {
            /**
             * @description or null to unset
             * @example <encrypted_id>
             */
            AddressID?: string | null;
            AddressList: components['schemas']['KTAddressListTransformer'];
        };
        OffsetPagination: {
            /** The page size */
            PageSize: number;
            /**
             * The page index using 0-based indexing
             * @default 0
             */
            Page: number;
        };
        SuccessfulResponse: {
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        AddGroupMemberRequest: {
            Type: components['schemas']['GroupMemberType'];
            GroupID: components['schemas']['Id'];
            Email: string;
            AddressSignaturePacket: components['schemas']['PGPSignature'];
            GroupMemberAddressPrivateKey?: components['schemas']['PGPPrivateKey'] | null;
            ActivationToken?: components['schemas']['PGPMessage'] | null;
            ProxyInstances: components['schemas']['GroupProxyInstance'][];
            Token?: components['schemas']['PGPMessage'] | null;
            Signature?: components['schemas']['PGPSignature'] | null;
        };
        CreateGroupRequest: {
            Email: string;
            Name: string;
            Permissions: components['schemas']['GroupPermissions'];
            Flags: components['schemas']['GroupFlags'];
            /** @default  */
            Description: string;
        };
        EditGroupMemberRequest: {
            Permissions: components['schemas']['GroupMemberPermissions'];
        };
        ExternalGroupMembershipsResponse: {
            Memberships: components['schemas']['ExternalGroupMembership'][];
            Total: number;
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        /** @description An encrypted ID */
        EncryptedId: string;
        GroupMembersResponse: {
            Members: components['schemas']['GroupMember'][];
            Total: number;
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        InternalGroupMembershipsResponse: {
            Memberships: components['schemas']['InternalGroupMembership'][];
            Total: number;
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        UpdateGroupRequest: {
            /** @default null */
            Name: string | null;
            /**
             * The new email for the group address
             *     As of 2024-06-03, unused, currently here just to appear in docs
             *     Will be used in the future to update the group address,
             *     to allow users with an auto-generated address to change it
             *     E.g. VPN-only users who want to use mail at a later time
             *     can set up a custom email address
             * @default null
             */
            Email: string | null;
            /** @default null */
            Permissions: components['schemas']['GroupPermissions'] | null;
            /** @default null */
            Flags: components['schemas']['GroupFlags'] | null;
            /** @default null */
            Description: string | null;
        };
        AddressKeyInput: Record<string, never>;
        AddressKeyInput2: Record<string, never>;
        AddressKeyInput3: Record<string, never>;
        AddressKeyInput4: Record<string, never>;
        UpdateFlagsInput: {
            /** @example 1 */
            Flags: number;
            SignedKeyList: components['schemas']['SignedKeyListInput'];
        };
        ReplaceAddressTokensInput: {
            /** @description List of address key tokens encrypted to the primary user key */
            AddressKeyTokens: components['schemas']['AddressKeyToken'][];
        };
        MigrateKeyInput: {
            AddressKeys: {
                /** @example xRvCGwFq_TW7i8FtJaGyFEq0g== */
                ID?: string;
                /** @example -----BEGIN PGP PRIVATE KEY BLOCK-----.* */
                PrivateKey?: string;
                /** @example -----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE----- */
                Token?: string;
                /** @example -----BEGIN PGP SIGNATURE-----.*-----END PGP SIGNATURE----- */
                Signature?: string;
            }[];
            SignedKeyLists: components['schemas']['SignedKeyListInput'][];
        };
        LegacyKeyInput: {
            /** @example -----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK----- */
            PrivateKey: string;
            SignedKeyList: components['schemas']['SignedKeyListInput'];
        };
        ReactivateUserKeyInput: {
            /** @example -----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK----- */
            PrivateKey: string;
            AddressKeyFingerprints: string[];
            SignedKeyLists: components['schemas']['SignedKeyListInput'][];
        };
        ResetUserKeyInput: {
            /**
             * @description Required if not logged in
             * @example user_name
             */
            Username: string;
            /**
             * @description Reset token
             * @example A194YN2F9R
             */
            Token: string;
            /** @example -----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK----- */
            PrimaryKey: string;
            /**
             * @description RANDOMLY generated client-side
             * @example <base64_encoded_key_salt>
             */
            KeySalt: string;
            AddressKeys: {
                /** @example xRvCGwFq_TW7i8FtJaGyFEq0g== */
                AddressID?: string;
                /** @example -----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK----- */
                PrivateKey?: string;
                /**
                 * @description For migrated accounts
                 * @example -----BEGIN PGP MESSAGE-----.*
                 */
                Token?: string;
                /**
                 * @description For migrated accounts
                 * @example ----BEGIN PGP SIGNATURE-----.*
                 */
                Signature?: string;
                SignedKeyList?: components['schemas']['SignedKeyListInput'];
            }[];
            Auth: components['schemas']['AuthInput2'];
            AddressList: components['schemas']['KTAddressListTransformer'];
            /** @default null */
            OrgPrimaryUserKey: string | null;
            /** @default null */
            OrgActivationToken: string | null;
        };
        CreateMemberInput: {
            /** @example Jason */
            Name: string;
            /**
             * @description Use only if Type is 2=MANAGED
             * @example 0
             */
            Private: number;
            /** @example 1073741824 */
            MaxSpace: number;
            /** @example 0 */
            MaxVPN: number;
            /** @description Either 1=PROTON or 2=MANAGED (default) */
            Type?: components['schemas']['UserType'] | null;
            /**
             * @description Use only if type is 1=PROTON
             * @example user_name
             */
            Username: string;
            /** @description Invitation object if created using magic link */
            Invitation?: components['schemas']['MagicLinkInvitationInput'] | null;
            Auth: components['schemas']['AuthInfoInput'];
            /**
             * @default 0
             * @enum {integer}
             */
            MaxAI: 0 | 1;
            /**
             * @default 0
             * @enum {integer}
             */
            MaxLumo: 0 | 1;
        };
        CreateMemberInvitationInput: {
            /**
             * Format: email
             * @example ein@stein.com
             */
            Email: string;
            /** @example 100 */
            MaxSpace: number;
        };
        UpdateMemberInvitationInput: {
            /** @example 100 */
            MaxSpace: number;
        };
        UpdateMemberAIEntitlementInput: {
            /** @enum {integer} */
            MaxAI: 0 | 1;
        };
        AcceptMemberUnprivatizationInput: {
            /** @description The user keys encrypted to the token contained in OrgActivationToken */
            OrgUserKeys: components['schemas']['PGPPrivateKey'][];
            OrgActivationToken: components['schemas']['PGPMessage'];
        };
        RequestMemberUnprivatizationInput: {
            /**
             * @description The invitation data
             * @example {"Address":"member@internal-domain.com", "Revision":2}
             */
            InvitationData: string;
            InvitationSignature: components['schemas']['PGPSignature'];
        };
        MemberManagePermissionsDto: {
            /** @description List of MemberIds */
            Ids: string[];
            Permission: components['schemas']['MemberPermission'];
            Action: components['schemas']['MemberPermissionAction'];
        };
        UpdateMemberKeysInput: {
            /**
             * Format: base64
             * @description random 16 bytes
             * @example cmFuZGJhc2U2NHN0cmluZw==
             */
            KeySalt: string;
            UserKey: components['schemas']['UserKeyInput'];
            AddressKeys: {
                /** @example xRvCGwFq_TW7i8FtJaGyFEq0g== */
                AddressID?: string;
                /** @example -----BEGIN PGP PRIVATE KEY BLOCK-----.* */
                PrivateKey?: string;
                /** @example -----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE----- */
                Token?: string;
                /** @example -----BEGIN PGP SIGNATURE-----.*-----END PGP SIGNATURE----- */
                Signature?: string;
                /** @example -----BEGIN PGP SIGNATURE-----.*-----END PGP SIGNATURE----- */
                OrgSignature?: string;
                SignedKeyList?: {
                    /** @example JSON.stringify([{""SHA256Fingerprints"": [""5ab9c...900a"", ""e456a9...ac730""],""Fingerprint"": ""c93f767df53b0ca8395cfde90483475164ec6353"",""Primary"": 1,""Flags"": 3}]) */
                    Data?: string;
                    /** @example -----BEGIN PGP SIGNATURE-----.*-----END PGP SIGNATURE----- */
                    Signature?: string;
                };
            }[];
            AddressList: components['schemas']['KTAddressListTransformer'];
            Auth: components['schemas']['AuthInfoInput2'];
        };
        UnprivatizeMemberInput: {
            /** @deprecated */
            UserKey?: components['schemas']['UnprivatizeMemberUserKeyDto'] | null;
            /** @description All active member's user keys, with a signed and encrypted token to access them via the org key */
            UserKeys?: components['schemas']['UnprivatizeMemberUserKeyDto'][] | null;
            /** @description A token and signature for each address key to access them via the org key */
            AddressKeys: components['schemas']['UnprivatizeMemberAddressKeyDto'][];
        };
        UpdateOrganizationKeyBackupInput: {
            /**
             * @description organization private key encrypted with backup password hash
             * @example -----BEGIN PGP PRIVATE KEY BLOCK-----*-----BEGIN PGP PRIVATE KEY BLOCK-----
             */
            PrivateKey: string;
            /**
             * Format: base64
             * @description random 16 bytes
             * @example cmFuZGJhc2U2NHN0cmluZw==
             */
            KeySalt: string;
            /**
             * Format: base64
             * @description Optional, for inline re-authentication
             * @example <base64_encoded_ephemeral>
             */
            ClientEphemeral: string;
            /**
             * Format: base64
             * @description Optional, for inline re-authentication
             * @example <base64_encoded_proof>
             */
            ClientProof: string;
            /**
             * Format: hex
             * @description Optional, for inline re-authentication
             * @example <hex_encoded_session_id>
             */
            SRPSession: string;
            /**
             * @description Optional, for inline re-authentication, either this or the FIDO2 object
             * @example 123456 or recovery code
             */
            TwoFactorCode: string;
            /** @description Optional, for inline re-authentication, either this or the TwoFactorCode */
            FIDO2: {
                /** @description The same AuthenticationOptions received as a challenge from the server */
                AuthenticationOptions?: Record<string, never>;
                /**
                 * Format: base64
                 * @description clientData (base64) returned from the client authentication library
                 */
                ClientData?: string;
                /**
                 * Format: base64
                 * @description authenticatorData (base64) returned from the client authentication library
                 */
                AuthenticatorData?: string;
                /**
                 * Format: base64
                 * @description signature (base64) returned from the client authentication library
                 */
                Signature?: string;
                /** @description CredentialID used */
                CredentialID?: Record<string, never>[];
            };
        };
        UpdateOrganizationNameInput: {
            /**
             * @description organization name, maximum 40 characters
             * @example E-Corp
             */
            Name: string;
        };
        UpdateOrganizationEmailInput: {
            /**
             * Format: email
             * @description organization email, can be null
             * @example contact@e-corp.com
             */
            Email: string;
        };
        UpdateOrganizationTwoFactorGracePeriodInput: {
            /**
             * @description number of seconds before 2FA enforced
             * @example 86400
             */
            GracePeriod: number;
        };
        ReplaceOrganizationKeysInput: {
            /**
             * Format: base64
             * @description Optional, for inline re-authentication
             * @example <base64_encoded_ephemeral>
             */
            ClientEphemeral: string;
            /**
             * Format: base64
             * @description Optional, for inline re-authentication
             * @example <base64_encoded_proof>
             */
            ClientProof: string;
            /**
             * Format: hex
             * @description Optional, for inline re-authentication
             * @example <hex_encoded_session_id>
             */
            SRPSession: string;
            /**
             * @description Optional, for inline re-authentication, either this or the FIDO2 object
             * @example 123456 or recovery code
             */
            TwoFactorCode: string;
            /** @description Optional, for inline re-authentication, either this or the TwoFactorCode */
            FIDO2: {
                /** @description The same AuthenticationOptions received as a challenge from the server */
                AuthenticationOptions?: Record<string, never>;
                /**
                 * Format: base64
                 * @description clientData (base64) returned from the client authentication library
                 */
                ClientData?: string;
                /**
                 * Format: base64
                 * @description authenticatorData (base64) returned from the client authentication library
                 */
                AuthenticatorData?: string;
                /**
                 * Format: base64
                 * @description signature (base64) returned from the client authentication library
                 */
                Signature?: string;
                /** @description CredentialID used */
                CredentialID?: Record<string, never>[];
            };
            /**
             * @description organization private key encrypted with backup password hash
             * @example -----BEGIN PGP PRIVATE KEY BLOCK-----*-----BEGIN PGP PRIVATE KEY BLOCK-----
             */
            PrivateKey: string;
            /**
             * @description backup private key encrypted with backup password hash
             * @example -----BEGIN PGP PRIVATE KEY BLOCK-----*-----BEGIN PGP PRIVATE KEY BLOCK-----
             */
            BackupPrivateKey: string;
            /**
             * Format: base64
             * @description random 16 bytes
             * @example cmFuZGJhc2U2NHN0cmluZw==
             */
            BackupKeySalt: string;
            /** @description For legacy key users: array of UserKey and AddressKey IDs and tokens */
            Tokens: {
                /**
                 * Format: encrypted string
                 * @example G1MbEt3Ep5P_EWz8WbHVAOl_6h==
                 */
                ID?: string;
                /** @example -----BEGIN PGP MESSAGE-----*-----END PGP MESSAGE----- */
                Token?: string;
            }[];
            /** @description For migrated key users */
            Members: {
                /**
                 * Format: encrypted string
                 * @example G1MbEt3Ep5P_EWz8WbHVAOl_6h==
                 */
                ID?: string;
                /** @description Array of UserKey IDs and tokens */
                UserKeyTokens?: {
                    /**
                     * Format: encrypted string
                     * @example G1MbEt3Ep5P_EWz8WbHVAOl_6h==
                     */
                    ID?: string;
                    /** @example -----BEGIN PGP MESSAGE-----*-----END PGP MESSAGE----- */
                    Token?: string;
                }[];
                /** @description Array of AddressKey IDs, tokens, and signatures */
                AddressKeyTokens?: {
                    /**
                     * Format: encrypted string
                     * @example G1MbEt3Ep5P_EWz8WbHVAOl_6h==
                     */
                    ID?: string;
                    /** @example -----BEGIN PGP MESSAGE-----*-----END PGP MESSAGE----- */
                    Token?: string;
                    /** @example -----BEGIN PGP SIGNATURE-----*-----END PGP SIGNATURE----- */
                    Signature?: string;
                    /** @example -----BEGIN PGP SIGNATURE-----*-----END PGP SIGNATURE----- */
                    OrgSignature?: string;
                }[];
            }[];
            /**
             * @description Token needed to unlock the organization key, encrypted to the user key of the current user
             * @default null
             * @example -----BEGIN PGP MESSAGE-----*-----END PGP MESSAGE-----
             */
            Token: components['schemas']['PGPMessage'] | null;
            /**
             * @description Signature of the token made by the user key of the current user
             * @default null
             * @example -----BEGIN PGP SIGNATURE-----*-----END PGP SIGNATURE-----
             */
            Signature: components['schemas']['PGPSignature'] | null;
            /**
             * @description Invite all other private admins to the new key
             * @default null
             */
            AdminInvitations: components['schemas']['ReplaceOrganizationKeyInvitationDto'][] | null;
            /**
             * @description Activate new key for all other non-private admins
             * @default null
             */
            AdminActivations: components['schemas']['ReplaceOrganizationKeyActivationDto'][] | null;
        };
        ActivateOrganizationKeyInput: {
            /**
             * @description organization private key encrypted with mailbox password hash
             * @default null
             * @example -----BEGIN PGP PRIVATE KEY BLOCK-----*-----BEGIN PGP PRIVATE KEY BLOCK-----
             */
            PrivateKey: string | null;
            /**
             * Format: base64
             * @description For passwordless key, the key packet needed to unlock the key, encrypted to the user key
             * @default null
             * @example TG9yZW0gaXBzdW0...
             */
            TokenKeyPacket: string | null;
            /**
             * @description For passwordless key, signature of the token key packet
             * @default null
             * @example -----BEGIN PGP SIGNATURE-----*-----END PGP SIGNATURE-----
             */
            Signature: string | null;
        };
        MigrateOrganizationKeysInput: {
            PrivateKey: components['schemas']['PGPPrivateKey'];
            Token: components['schemas']['PGPMessage'];
            Signature: components['schemas']['PGPSignature'];
            /**
             * @description Activate key for other active private admins
             * @default null
             */
            AdminInvitations: components['schemas']['MigrateOrganizationKeyInvitationDto'][] | null;
            /**
             * @description Activate new key for all other non-private admins
             * @default null
             */
            AdminActivations: components['schemas']['MigrateOrganizationKeyActivationDto'][] | null;
        };
        UpdateOrgKeyFingerprintSignatureInput: {
            Signature: components['schemas']['PGPSignature'];
            AddressID: components['schemas']['Id'];
        };
        OrganizationSettings: {
            /**
             * @description Whether to show organization name in sidebar or not
             * @default false
             * @example true
             */
            ShowName: boolean;
            /**
             * @description Whether to show the Scribe writing assistant or not
             * @default true
             * @example true
             */
            ShowScribeWritingAssistant: boolean;
            /**
             * @description Whether the video conferencing feature is enabled or not
             * @default true
             * @example true
             */
            VideoConferencingEnabled: boolean;
            /** @default null */
            LogoID: string | null;
        };
        OrganizationLogo: {
            /**
             * @description The base64 encrypted logo
             * @example iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAAAXNSR0IArs4c6QAAAA1JREFUGFdjyPH+/x8ABZMCtpUrn90AAAAASUVORK5CYII=
             */
            Image: string;
        };
        Sso: {
            /**
             * @description IdP URL. Optional for eduGAIN SSO configurations
             * @example https://account.buck.proton.black
             */
            SSOURL: string;
            /**
             * @description SSOEntityID URL
             * @example https://account.buck.proton.black
             */
            SSOEntityID: string;
            /**
             * @description Blob content of the certificate. Optional for eduGAIN SSO configurations
             * @example -----BEGIN CERTIFICATE-----...
             */
            Certificate: string;
            /**
             * @description The encrypted domain id
             * @example X_bSECsnvCSHHR44lXWMDOYDiZpbTUzqnQFyf_pqDq-JjXxXJCv_jQmSOLhD3e3A==
             */
            DomainID: string;
            SCIMOauthClientID?: number | null;
            /**
             * @description Issuer ID (our side)
             * @example https://sso.proton.me/sp
             */
            IssuerID: string;
            /**
             * @description Reply (ACS) URL
             * @example https://sso.proton.me/auth/saml
             */
            CallbackURL: string;
            /**
             * @description Allowed domain name
             * @example example.com
             */
            AllowedDomain: string;
            /**
             * @description Whether this SSO configuration is enabled or not
             * @default true
             * @example true
             */
            Enabled: boolean;
            /**
             * @description Whether this SSO configuration is for a regular IdP (1) or eduGain (2)
             * @default 1
             * @example 1
             */
            Type: number;
            /**
             * @description eduGAIN affiliations allowed by the SSO configuration in case of eduGAIN setup
             * @default []
             */
            EdugainAffiliations: string[];
            SsoId?: components['schemas']['Id'] | null;
            SendingSubject: boolean;
        };
        SsoXml: {
            /**
             * @description the encrypted domain id
             * @example X_bSECsnvCSHHR44lXWMDOYDiZpbTUzqnQFyf_pqDq-JjXxXJCv_jQmSOLhD3e3A==
             */
            DomainID: string;
            /**
             * @description Base64 encoded XML blob
             * @example
             */
            XML: string;
        };
        SsoUrl: {
            /**
             * @description the encrypted domain id
             * @example X_bSECsnvCSHHR44lXWMDOYDiZpbTUzqnQFyf_pqDq-JjXxXJCv_jQmSOLhD3e3A==
             */
            DomainID: string;
            /**
             * @description full URL to SAML metadata
             * @example
             */
            MetadataURL: string;
        };
        PatchNewsInput: {
            /**
             * @description Proton Company announcements
             * @default null
             */
            Announcements: boolean | null;
            /**
             * @deprecated
             * @description Proton Product announcements
             * @default null
             */
            Features: boolean | null;
            /**
             * @description Proton newsletter
             * @default null
             */
            Newsletter: boolean | null;
            /**
             * @description Proton beta announcements
             * @default null
             */
            Beta: boolean | null;
            /**
             * @description Proton for Business newsletter
             * @default null
             */
            Business: boolean | null;
            /**
             * @description Proton offers and promotions
             * @default null
             */
            Offers: boolean | null;
            /**
             * @description Proton new email notifications
             * @default null
             */
            NewEmailNotif: boolean | null;
            /**
             * @description Proton welcome emails
             * @default null
             */
            Onboarding: boolean | null;
            /**
             * @description Proton user surveys
             * @default null
             */
            UserSurveys: boolean | null;
            /**
             * @description Proton Mail and Calendar new features
             * @default null
             */
            InboxNews: boolean | null;
            /**
             * @description Proton VPN new features
             * @default null
             */
            VpnNews: boolean | null;
            /**
             * @description Proton Drive new features
             * @default null
             */
            DriveNews: boolean | null;
            /**
             * @description Proton Pass new features
             * @default null
             */
            PassNews: boolean | null;
            /**
             * @description Proton Wallet new features
             * @default null
             */
            WalletNews: boolean | null;
            /**
             * @description In app notifications
             * @default null
             */
            InAppNotifications: boolean | null;
        };
        UpdateNewsInput: {
            /**
             * @description
             *                 16-bit bitmap
             *                 1:    announcements
             *                 2:    features
             *                 4:    newsletter
             *                 8:    beta
             *                 16:   business
             *                 32:   offers
             *                 64:   new mail notification
             *                 128:  onboarding
             *                 256:  user surveys
             *                 512:  inbox features
             *                 1024: vpn features
             *                 2048: drive features
             *                 4096: pass features
             *                 8192: wallet features
             *                 The rest are currently unused.
             * @example 255
             */
            News: number;
        };
        UpdateHideSidePanelInput: {
            /** @enum {integer} */
            HideSidePanel: 0 | 1;
        };
        /** Theme */
        Theme: {
            /**
             * @description Which theme mode to use (auto, dark, light)
             * @example 1
             */
            Mode: number;
            /**
             * @description What theme to use in light mode
             * @example 1
             */
            LightTheme: number;
            /**
             * @description What theme to use in dark mode
             * @example 1
             */
            DarkTheme: number;
            /**
             * @description Which font face to use
             * @example 1
             */
            FontFace: number;
            /**
             * @description Which font size to use
             * @example 1
             */
            FontSize: number;
            /**
             * @description Bitmap corresponding to which features are enabled and disabled
             * @example 1
             */
            Features: number;
        };
        /** SessionAccountRecoveryInput */
        SessionAccountRecoveryInput: {
            /**
             * @description Possible values:<br>- 0: disable<br>- 1: enable
             * @example 1
             * @enum {integer}
             */
            SessionAccountRecovery: 0 | 1;
        };
        /** AIAssistantFlagsInput */
        AIAssistantFlagsInput: {
            AIAssistantFlags: components['schemas']['AIAssistantFlags'];
        };
        UpdateMemberLumoEntitlementInput: {
            /** @enum {integer} */
            MaxLumo: 0 | 1;
        };
        /** ProductDisabledInput */
        ProductDisabledInput: {
            /** @description Possible values:<br>- 1: Mail<br>- 2: VPN<br>- 3: Calendar<br>- 4: Drive<br>- 5: Pass <br>- 6: Wallet */
            Product: number;
            Disabled: number;
        };
        UpdateScimTenantInput: {
            /** @description The password for the SCIM tenant, used for the integration with the IdP. Unset or null will not modify the current password */
            Password?: string | null;
            /**
             * @description State of the SCIM integration: 0 for disabled, 1 for enabled
             * @example 1
             */
            State: number;
        };
        IdpResponseVO: {
            SAMLResponse: string;
        };
        CreateCredentiallessUserInput: {
            /**
             * @description Optional field, frontend fingerprints
             * @default null
             */
            Payload: {
                /**
                 * Format: base64
                 * @example ++3dreJ+cHBSeEXvkxjLCRrf1...
                 */
                'random-id-1'?: string;
                /**
                 * Format: base64
                 * @example Xv5df3dreJ+cHBvkxjSeEXvkx...
                 */
                'random-id-2'?: string;
                /**
                 * Format: base64
                 * @example <base64_encoded_android_attestation_token>
                 */
                'random-id-3'?: string;
                /**
                 * Format: base64
                 * @example <base64_encoded_ios_device_check_token>
                 */
                'random-id-4'?: string;
            } | null;
        };
        SendInvitationsInput: {
            /** @default [] */
            Recipients: string[];
        };
        RegisterDeviceInput: {
            /** @example 2335fcc381ef78a20e580065...515f4e8 */
            DeviceToken: string;
            Environment: components['schemas']['Environment'];
            /** @default null */
            PublicKey: components['schemas']['PGPPublicKey'] | null;
            /** @default null */
            PingNotificationStatus: components['schemas']['PingNotificationStatus'] | null;
            /** @default null */
            PushNotificationStatus: components['schemas']['PushNotificationStatus'] | null;
        };
        UploadAttachment: {
            /**
             * @description Token return from create ticket api
             * @example 4w350m3h4x0r
             */
            Token: string;
            /** @description The body of attachment */
            Body: string;
            Product: components['schemas']['Product'];
        };
        CancelPlanReport: {
            /**
             * @description The reason for cancellation
             * @example other
             */
            Reason: string;
            /** @description A message describing the reason */
            Message: string;
            /** @description The contact email address */
            Email: string;
            /** @example iOS */
            OS: string;
            /** @example 8.0.3 */
            OSVersion: string;
            /** @example Safari */
            Browser: string;
            /** @example 8 */
            BrowserVersion: string;
            /** @example Web */
            Client: string;
            /** @example 2.0.0 */
            ClientVersion: string;
            /**
             * @description 1: email, 2: VPN, 3: calendar, 4: drive, 5: pass
             * @example 2
             */
            ClientType: number;
            Tags: string[];
        };
        Stream: {
            /** @default null */
            Users: components['schemas']['EventCollectionOutput'];
            Addresses: components['schemas']['EventCollectionOutput'];
            Settings: components['schemas']['EventCollectionOutput'];
            /** @default null */
            IncomingDefaults: components['schemas']['EventCollectionOutput'];
            /** true if there is more events to pull */
            More: boolean;
            /** true if all data should be refreshed */
            Refresh: boolean;
            EventID: components['schemas']['Id'];
            /**
             * ProtonResponseCode
             * @example 1000
             * @enum {integer}
             */
            Code: 1000;
        };
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>1</td><td>True</td></tr><tr><td>0</td><td>False</td></tr></table></details></details>
         * @enum {integer}
         */
        BoolInt: 1 | 0;
        FeedbackVO: {
            FeedbackType: string;
            Score: number;
            Feedback?: string | null;
        };
        NotificationRequest: {
            FullScreenImageSupport?: string | null;
            FullScreenImageWidth?: number | null;
            FullScreenImageHeight?: number | null;
            SupportedFullScreenImageFormats: string[];
            Null: boolean;
        };
        PatchInput: {
            /**
             * @description possible values:
             *              * - 0 => collapse and hide sub-folders
             *              * - 1 => expanded and show sub-folders
             * @default null
             * @enum {integer|null}
             */
            Expanded: 1 | 0 | null;
            /**
             * @description possible values:
             *              * - 0 => no desktop/email notifications
             *              * - 1 => notifications, folders only
             * @default null
             * @enum {integer|null}
             */
            Notify: 1 | 0 | null;
        };
        LabelIDs: {
            LabelIDs: components['schemas']['LabelID'][];
        };
        /** Signed Key List */
        KTKeyList: {
            /**
             * @description Starting Epoch ID for SKL. Can be null, if the epoch is not yet released
             * @example 125
             */
            MinEpochID?: number | null;
            /**
             * @description Ending Epoch ID for SKL. Can be null, if the epoch is not yet released
             * @example 241
             */
            MaxEpochID?: number | null;
            /**
             * @description If epoch is not yet released this will be a future epoch ID
             * @example 265
             */
            ExpectedMinEpochID?: number | null;
            /**
             * @description JSON-encoded content of the SKL. If null, this SKL contains an ObsolescenceToken
             * @example [{""Fingerprint"": ""c93f767df53b0ca8395cfde90483475164ec6353"",""Primary"": 0,""Flags"": 1},{""Fingerprint"": ""fde90483475164ec6353c93f767df53b0ca8395c"",""Primary"": 1,""Flags"": 3}]
             */
            Data?: string | null;
            /**
             * @description Hex token to prove the obsolescence of the signed key list in the merkle tree or null. The first 16 characters are a committed big-endian hex-encoded unix timestamp, remaining is random
             * @example 000000006243460497f838b649439b5f29c4e73014b9da096d0fe3ed
             */
            ObsolescenceToken?: string | null;
            /**
             * @description Armored OpenPGP signature for the data. If null, proof contains an obsolescenceToken
             * @example -----BEGIN PGP SIGNATURE-----.*-----END PGP SIGNATURE-----
             */
            Signature?: string | null;
            /**
             * @description Identifier of the revision version
             * @example 42
             */
            Revision: number;
        };
        User: {
            /** @example MJLke8kWh1BBvG95JBIrZvzpgsZ94hNNgjNHVyhXMiv4g9cn6SgvqiIFR5cigpml2LD_iUk_3DkV29oojTt3eA== */
            ID: string;
            /** @example jason */
            Name?: string | null;
            /** @example jason */
            DisplayName?: string | null;
            /** @example jason@proton.me */
            Email: string;
            /** @example USD */
            Currency: string;
            /** @example 0 */
            Credit: number;
            /**
             * @description 1: Proton (full), 2: Managed, 3: External, 4: CredentialLess
             * @example 0
             */
            Type: number;
            /** @example 1654615966 */
            CreateTime: number;
            /**
             * Format: int64
             * @description Max space (in bytes)
             * @example 10737418240
             */
            MaxSpace: number;
            /**
             * Format: int64
             * @description Max upload space (in bytes)
             * @example 26214400
             */
            MaxUpload: number;
            /**
             * Format: int64
             * @description Used space (in bytes)
             * @example 70376905
             */
            UsedSpace: number;
            ProductUsedSpace: components['schemas']['UserUsage'];
            /** @description 1 when the user's member has an AI seat, 0 otherwise */
            NumAI: number;
            /** @description the number of lumo seats attributed to the user, 0 otherwise */
            NumLumo: number;
            /** @example 2 */
            Role: number;
            /** @example 1 */
            Private: number;
            /**
             * @example 1
             * @enum {integer}
             */
            ToMigrate: 0 | 1;
            /**
             * @description
             *      *          0: Mnemonic is disabled,
             *      *          1: Mnemonic is enabled but not set,
             *      *          2: Mnemonic is enabled but needs to be re-activated,
             *      *          3: Mnemonic is enabled and set
             * @example 1
             */
            MnemonicStatus: number;
            /**
             * @description Subscribed (bitmap): `1`: User has a mail subscription, `4`: User has a VPN subscription
             * @example 5
             */
            Subscribed: number;
            /**
             * @description Activated services (bitmap):
             *      *          `1`: User has the mail product activated,
             *      *          `4`: User has the VPN activated
             * @example 5
             */
            Services: number;
            Delinquent: components['schemas']['DelinquentState'];
            Keys: components['schemas']['UserKey'];
            Flags: {
                protected?: boolean;
                'onboard-checklist-storage-granted'?: boolean;
                'has-temporary-password'?: boolean;
                'test-account'?: boolean;
                'no-login'?: boolean;
                'recovery-attempt'?: boolean;
                sso?: boolean;
                /** @description User have no or only external addresses */
                'no-proton-address'?: boolean;
            };
        };
        UserKey: {
            /** @example IlnTbqicN-2HfUGIn-ki8bqZfLqNj5ErUB0z24Qx5g-4NvrrIc6GLvEpj2EPfwGDv28aKYVRRrSgEFhR_zhlkA== */
            ID: string;
            /** @example 3 */
            Version: number;
            /** @example -----BEGIN PGP PRIVATE KEY BLOCK-----*-----END PGP PRIVATE KEY BLOCK----- */
            PrivateKey: string;
            /**
             * @description Deprecated! Please compute the fingerprint from the key
             * @example c93f767df53b0ca8395cfde90483475164ec6353
             */
            Fingerprint: string;
            /** @example 1 */
            Primary: number;
            /**
             * @description Inactive keys (0) are kept for reactivation only, they are not trusted, and should not be unlocked
             * @example 1
             */
            Active: number;
            /**
             * @description Base64-encoded secret, made up of 32 random bytes
             * @example 1H8EGg3J1...Qwk243hf
             */
            RecoverySecret: string;
            /** @example -----BEGIN PGP SIGNATURE-----... */
            RecoverySecretSignature: string;
        };
        AddressUser: {
            /**
             * @description Encrypted address ID
             * @example qmhrlFY24BhSHiFplF0B7G_cMVLi1sokaWIhfNaee6dRtdIZPYnqgI4-MpAb8h3JhOOykKv8ZsuTH8X_SrUZSg==
             */
            ID: string;
            /**
             * @description Encrypted domain ID
             * @example l8vWAXHBQmv0u7OVtPbcqMa4iwQaBqowINSQjPrxAr-Da8fVPKUkUcqAq30_BCxj1X0nW70HQRmAa-rIvzmKUA==
             */
            DomainID?: string | null;
            /** @example jason@protonmail.dev */
            Email: string;
            /**
             * @description 0 or 1
             * @example 1
             */
            Send: number;
            /**
             * @description 0 or 1
             * @example 1
             */
            Receive: number;
            /**
             * @description Bitflag of: 1 - ReceiveAll, 2 - SendAll, 4 - AutoResponder, 8 - ReceiveOrg, 16 - SendOrg
             * @example 7
             */
            Permissions: number;
            /**
             * @description 2 if the address is invalid, 1 if the address is internal or has been verified, otherwise 0
             * @example 1
             */
            ConfirmationState: number;
            /**
             * @description 0: Disabled, 1:Enabled, 2:Deleting
             * @example 1
             */
            Status: number;
            /**
             * @description 1: Original, 2: Alias, 3: Custom, 4: Premium, 5: External
             * @example 1
             */
            Type: number;
            /**
             * @deprecated
             * @description Replaced by "Priority"
             * @example 1
             */
            Order: number;
            /**
             * @description Ordered list, lowest first. Can start with a number > 1.
             * @example 1
             */
            Priority: number;
            /**
             * @description Can be empty but not null
             * @example D L'u, P.D. 定超
             */
            DisplayName: string;
            /**
             * @description Can be empty but not null
             * @example hi there
             */
            Signature: string;
            /**
             * @deprecated
             * @description 0 or 1
             * @example 1
             */
            HasKeys: number;
            /**
             * @description True if the address is a catch-all
             * @example false
             */
            CatchAll: Record<string, never>;
            /**
             * @description True if the domain's record point to Proton servers
             * @example true
             */
            ProtonMX: Record<string, never>;
            SignedKeyList: components['schemas']['KTKeyList'];
            Keys: components['schemas']['AddressKey'][];
            /**
             * @description Bitflags representing noencrypt/nosign
             * @example 48
             */
            Flags: number;
        };
        /** Signed Key List */
        KTAddressListTransformer: {
            /**
             * @description JSON-encoded content of the SAL
             * @example [{"Email": "test@example.com","Flags": 1}]
             */
            Data: string;
            /**
             * @description The armored signature over the JSON-serialized data with the primary user key
             * @example -----BEGIN PGP SIGNATURE-----.*-----END PGP SIGNATURE-----
             */
            Signature: string;
        };
        /** LinkResponse */
        SwitchAddressesOrganizationPermissionsTransformer: {
            AddressID: string;
            Response: {
                /** @example 13043 */
                Code?: number;
                /** @example Address does not exist */
                Error?: string;
                Details?: Record<string, never>;
            };
        };
        AuthDeviceOutput: {
            ID: components['schemas']['Id'];
            State: components['schemas']['AuthDeviceState'];
            /** @description The device name */
            Name: string;
            LocalizedClientName: components['schemas']['TranslatedStringInterface'];
            /** @description The device platform */
            Platform?: string | null;
            /**
             * Format: date-time
             * @description Time the device was created
             */
            CreateTime: string;
            /**
             * Format: date-time
             * @description Time the device was activated
             */
            ActivateTime?: string | null;
            /**
             * Format: date-time
             * @description Time the device was rejected
             */
            RejectTime?: string | null;
            /**
             * Format: date-time
             * @description Time the device was last used (approximately to the hour)
             */
            LastActivityTime: string;
            /** @description PGP message encrypted to the AddressID containing a 64-char random hex-encoded token */
            ActivationToken?: components['schemas']['PGPMessage'] | null;
            ActivationAddressID?: components['schemas']['Id'] | null;
            MemberID?: components['schemas']['Id'] | null;
            /**
             * @description DeviceToken of the created device
             * @example wfih0367aa7dc0359bf5c42d15a93e6c
             */
            DeviceToken?: string | null;
        };
        DomainTransformer: {
            /** @example BKiAUbkGnUPiy2c37zjon_g== */
            ID: string;
            /** @example protonvpn.ch */
            DomainName: string;
            /**
             * @description 1 is Proton, 2 is user-assigned Proton subdomain, 3 is custom domain
             * @example 3
             */
            Type: number;
            /**
             * @description 0 is default, 1 is active (verified), 2 is warn (dns issue)
             * @example 1
             */
            State: number;
            /** @example 1556136548 */
            LastActiveTime: number;
            /** @example 1446095611 */
            CheckTime: number;
            /** @example 1554807818 */
            WarnTime: number;
            /** @example protonmail-verification=c701a28e2bdd3358c6dda71a3008b806e41950b0 */
            VerifyCode: string;
            /**
             * @description 0 is default, 1 is has code but wrong, 2 is good
             * @example 2
             */
            VerifyState: number;
            /**
             * @description 0 is default, 1 is set but no us, 2 has us but priority is wrong, 3 is good
             * @example 3
             */
            MxState: number;
            /**
             * @description 0 is default, 1 and 2 means detected a record but wrong, 3 is good
             * @example 3
             */
            SpfState: number;
            /**
             * @description 0 is default, 1 and 2 means detected record but wrong, 3 is good, 4 is good and relaxed policy
             * @example 3
             */
            DmarcState: number;
            DKIM: {
                /**
                 * @description 0 is default, 1 and 2 means detected record but wrong, 3 means key is wrong, 4 is good, 5 is good and inherited from parent
                 * @example 4
                 */
                State?: number;
                /** @description Contains the domain's currently configured DKIM public keys and metadata */
                Config?: {
                    /** @example protonmail2._domainkey */
                    Hostname?: string;
                    /** @example protonmail2.domainkey.dhgge2q6ksokiqwomdn23r6nnjjwiwblsujm6bjdnj3hhaxlktpqa.domains.proton.ch. */
                    CNAME?: string;
                    Key?: {
                        /** @example BKiAUbkGnUPiy2c37zjon_g== */
                        ID?: string;
                        /** @example protonmail2 */
                        Selector?: string;
                        /** @example MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0zc0kqr7bnFOD1TmsjJmYthy41QeI1cqga5yU8... */
                        PublicKey?: string;
                        /**
                         * @description 0 is RSA1024, 1 is RSA2048
                         * @example 1
                         */
                        Algorithm?: number;
                        /**
                         * @description 0 is active, 1 is pending, 2 is retired, 3 is deceased
                         * @example 2
                         */
                        State?: number;
                        /**
                         * @description 0 is unset, 1 is good, 2 is invalid
                         * @example 1
                         */
                        DNSState?: number;
                        /** @example 1687942995 */
                        CreateTime?: number;
                    };
                }[];
            };
            Flags: {
                /** @description If the domain is intended to be used for custom addresses */
                'mail-intent'?: boolean;
                /** @description If the domain is intended to be used for SSO integration */
                'sso-intent'?: boolean;
            };
        };
        /** GroupMemberResponse */
        GroupMemberResponse: {
            ID: components['schemas']['Id'];
            Type: components['schemas']['GroupMemberType'];
            State: components['schemas']['GroupMemberState'];
            CreateTime: number;
            GroupID: components['schemas']['Id'];
            AddressID?: components['schemas']['Id'] | null;
            Email?: string | null;
            Permissions: components['schemas']['GroupMemberPermissions'];
        };
        /** GroupResponse */
        GroupResponse: {
            ID: components['schemas']['Id'];
            Name: string;
            Address: unknown[];
            Permissions: components['schemas']['GroupPermissions'];
            CreateTime: number;
            Flags: components['schemas']['GroupFlags'];
            Description?: string | null;
        };
        MemberInfo: {
            /** @example xRvCGwFq_TW7i8FtJaGyFEq0g== */
            ID: string;
            /** @example 2 */
            Role: number;
            /**
             * @description Invited (2), Member (1) or Disabled (0)
             * @example 1
             */
            State: number;
            /** @example 1 */
            Private: number;
            /**
             * @description 1: Proton (full), 2: Managed, 3: External, 4: CredentialLess
             * @example 0
             */
            Type: number;
            /** @example 100000000 */
            MaxSpace: number;
            /** @example 0 */
            MaxVPN: number;
            /** @example Jason */
            Name: string;
            /** @example 81780955 */
            UsedSpace: number;
            /** @example 1 */
            Self: number;
            /**
             * @example 1
             * @enum {integer}
             */
            ToMigrate: 1 | 2;
            /**
             * @example 1
             * @enum {integer}
             */
            BrokenSKL: 1 | 2;
            /** @example 1 */
            Subscriber: number;
            /**
             * @example 1
             * @enum {integer}
             */
            SSO: 0 | 1;
            /**
             * @description 2FA will be required to be set after TwoFactorRequiredTime timestamp
             * @example 1679038286
             */
            TwoFactorRequiredTime: number;
            /**
             * @description bit map: 1=TOTP, 2=FIDO2
             * @example 3
             */
            '2faStatus': number;
            Keys: string[];
            /** @example -----BEGIN PUBLIC KEY BLOCK-----.*-----END PUBLIC KEY BLOCK----- */
            PublicKey: string;
            /**
             * @description Permissions bitmap
             * @example 1
             * @enum {integer}
             */
            Permissions: number;
            /** @description 0 - is not supposed to have access to org key, 1 - has access to org key, 2 - has lost access to key and needs to be re-invited, 3 - pending activation */
            AccessToOrgKey: number;
            /**
             * @description Whether or not the member has an AI seat
             * @enum {integer}
             */
            NumAI: 0 | 1;
            /** @description Unprivatization info if member is undergoing one */
            Unprivatization?: unknown[] | null;
            /** @description The number of lumo seats allocated to the member */
            NumLumo: Record<string, never>;
        };
        UpdateMemberRoleInput: {
            Role: number;
            /** @default null */
            OrganizationKeyInvitation: components['schemas']['OrganizationKeyInvitationDto'] | null;
            /** @default null */
            OrganizationKeyActivation: components['schemas']['OrganizationKeyActivationDto'] | null;
        };
        GetMemberUnprivatizationOutput: {
            /** @description State of the Unprivatization (0: declined), 1: pending, 2: ready */
            State: number;
            /**
             * @description Invitation data
             * @example {"Address":"member@internal-domain.com", "Revision":2}
             */
            InvitationData?: string | null;
            /** @description InvitationData signed with org key */
            InvitationSignature?: components['schemas']['PGPSignature'] | null;
            /** @description Email to send the invitation to */
            InvitationEmail?: string | null;
            /** @description Administrator email */
            AdminEmail: string;
            /** @description Fingerprint of the org key signed with primary address key */
            OrgKeyFingerprintSignature?: components['schemas']['PGPSignature'] | null;
            /** @description Organization public key */
            OrgPublicKey?: components['schemas']['PGPPublicKey'] | null;
            /** @description Whether the member should remain private after creation or be unprivatized */
            PrivateIntent: boolean;
        };
        /** @description
         *             An authentication logs entry.
         *             `Protection` and `ProtectionDesc` fields are optional, only present if user has High Security enabled.
         *          */
        AuthLogResponse: {
            /**
             * @description Encrypted user ID
             * @example -Bpgivr5H2qGDRiUQ4-7gm5YLf215MEgZCdzOtLW5psxgB8oNc8OnoFRykab4Z23EGEW1ka3GtQPF9xwx9-VUA==
             */
            UserID: string;
            /**
             * @description Unix timestamp of when the log happened.
             * @example 1683644736
             */
            Time: number;
            Status: components['schemas']['AuthLogStatus'];
            /**
             * @description Various values. See AuthLogEvent constants.
             * @example 23
             */
            Event: number;
            /**
             * @description Localized description (name) of the log event.
             * @example Sign in success (attempt)
             */
            Description: string;
            /** @example 192.168.0.1 */
            IP: string | null;
            /** @example web-mail@4.3.1 */
            AppVersion: string | null;
            /** @example Android 13.1, Samsung Galaxy A20 */
            Device: string | null;
            /** @example England, United Kingdom */
            Location?: string | null;
            /** @example AT&T Wireless */
            InternetProvider?: string | null;
            /**
             * @description ID of protection applied.
             *                 Can be missing. Only present if user has High Security enabled.
             *                 See AuthLogProtection enum for possible values.
             * @example 1
             */
            Protection?: components['schemas']['AuthLogProtection'] | null;
            /**
             * @description Localized description of protection applied.
             *                 Can be missing. Only present if user has High Security enabled.
             * @example Anti-bot verification
             */
            ProtectionDesc?: string | null;
        };
        Session: {
            /** @example cc0a3ec21c3af3461c9c310bf3f568795fdf6dc5 */
            UID: string;
            /** @example Web */
            ClientID: string;
            /** @example 1527262849 */
            CreateTime: number;
            /** @example IhcUWoRxdY3S-6pfk2L1oSTeZx5kvpeqcxuii8h1ic1nYnSJa11LP8DABcgsRJCwXXDjxwPFSxEGJrlrvMWFpQ== */
            MemberID: string;
            /** @example 0 */
            Revocable: number;
        };
        GetOrganizationKeysOutput: {
            /**
             * @description Organization private key encrypted with mailbox password hash
             * @example -----BEGIN PGP PRIVATE KEY BLOCK-----*-----BEGIN PGP PRIVATE KEY BLOCK-----
             */
            PrivateKey?: string | null;
            /**
             * @description If migrating to passwordless key, the private org key encrypted to the user mailbox pass
             * @example -----BEGIN PGP PRIVATE KEY BLOCK-----*-----BEGIN PGP PRIVATE KEY BLOCK-----
             */
            LegacyPrivateKey?: string | null;
            /**
             * @deprecated
             * @description Organization public key
             * @example -----BEGIN PGP PUBLIC KEY BLOCK-----*-----BEGIN PGP PUBLIC KEY BLOCK-----
             */
            PublicKey?: string | null;
            /**
             * @description Token (key + data packets) to access the passwordless organization key for this user
             * @example -----BEGIN PGP MESSAGE-----*-----END PGP MESSAGE-----
             */
            Token?: string | null;
            /**
             * @description Signature of the token secret
             * @example -----BEGIN PGP SIGNATURE-----*-----END PGP SIGNATURE-----
             */
            Signature?: string | null;
            /**
             * @description Address email of the admin that signed the token (if not the user key of the member themself)
             * @example someadmin@myorg.com
             */
            SignatureAddress?: string | null;
            /**
             * Format: encrypted string
             * @description The address ID of the address that was invited to the organization key
             */
            EncryptionAddressID?: string | null;
            /**
             * @description Signature of the SHA256 fingerprint of the organization key
             * @example -----BEGIN PGP SIGNATURE-----*-----END PGP SIGNATURE-----
             */
            FingerprintSignature?: string | null;
            /**
             * @description The email address that signed the SHA256 fingerprint of the organization key
             * @example someadmin@myorg.com
             */
            FingerprintSignatureAddress?: string | null;
            /**
             * @description 0 - is not supposed to have access to org key, 1 - has access to org key, 2 - has lost access to key and needs to be re-invited, 3 - pending activation
             * @example 1
             */
            AccessToOrgKey?: components['schemas']['MemberOrgKeyStatus'] | null;
            /** @description Whether the organization has passwordless keys or not */
            Passwordless: boolean;
        };
        GetOrganizationIdentityOutput: {
            /**
             * @description Organization public key
             * @example -----BEGIN PGP PUBLIC KEY BLOCK-----*-----BEGIN PGP PUBLIC KEY BLOCK-----
             */
            PublicKey: string;
            /**
             * @description Signature of the SHA256 fingerprint of the organization key
             * @example -----BEGIN PGP SIGNATURE-----*-----END PGP SIGNATURE-----
             */
            FingerprintSignature: string;
            /**
             * @description The email address that signed the SHA256 fingerprint of the organization key
             * @example someadmin@myorg.com
             */
            FingerprintSignatureAddress: string;
        };
        OrganizationSettings2: {
            /**
             * @description Whether to show organization name in sidebar or not
             * @default false
             * @example true
             */
            ShowName: boolean;
            /**
             * @description Whether to show the Scribe writing assistant or not
             * @default true
             * @example true
             */
            ShowScribeWritingAssistant: boolean;
            /**
             * @description Whether the video conferencing feature is enabled or not
             * @default true
             * @example true
             */
            VideoConferencingEnabled: boolean;
            /** @default null */
            LogoID: string | null;
        };
        SsoTransformer: Record<string, never>;
        Info: {
            /** @example https://sso.proton.me/sp */
            EntityID: string;
            /** @example https://sso.proton.me/auth/saml */
            CallbackURL: string;
        };
        UserSettingsTransformer: {
            Email: {
                /** @example abc@gmail.com */
                Value?: string | null;
                /** @example 0 */
                Status?: number;
                /** @example 1 */
                Notify?: number;
                /** @example 0 */
                Reset?: number;
            };
            Password: {
                /** @example 2 */
                Mode?: number;
                /**
                 * @description If set, after this time force password change
                 * @example null
                 */
                ExpirationTime?: number;
            };
            Phone: {
                /** @example +18005555555 */
                Value?: string | null;
                /** @example 0 */
                Status?: number;
                /** @example 0 */
                Notify?: number;
                /** @example 0 */
                Reset?: number;
            };
            '2FA': {
                /**
                 * @description 0 for disabled, 1 for OTP, 2 for FIDO2, 3 for both
                 * @example 3
                 */
                Enabled?: number;
                /**
                 * @description 0 for disabled, 1 for OTP, 2 for FIDO2, 3 for both
                 * @example 3
                 */
                Allowed?: number;
                /**
                 * @description If set, after this time force add 2FA
                 * @example null
                 */
                ExpirationTime?: number;
                /** @deprecated */
                U2FKeys?: {
                    /** @example A name */
                    Label?: string;
                    /** @example aKeyHandle */
                    KeyHandle?: string;
                    /** @example 0 */
                    Compromised?: number;
                }[];
                /** @description Contains the user's currently registered FIDO2 credentials. */
                RegisteredKeys?: components['schemas']['Fido2RegisteredKey'][];
            };
            /**
             * @description Bitmap informing which news the user is subscribed to:
             *       - 1 (2^0): Announcement
             *       - 2 (2^1): Features
             *       - 4 (2^2): Newsletter
             *       - 8 (2^3): Beta
             *       - 16 (2^4): Business
             *       - 32 (2^5): Offers
             *       - 64 (2^6): New mail notification
             *       - 128 (2^7): Onboarding
             * @example 244
             */
            News: number;
            /** @example en_US */
            Locale: string;
            /**
             * @description 0 => Disabled, 1 => Basic, 2 => Advanced
             * @example 2
             */
            LogAuth: number;
            /** @example रिवार में हुआ। ज檷\n Cartoon Law Services\n 1 DisneyWorld Lane\n Orlando, FL, 12345\n VAT */
            InvoiceText: string;
            /**
             * @description 0 => Comfortable, 1 => Compact
             * @example 0
             */
            Density: number;
            Theme: components['schemas']['Theme2'];
            /** @example 1 */
            ThemeType: number;
            /**
             * @description 0 => default, 1 => monday, 6 => saturday, 7 => sunday
             * @example 1
             */
            WeekStart: number;
            /**
             * @description 0 => default, 1 => DD_MM_YYYY, 2 => MM_DD_YYYY, 3 => YYYY_MM_DD
             * @example 1
             */
            DateFormat: number;
            /**
             * @description 0 => default, 1 => 24h, 2 => 12h
             * @example 1
             */
            TimeFormat: number;
            /**
             * @description 0 => Has not been welcomed, 1 => Has been welcomed
             * @example 1
             */
            Welcome: number;
            /**
             * @deprecated
             * @description (Use `Welcome`) 0 => Has not been welcomed, 1 => Has been welcomed
             * @example 1
             */
            WelcomeFlag: number;
            /**
             * @description 0 => Regular access, 1 => Beta access
             * @example 1
             */
            EarlyAccess: number;
            Flags: {
                /** @description 1 or 0 */
                Welcomed?: number;
                /** @description 1, or 0 */
                SupportPgpV6Keys?: number;
            };
            Referral: {
                /** @example https://pr.tn/ref/ERBYvlX8SC4KOyb */
                Link?: string;
                /**
                 * @description true if the user is eligible to the referral program
                 * @example true
                 */
                Eligible?: boolean;
            };
            /**
             * @description 0 or 1, 1 means device recovery enabled
             * @example 1
             */
            DeviceRecovery: number;
            /**
             * @description 0 or 1, 1 means sending telemetry enabled
             * @example 1
             */
            Telemetry: number;
            /**
             * @description 0 or 1, 1 means sending crash reports enabled
             * @example 1
             */
            CrashReports: number;
            /**
             * @description 0 or 1, 1 means hiding the side panel
             * @example 1
             */
            HideSidePanel: number;
            HighSecurity: {
                /**
                 * @description 1 => user can enable High Security, 0 => can't enable
                 * @example 1
                 */
                Eligible?: number;
                /**
                 * @description 1 => user has High Security enabled, 0 => disabled
                 * @example 1
                 */
                Value?: number;
            };
            /**
             * @description 0 or 1, 1 means session account recovery enabled
             * @example 1
             * @enum {integer}
             */
            SessionAccountRecovery: 0 | 1;
            /**
             * @description 0: unset, 1: off, 2: server-only, 3: client-only
             * @example 1
             * @enum {integer}
             */
            AIAssistantFlags: 0 | 1 | 2 | 3;
            /**
             * @deprecated
             * @description Deprecated in favour of "UsedClients". First 64 bit of bitmap informing which client the user has logged in to.
             * @example 1
             */
            UsedClientFlags: number;
            /**
             * @description List of clients the user has logged in to.
             * @example [WebAccount, WebMail, iOSDrive]
             */
            UsedClients: Record<string, never>[];
        };
        Fido2RegisteredKey: {
            /** @example fido2-u2f */
            AttestationFormat: string;
            CredentialID: Record<string, never>[];
            /** @example My security key */
            Name: string;
        };
        ScheduleSupportCallOutput: {
            /** @example https://calendly.com/proton-schedule */
            CalendlyLink: string;
        };
        AccountRecoveryAttempt: {
            /**
             * @description 0 => None, 1 => Grace, 2 => Cancelled, 3 => Insecure, 4 => Expired
             * @example 1
             */
            State: number;
            /** @example 1686834569 */
            StartTime: number;
            /** @example 1687000169 */
            EndTime: number;
            /**
             * @description 0 => None, 1 => Cancelled, 2 => Authentication
             * @example 1
             */
            Reason: number;
            /**
             * @description The session ID that triggered the process
             * @example qmi2ptbz4sefeahddjxghsxtu2orlgyf
             */
            UID: string;
        };
        VPNAuthenticationCertificateDetailedTransformer: {
            /**
             * @description Certificate serial number
             * @example 6561979746
             */
            SerialNumber: string;
            /**
             * @description Blob content of the certificate
             * @example -----BEGIN CERTIFICATE-----...
             */
            Certificate: string;
            /**
             * @description Fingerprint of the client public key
             * @example bHZDBSYbd27GFd
             */
            ClientKeyFingerprint: string;
            /**
             * @description The input or default mode
             * @example 1505758141
             */
            ExpirationTime: number;
            /**
             * @description The input or default mode
             * @example session
             */
            Mode: string;
            SessionUID: string;
            Session?: components['schemas']['Session'] | null;
            UserID: number;
            UserName: string;
            MaxTier: number;
            PublicKeyMode: string;
            PublicKey: string;
            DeviceName: string;
            Features: number;
            Groups: string[];
            RevocationTime: number;
            TwoFactor: boolean;
            RemoteSessions: {
                RemoteID?: number;
                ServerID?: number;
                StartTime?: number;
                LastRecordTime?: number;
            }[];
        };
        FeatureTransformer: {
            /** @example promo */
            Code: string;
            /**
             * @example enumeration
             * @enum {string}
             */
            Type: 'boolean' | 'integer' | 'float' | 'string' | 'enumeration' | 'mixed';
            /** @example 1 */
            Minimum: Record<string, never>;
            /** @example 100 */
            Maximum: Record<string, never>;
            /** @example false */
            Global: boolean;
            /** @example true */
            Writable: boolean;
            /** @example true */
            DefaultValue: Record<string, never>;
            /** @example true */
            Value: Record<string, never>;
            /** @example 1527262849 */
            ExpirationTime: number;
            /** @example 1527262849 */
            UpdateTime: number;
        };
        AuthInput: {
            /**
             * @description Token received from POST /auth/saml during SSO sign-in flow
             * @default null
             * @example <token_from_post_auth_saml>
             */
            SSOResponseToken: string | null;
            /**
             * @default null
             * @example einstein
             */
            Username: string | null;
            /**
             * Format: base64
             * @default null
             * @example <base64_encoded_ephemeral>
             */
            ClientEphemeral: string | null;
            /**
             * Format: base64
             * @default null
             * @example <base64_encoded_proof>
             */
            ClientProof: string | null;
            /**
             * @description Client-specific secret only necessary to access the admin panel
             * @default null
             * @example demopass
             */
            ClientSecret: string | null;
            /**
             * Format: hex
             * @default null
             * @example <hex_encoded_session_key>
             */
            SRPSession: string | null;
            /**
             * @description defaults to 0 if not present, transforms cookies into persistent cookies
             * @default null
             * @example 1
             */
            PersistentCookies: number | null;
            /**
             * @default null
             * @example 123456 or recovery code
             */
            TwoFactorCode: string | null;
            /**
             * @description Either this or the TwoFactorCode
             * @default null
             */
            FIDO2: {
                /** @description The same AuthenticationOptions received as a challenge from the server */
                AuthenticationOptions?: Record<string, never>;
                /**
                 * Format: base64
                 * @description clientData (base64) returned from the client authentication library
                 */
                ClientData?: string;
                /**
                 * Format: base64
                 * @description authenticatorData (base64) returned from the client authentication library
                 */
                AuthenticatorData?: string;
                /**
                 * Format: base64
                 * @description signature (base64) returned from the client authentication library
                 */
                Signature?: string;
                /** @description CredentialID used */
                CredentialID?: Record<string, never>[];
            } | null;
            /**
             * @description optional field, frontend fingerprints
             * @default null
             */
            Payload: {
                /**
                 * Format: base64
                 * @example ++3dreJ+cHBSeEXvkxjLCRrf1...
                 */
                'random-id-1'?: string;
                /**
                 * Format: base64
                 * @example Xv5df3dreJ+cHBvkxjSeEXvkx...
                 */
                'random-id-2'?: string;
                /**
                 * Format: base64
                 * @example <base64_encoded_android_attestation_token>
                 */
                'random-id-3'?: string;
                /**
                 * Format: base64
                 * @example <base64_encoded_ios_device_check_token>
                 */
                'random-id-4'?: string;
            } | null;
            /**
             * @deprecated
             * @description optional field used together with Android fingerprinting
             * @default null
             * @example <salt_value>
             */
            Salt: string | null;
        };
        CreateCredentiallessUserOutput: {
            /** @example 6f3c4f52cf499c2066e6c5669a293177c1f43755 */
            UID: string;
            /** @example -Bpgivr5H2qGDRiUQ4-7gm5YLf215MEgZCdzOtLW5psxgB8oNc8OnoFRykab4Z23EGEW1ka3GtQPF9xwx9-VUA== */
            UserID: string;
            /** @example 0 */
            LocalID: number;
            Scopes: string[];
            /** @example ACXDmTaBub14w== */
            EventID: string;
            /** @example Bearer */
            TokenType: string;
            /** @example hnnamrzvsgdbxvx74rjadbovyjy63vz4 */
            AccessToken: string;
            /** @example wfih0367aa7dc0359bf5c42d15a93e6c */
            RefreshToken: string;
        };
        AuthInfoInput: {
            /**
             * @description 4 is the current version, older versions are not accepted
             * @example 4
             */
            Version: number;
            /** @example <encrypted_id> */
            ModulusID: string;
            /** @example <base64_encoded_salt> */
            Salt: string;
            /** @example <base64_encoded_verifier> */
            Verifier: string;
        };
        PushTransformer: {
            /** @example 1H8EGg3J1QpSDL6K8hGsTvwm...hrHx6nnGQ== */
            PushID: string;
            /**
             * @description Any objectID from the event feed (*WARNING*: the object can be on another page)
             * @example KPlISx5MiML3Xc...3MAOfsds-tfNw==
             */
            ObjectID: string;
            /**
             * @description Type of the ObjectID
             * @example Messages
             */
            Type: string;
        };
        ReferralOutput: {
            /** @example KPlISx5MiML3XcSYPrREF-Jw9AFa2kk60Lqw7FVWAGvJUss-tfNw== */
            ReferralID: string;
            /** @example KPlISx5MiML3XcSYPrREF-Jw9AFa2kk60Lqw7FVWAGvJUss-tfNw== */
            UserID: string;
            State: number;
            /** @example KPlISx5MiML3XcSYPrREF-Jw9AFa2kk60Lqw7FVWAGvJUss-tfNw== */
            ReferredUserID?: string | null;
            Email?: string | null;
            CreateTime: number;
            SignupTime?: number | null;
            TrialTime?: number | null;
            CompleteTime?: number | null;
            RewardTime?: number | null;
            RewardMonths: number;
            InvoiceID?: string | null;
            ReferredUserSubscriptionCycle?: number | null;
        };
        ReferralStatus: {
            /** @example 2 */
            RewardMonths: number;
            /** @example 6 */
            RewardMonthsLimit: number;
            /** @example 10 */
            EmailsAvailable: number;
        };
        GetUserInvitationsOutput: {
            UserInvitations: components['schemas']['GetUserInvitationOutput'][];
        };
        GetUserInvitationOutput: {
            /** @example xRvCGwFq_TW7i8FtJaGyFEq0g== */
            ID: string;
            /** @example owner@family.org */
            InviterEmail: string;
            /** @example 1000000000 */
            MaxSpace: number;
            /** @example My Organization */
            OrganizationName: string;
            /** @example family2022 | passfamily2024 */
            OrganizationPlanName: string;
            Validation: components['schemas']['AcceptInvitationValidation'];
        };
        EventInfo: {
            Code: components['schemas']['ResponseCodeSuccess'];
            /**
             * Format: byte
             * @example ACXDmTaBub14w==
             */
            EventID: string;
            /**
             * @description Bitmask to know what to refresh<br>`0`: Nothing<br>`1`: MAIL<br>`2`: CONTACTS<br>`255`: Everything
             * @example 0
             */
            Refresh: number;
            /**
             * @description `1` if there is more to pull
             * @example 0
             * @enum {integer}
             */
            More: 0 | 1;
            Messages: {
                /** @example KPlISx5MiML3XcSYPrREF-...-adgMIhFhPaAukDm9fw3MAOfsds-tfNw== */
                ID?: string;
                /**
                 * @description Message action<br>`0`: `DELETE`<br>`1`: `CREATE`<br>`2`: `UPDATE`<br>`3`: `UPDATE_FLAGS`
                 * @example 1
                 * @enum {integer}
                 */
                Action?: 0 | 1 | 2 | 3;
                Message?: components['schemas']['MessageInfo'] & {
                    /** @deprecated */
                    LabelIDsAdded?: string[];
                    /** @deprecated */
                    LabelIDsRemoved?: string[];
                };
            }[];
            Conversations: {
                /** @example I6hgx3Ol-d3HYa3E394T...ACXDmTaBub14w== */
                ID?: string;
                /** @example 1 */
                Action?: number;
                Conversation?: {
                    /** @example AJuSqm0qvIL4LSMR9LWsqNO...a2OlAU_Iqr2Qcducsz-ZA== */
                    AddressID?: string;
                } & components['schemas']['Conversation'] & {
                        LabelIDsAdded?: string[];
                        LabelIDsRemoved?: string[];
                        /**
                         * @deprecated
                         * @description Not available in the Events API
                         */
                        LabelIDs?: string[];
                    } & components['schemas']['AttachmentsMetadata'];
            }[];
            Importers: {
                /** @example ziWi-ZOb28XR4sCGFCEpqQbd1...lEhjBbUPDMHGU699fw== */
                ID?: string;
                /** @example 1 */
                Action?: number;
                Importer?: components['schemas']['ImporterTransformer'];
            }[];
            ImportReports: {
                /** @example ARy95iNxhniEgYJrRrGv...F49RxFpMqWE_ZGDXEvGV2CEkA== */
                ID?: string;
                /** @example 1 */
                Action?: number;
                ImportReport?: components['schemas']['ImportReportTransformer'];
            }[];
            Contacts: {
                /** @example afeaefaeTaBub14w== */
                ID?: string;
                /** @example 1 */
                Action?: number;
                Contact?: components['schemas']['Contact'];
            }[];
            ContactEmails: {
                /** @example sadfaACXDmTaBub14w== */
                ID?: string;
                /** @example 1 */
                Action?: number;
                ContactEmail?: components['schemas']['ContactEmail'];
            }[];
            Filters: {
                /** @example Ik65N-aChBuWFd...UvkFTwJFJPQg== */
                ID?: string;
                /** @example 1 */
                Action?: number;
                Filter?: components['schemas']['FilterOutput'];
            }[];
            IncomingDefaults: {
                /** @example Ik65N-aChBuWFd...UvkFTwJFJPQg== */
                ID?: string;
                /** @example 1 */
                Action?: number;
                Filter?: components['schemas']['IncomingDefault'];
            }[];
            OrgIncomingDefaults: {
                /** @example Ik65N-aChBuWFd...UvkFTwJFJPQg== */
                ID?: string;
                /** @example 1 */
                Action?: number;
                OrgIncomingDefault?: components['schemas']['IncomingDefaultResponse'];
            }[];
            Labels: {
                /** @example sadfaACXDmTaBub14w== */
                ID?: string;
                /** @example 1 */
                Action?: number;
                Label?: components['schemas']['Label'];
            }[];
            Subscription: components['schemas']['Subscription'];
            User: components['schemas']['User'] & {
                AccountRecovery?: components['schemas']['AccountRecoveryAttempt'];
            };
            UserSettings: components['schemas']['UserSettingsTransformer'];
            MailSettings: components['schemas']['Response'];
            VPNSettings: {
                /** @example test-group */
                GroupID?: string;
            } & components['schemas']['VPNSettings'];
            Invoices: {
                /** @example IlnTbqicN-...-4NvrrIc6GLvDv28aKYVRRrSgEFhR_zhlkA== */
                ID?: string;
                /** @example 1 */
                Action?: number;
                Invoice?: components['schemas']['Invoice'];
            }[];
            Members: {
                /** @example LO9aACXDmTaBub14w== */
                ID?: string;
                /** @example 1 */
                Action?: number;
                Member?: {
                    /** @example LO9aACXDmTaBub14w== */
                    MemberID?: string;
                    /** @example 1 */
                    Role?: number;
                    /** @example 0 */
                    Private?: number;
                    /** @example 0 */
                    Type?: number;
                    /**
                     * Format: int64
                     * @example 0
                     */
                    MaxSpace?: number;
                    /** @example Jason */
                    Name?: string;
                    /**
                     * Format: int64
                     * @example 0
                     */
                    UsedSpace?: number;
                    Addresses?: string[];
                };
            }[];
            Domains: {
                /** @example 9aACXDmTaBub14w== */
                ID?: string;
                /** @example 2 */
                Action?: number;
                Domain?: components['schemas']['DomainTransformer'];
            }[];
            Addresses: components['schemas']['AddressUser'][];
            SignedAddressList?: components['schemas']['KTAddressListTransformer'] | null;
            IncomingAddressForwardings: {
                /** @example 9aACXDmTaBub14w== */
                ID?: string;
                /** @example 2 */
                Action?: number;
                IncomingAddressForwarding?: components['schemas']['IncomingAddressForwardingResponse'];
            }[];
            OutgoingAddressForwardings: {
                /** @example 9aACXDmTaBub14w== */
                ID?: string;
                /** @example 2 */
                Action?: number;
                OutgoingAddressForwarding?: components['schemas']['OutgoingAddressForwardingResponse'];
            }[];
            Organization: {
                /** @example E-Corp */
                Name?: string;
                /** @example E-Corp */
                DisplayName?: string;
                /** @example plus */
                PlanName?: string;
                /**
                 * @description Plan attribution to specific product, 1 = Mail, 2 = Drive, 4 = VPN
                 * @example 1
                 */
                PlanFlags?: number;
                /** @example null */
                TwoFactorGracePeriod?: number;
                /** @example null */
                Theme?: number;
                /** @example contact@e-corp.com */
                Email?: string;
                /** @example 4 */
                MaxDomains?: number;
                /** @example 20 */
                MaxAddresses?: number;
                /** @example 25 */
                MaxCalendars?: number;
                /**
                 * Format: int64
                 * @example 10000000000
                 */
                MaxSpace?: number;
                /** @example 15 */
                MaxMembers?: number;
                /** @example 5 */
                MaxVPN?: number;
                /** @example 0 */
                Features?: number;
                /** @example 0 */
                Flags?: number;
                /** @example 0 */
                UsedDomains?: number;
                /** @example 0 */
                UsedAddresses?: number;
                /**
                 * Format: int64
                 * @example 81788997
                 */
                UsedSpace?: number;
                /** @example 10000000000 */
                AssignedSpace?: number;
                /** @example 1 */
                UsedMembers?: number;
                /** @example 5 */
                UsedVPN?: number;
                /** @example 1 */
                HasKeys?: number;
            };
            MessageCounts: {
                /** @example 0 */
                LabelID?: string;
                /** @example 15 */
                Total?: number;
                /** @example 6 */
                Unread?: number;
            }[];
            ConversationCounts: {
                /** @example 0 */
                LabelID?: string;
                /** @example 4 */
                Total?: number;
                /** @example 3 */
                Unread?: number;
            }[];
            /**
             * Format: int64
             * @description Used space (in bytes)
             * @example 70376905
             */
            UsedSpace: number;
            ProductUsedSpace: components['schemas']['UserUsage'];
            VPNProfiles: {
                /** @example q_9v-GXEPLagg81jsUz2mHQ== */
                ID?: string;
                /** @example 2 */
                Action?: number;
                VPNProfile?: components['schemas']['VPNProfile'];
            }[];
            LogicalServers: components['schemas']['VPNLogical'];
            Calendars: {
                /** @example wSGAB7IOerWAaIItAfyAIbSWIaFSS== */
                ID?: string;
                /** @example 1 */
                Action?: number;
                Calendar?: components['schemas']['CalendarWithMemberWithFlagsOutput'];
            }[];
            CalendarMembers: {
                /** @example wSGAB7IOerWAaIItAfyAIbSWIaFSS== */
                ID?: string;
                /** @example 1 */
                Action?: number;
                Member?: components['schemas']['MemberWithFlagsOutput'];
            }[];
            Pushes: {
                /** @example 1H8EGg3J1QpSDL6K8hGs...hrHx6nnGQ== */
                PushID?: string;
                /**
                 * @description Any objectID from the event feed (*WARNING*: the object can be on another page)
                 * @example KPlISx5MiML3Xc...3MAOfsds-tfNw==
                 */
                ObjectID?: string;
                /**
                 * @description Type of the ObjectID
                 * @example Messages
                 */
                Type?: string;
            }[];
            Notifications: components['schemas']['EventLoopNotificationTransformer'][];
            CalendarUserSettings: components['schemas']['UserSettingsTransformer2'];
            Wallets: {
                /** @example wSGAB7IOerWAaIItAfyAIbSWIaFSS== */
                ID?: string;
                /** @example 1 */
                Action?: number;
                Wallet?: components['schemas']['WalletOutput'];
            }[];
            WalletAccounts: {
                /** @example wSGAB7IOerWAaIItAfyAIbSWIaFSS== */
                ID?: string;
                /** @example 1 */
                Action?: number;
                WalletAccount?: components['schemas']['WalletAccountOutput'];
            }[];
            WalletBitcoinAddresses: {
                /** @example wSGAB7IOerWAaIItAfyAIbSWIaFSS== */
                ID?: string;
                /** @example 1 */
                Action?: number;
                WalletBitcoinAddress?: components['schemas']['WalletBitcoinAddressOutput'];
            }[];
            WalletKeys: {
                /** @example wSGAB7IOerWAaIItAfyAIbSWIaFSS== */
                ID?: string;
                /** @example 1 */
                Action?: number;
                WalletKey?: components['schemas']['WalletKeyOutput'];
            }[];
            WalletSettings: {
                /** @example wSGAB7IOerWAaIItAfyAIbSWIaFSS== */
                ID?: string;
                /** @example 1 */
                Action?: number;
                WalletSettings?: components['schemas']['WalletSettingsOutput'];
            }[];
            WalletTransactions: {
                /** @example wSGAB7IOerWAaIItAfyAIbSWIaFSS== */
                ID?: string;
                /** @example 1 */
                Action?: number;
                WalletTransaction?: components['schemas']['WalletTransactionOutput'];
            }[];
            WalletUserSettings: components['schemas']['WalletUserSettingsOutput'];
            Notices: string[];
        } & components['schemas']['DriveShareRefreshCoreEventService'];
        NotificationVersionTransformer: {
            /** @example wSGAB7IOerWAaIItAfyAIbSWIaFSS== */
            NotificationID: string;
            /** @example 1601582623 */
            StartTime: number;
            /** @example 1845561234 */
            EndTime: number;
            /**
             * @description Possible values:<br>- 0: offer
             * @example 0
             */
            Type: number;
            /** @description Offer property will be present only when Type is 0 */
            Offer: {
                /** @example https://protonvpn.com/black-friday */
                URL?: string;
                /** @example https://protonvpn.com/resources/bf.png */
                Icon?: string;
                /**
                 * @description Translated label based on the user's locale
                 * @example Black-Friday arrived!
                 */
                Label?: string;
            };
        };
        Label: {
            /** @example sadfaACXDmTaBub14w== */
            ID: string;
            /** @example Event Label! */
            Name: string;
            /** @example Folder/Event Label! */
            Path: string;
            /** @example 1 */
            Type: number;
            /** @example #f66 */
            Color: string;
            /** @example 8 */
            Order: number;
            /** @example 1 */
            Notify: number;
            /** @example 1 */
            Expanded: number;
            /** @example 1 */
            Sticky: number;
            /** @example sadfaACXDmTaBub14w== */
            ParentID: string;
            /**
             * @description v3 only
             * @example 1
             */
            Display: number;
            /**
             * @description v3 only
             * @example 0
             */
            Exclusive: number;
        };
        /** @description An armored PGP Private Key */
        PGPPrivateKey: string;
        SignedKeyListInput: {
            /** @example JSON.stringify([{""Fingerprint"": ""fde90483475164ec6353c93f767df53b0ca8395c"",""SHA256Fingerprints"": [""164ec63...53c93f7"", ""f767d...f53b0c""],""Primary"": 1,""Flags"": 3}]) */
            Data: string;
            /** @example -----BEGIN PGP SIGNATURE-----.*-----END PGP SIGNATURE----- */
            Signature: string;
        };
        AddressKeyInput5: {
            /**
             * @description The address ID
             * @example ACXDmTa...Bub14w==
             */
            AddressID: string;
            /** @example -----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK----- */
            PrivateKey: string;
            /** @example -----BEGIN PGP MESSAGE-----.* */
            Token: string;
            /** @example -----BEGIN PGP SIGNATURE-----.* */
            Signature: string;
            SignedKeyList: components['schemas']['SignedKeyListInput'];
            /** @example 3 */
            Revision: Record<string, never>;
        };
        AuthInput2: {
            /** @example 4 */
            Version: number;
            /** @example <encrypted_id> */
            ModulusID: string;
            /** @example <base64_encoded_salt> */
            Salt: string;
            /** @example <base64_encoded_verifier> */
            Verifier: string;
        };
        Fido2Input: {
            /** @description The same AuthenticationOptions received as a challenge from the server */
            AuthenticationOptions: Record<string, never>;
            /** @description clientData (base64) returned from the client authentication library */
            ClientData: string;
            /** @description authenticatorData (base64) returned from the client authentication library */
            AuthenticatorData: string;
            /** @description signature (base64) returned from the client authentication library */
            Signature: string;
            /** @description CredentialID used */
            CredentialID: Record<string, never>[];
        };
        /** @description Base64 encoded binary data */
        BinaryString: string;
        ResetAuthDevicesUserKeyDto: {
            ID: components['schemas']['EncryptedId'];
            PrivateKey: components['schemas']['PGPPrivateKey'];
        };
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>0</td><td>Internal</td></tr><tr><td>1</td><td>External</td></tr><tr><td>2</td><td>InternalTypeExternal</td></tr></table></details></details>
         * @enum {integer}
         */
        GroupMemberType: 0 | 1 | 2;
        /** @description An armored PGP Signature */
        PGPSignature: string;
        /** @description An armored PGP Message */
        PGPMessage: string;
        GroupProxyInstance: {
            PgpVersion: number;
            GroupAddressKeyFingerprint: string;
            GroupMemberAddressKeyFingerprint: string;
            ProxyParam: string;
        };
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>0</td><td>NobodyCanSend</td></tr><tr><td>1</td><td>GroupMembersCanSend</td></tr><tr><td>2</td><td>OrgMembersCanSend</td></tr><tr><td>3</td><td>EveryoneCanSend</td></tr></table></details></details>
         * @enum {integer}
         */
        GroupPermissions: 0 | 1 | 2 | 3;
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>0</td><td>None</td></tr></table></details></details>
         * @enum {integer}
         */
        GroupFlags: 0;
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>0</td><td>None</td></tr><tr><td>1</td><td>Send</td></tr><tr><td>2</td><td>Leave</td></tr><tr><td>3</td><td>SendAndLeave</td></tr></table></details></details>
         * @enum {integer}
         */
        GroupMemberPermissions: 0 | 1 | 2 | 3;
        ExternalGroupMembership: {
            ID: components['schemas']['Id'];
            /** Format: date-time */
            CreateTime: string;
            State: components['schemas']['GroupMemberState'];
            Type: components['schemas']['GroupMemberType'];
            Email?: string | null;
            Permissions: components['schemas']['GroupMemberPermissions'];
            /** Format: date-time */
            JoinTime?: string | null;
            Group: components['schemas']['GroupMembershipGroup'];
        };
        GroupMember: {
            ID: components['schemas']['Id'];
            /** Format: date-time */
            CreateTime: string;
            GroupID: components['schemas']['Id'];
            State: components['schemas']['GroupMemberState'];
            Type: components['schemas']['GroupMemberType'];
            AddressID?: components['schemas']['Id'] | null;
            Email?: string | null;
            Permissions: components['schemas']['GroupMemberPermissions'];
        };
        InternalGroupMembership: {
            ID: components['schemas']['Id'];
            /** Format: date-time */
            CreateTime: string;
            State: components['schemas']['GroupMemberState'];
            Type: components['schemas']['GroupMemberType'];
            AddressId?: components['schemas']['Id'] | null;
            Email?: string | null;
            Permissions: components['schemas']['GroupMemberPermissions'];
            /** Format: date-time */
            JoinTime?: string | null;
            TokenKeyPacket?: components['schemas']['BinaryString'] | null;
            TokenSignaturePacket?: components['schemas']['BinaryString'] | null;
            AddressSignaturePacket?: components['schemas']['BinaryString'] | null;
            Group: components['schemas']['GroupMembershipGroup'];
            ForwardingKeys: components['schemas']['ForwardingKeys'];
            GroupID: components['schemas']['Id'];
        };
        AddressKeyToken: {
            /**
             * @description Encrypted Address key ID to replace the token
             * @example G1MbEt3Ep5P_E...Wz8WbHVAOl_6h==
             */
            AddressKeyID: string;
            /**
             * @description Base-64 encoded key packet
             * @example slCpH6qWMKGQ7d...R4eLU2+2BZvK0UeG/QY2
             */
            KeyPacket: string;
            /**
             * @description Token signature produced with the primary user key
             * @example -----BEGIN PGP SIGNATURE-----.*-----END PGP SIGNATURE-----
             */
            Signature: string;
        };
        /**
         * @description <p>Either 1=PROTON or 2=MANAGED (default)</p><details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>1</td><td>Proton</td></tr><tr><td>2</td><td>Managed</td></tr><tr><td>3</td><td>External</td></tr><tr><td>4</td><td>CredentialLess</td></tr></table></details></details>
         * @enum {integer}
         */
        UserType: 1 | 2 | 3 | 4;
        MagicLinkInvitationInput: {
            /**
             * @description Invitation data containing address and expected KT revision
             * @example {"Address":"member@internal-domain.com", "Revision":2}
             */
            Data: Record<string, never>;
            Signature?: components['schemas']['PGPSignature'] | null;
            /**
             * @description The email to send an invitation to
             * @example some.user@example.com
             */
            Email: string;
            /** @description Whether the member should remain private after creation or be unprivatized */
            PrivateIntent: boolean;
        };
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>1</td><td>ManageForwarding</td></tr></table></details></details>
         * @enum {integer}
         */
        MemberPermission: 1;
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>0</td><td>Remove</td></tr><tr><td>1</td><td>Add</td></tr></table></details></details>
         * @enum {integer}
         */
        MemberPermissionAction: 0 | 1;
        UserKeyInput: {
            PrivateKey: components['schemas']['PGPPrivateKey'];
            OrgPrivateKey: components['schemas']['PGPPrivateKey'];
            /** @example -----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE----- */
            OrgToken: string;
        };
        AuthInfoInput2: {
            /**
             * @description 4 is the current version, older versions are not accepted
             * @example 4
             */
            Version: number;
            /** @example <encrypted_id> */
            ModulusID: string;
            /** @example <base64_encoded_salt> */
            Salt: string;
            /** @example <base64_encoded_verifier> */
            Verifier: string;
        };
        UnprivatizeMemberUserKeyDto: {
            OrgPrivateKey: components['schemas']['PGPPrivateKey'];
            OrgToken: components['schemas']['PGPMessage'];
        };
        UnprivatizeMemberAddressKeyDto: {
            AddressKeyID: components['schemas']['Id'];
            OrgTokenKeyPacket: components['schemas']['BinaryString'];
            OrgSignature: components['schemas']['PGPSignature'];
        };
        ReplaceOrganizationKeyInvitationDto: {
            MemberID: components['schemas']['Id'];
            TokenKeyPacket: components['schemas']['BinaryString'];
            Signature: components['schemas']['PGPSignature'];
            SignatureAddressID: components['schemas']['Id'];
            EncryptionAddressID: components['schemas']['Id'];
        };
        ReplaceOrganizationKeyActivationDto: {
            MemberID: components['schemas']['Id'];
            TokenKeyPacket: components['schemas']['BinaryString'];
            Signature: components['schemas']['PGPSignature'];
        };
        MigrateOrganizationKeyInvitationDto: {
            MemberID: components['schemas']['Id'];
            TokenKeyPacket: components['schemas']['BinaryString'];
            Signature: components['schemas']['PGPSignature'];
        };
        MigrateOrganizationKeyActivationDto: {
            MemberID: components['schemas']['Id'];
            TokenKeyPacket: components['schemas']['BinaryString'];
            Signature: components['schemas']['PGPSignature'];
        };
        /**
         * @description <p>Possible values:<br>- 0: Unset<br>- 1: Off<br>- 2: Server-Only<br>- 3: Client-Only</p><details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>0</td><td>Unset</td></tr><tr><td>1</td><td>Off</td></tr><tr><td>2</td><td>ServerOnly</td></tr><tr><td>3</td><td>ClientOnly</td></tr></table></details></details>
         * @enum {integer}
         */
        AIAssistantFlags: 0 | 1 | 2 | 3;
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>4</td><td>Google</td></tr><tr><td>6</td><td>AppleProd</td></tr><tr><td>7</td><td>AppleBeta</td></tr><tr><td>16</td><td>AppleDev</td></tr></table></details></details>
         * @enum {integer}
         */
        Environment: 4 | 6 | 7 | 16;
        /** @description An armored PGP Public Key */
        PGPPublicKey: string;
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>0</td><td>Off</td></tr><tr><td>1</td><td>On</td></tr></table></details></details>
         * @enum {integer}
         */
        PingNotificationStatus: 0 | 1;
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>0</td><td>Off</td></tr><tr><td>1</td><td>On</td></tr></table></details></details>
         * @enum {integer}
         */
        PushNotificationStatus: 0 | 1;
        /**
         * @description <p>1: email, 2: VPN, 3: calendar, 4: drive, 5: pass</p><details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>1</td><td>Mail</td></tr><tr><td>2</td><td>VPN</td></tr><tr><td>3</td><td>Calendar</td></tr><tr><td>4</td><td>Drive</td></tr><tr><td>5</td><td>Pass</td></tr><tr><td>6</td><td>Wallet</td></tr><tr><td>7</td><td>Neutron</td></tr><tr><td>8</td><td>Contacts</td></tr><tr><td>9</td><td>Lumo</td></tr></table></details></details>
         * @enum {integer}
         */
        Product: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
        EventCollectionOutput: components['schemas']['EventOutput'][];
        /** @description An encrypted Label ID and default integer Label ID */
        LabelID: string;
        /** Product used space */
        UserUsage: {
            Calendar: number;
            Contact: number;
            Drive: number;
            Mail: number;
            Pass: number;
        };
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>0</td><td>Paid</td></tr><tr><td>1</td><td>Available</td></tr><tr><td>2</td><td>Overdue</td></tr><tr><td>3</td><td>Delinquent</td></tr><tr><td>4</td><td>NotReceived</td></tr></table></details></details>
         * @enum {integer}
         */
        DelinquentState: 0 | 1 | 2 | 3 | 4;
        /** AddressKey */
        AddressKey: {
            /**
             * @description Encrypted AddressKey ID
             * @example G1MbEt3...Ol_6h==
             */
            ID: string;
            /**
             * @description Latest version is 3
             * @example 3
             */
            Version: number;
            /**
             * @deprecated
             * @description Deprecated! Do not rely on public keys returned from the API!
             * @example -----BEGIN PGP PUBLIC KEY BLOCK-----.*
             */
            PublicKey: string;
            /**
             * @description This parameter is missing ONLY in the key reset call
             * @example -----BEGIN PGP PRIVATE KEY BLOCK-----
             */
            PrivateKey?: string | null;
            /**
             * @description This can be the token to decrypt the address key via the user key
             *     or a legacy token if logging in as sub-user or null for private legacy keys user
             * @example null or -----BEGIN PGP MESSAGE-----.*
             */
            Token?: string | null;
            /**
             * @description If this field is present, the key is migrated. Use it to verify the token!
             * @example null or -----BEGIN PGP SIGNATURE-----
             */
            Signature?: string | null;
            /**
             * @deprecated
             * @description Deprecated! Do not rely on fingerprints returned from the API!
             * @example c93f767df53b0ca8395cfde90483475164ec6353
             */
            Fingerprint: string;
            /**
             * @deprecated
             * @description Deprecated! Do not rely on fingerprints returned from the API!
             */
            Fingerprints: string[];
            /**
             * @deprecated
             * @description Deprecated!
             *     Migrated accounts do not have the activation field set,
             *     and they get migrated automatically on login.
             * @example -----BEGIN PGP MESSAGE-----.*
             */
            Activation?: string | null;
            /**
             * @description 0 or 1. There is only one primary key per address
             * @example 1
             */
            Primary: number;
            /**
             * @description 0 or 1.
             *     All active keys should decrypt successfully and all inactive keys should not be decrypted.
             * @example 1
             */
            Active: number;
            /**
             * @description Flags (bitmap):
             *     * `1`: Can use key to verify signatures;
             *     * `2`: Can use key to encrypt new data;
             *     * `4`: Can be used to encrypt email;
             *     * `8`: Do not expect signed email from this key;
             * @example 3
             */
            Flags: number;
            /**
             * @description If not null, it represents a valid associated Address Forwarding instance
             * @example fWIio823...j45sL==
             */
            AddressForwardingID: string;
            /**
             * @description If not null, it represents a valid associated Group Member instance
             * @example fWIio823...j45sL==
             */
            GroupMemberID: string;
        };
        /**
         * @description <p>The current device state</p><details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>0</td><td>Inactive</td></tr><tr><td>1</td><td>Active</td></tr><tr><td>2</td><td>PendingActivation</td></tr><tr><td>3</td><td>PendingAdminActivation</td></tr><tr><td>4</td><td>Rejected</td></tr><tr><td>5</td><td>NoSession</td></tr></table></details></details>
         * @enum {integer}
         */
        AuthDeviceState: 0 | 1 | 2 | 3 | 4 | 5;
        TranslatedStringInterface: Record<string, never>;
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>0</td><td>Pending</td></tr><tr><td>1</td><td>Active</td></tr><tr><td>2</td><td>Outdated</td></tr><tr><td>3</td><td>Paused</td></tr><tr><td>4</td><td>Rejected</td></tr></table></details></details>
         * @enum {integer}
         */
        GroupMemberState: 0 | 1 | 2 | 3 | 4;
        OrganizationKeyInvitationDto: {
            TokenKeyPacket: components['schemas']['BinaryString'];
            /** @description Signature of the token key packet by the inviters address key */
            Signature: string;
            SignatureAddressID: components['schemas']['EncryptedId'];
            EncryptionAddressID: components['schemas']['EncryptedId'];
        };
        OrganizationKeyActivationDto: {
            TokenKeyPacket: components['schemas']['BinaryString'];
            /** @description Signature of the token key packet by the user key of the member */
            Signature: string;
        };
        /** @enum {string} */
        AuthLogStatus: 'success' | 'attempt' | 'failure';
        /**
         * @description <p>ID of protection applied.<br />
         *                 Can be missing. Only present if user has High Security enabled.<br />
         *                 See AuthLogProtection enum for possible values.</p><details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Name</th><th>Description</th></tr><tr><td>1</td><td>Block</td><td></td></tr><tr><td>2</td><td>Captcha</td><td></td></tr><tr><td>3</td><td>OwnershipVerification</td><td></td></tr><tr><td>4</td><td>DeviceVerification</td><td></td></tr><tr><td>5</td><td>Ok</td><td>* AuthLog action was protected by anti-abuse systems
         *          * and was evaluated as safe.</td></tr></table></details></details>
         * @enum {integer}
         */
        AuthLogProtection: 1 | 2 | 3 | 4 | 5;
        /**
         * @description <p>0 - is not supposed to have access to org key, 1 - has access to org key, 2 - has lost access to key and needs to be re-invited, 3 - pending activation</p><details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Name</th><th>Description</th></tr><tr><td>0</td><td>NoKey</td><td>The member does not and should not have access to the org key (e.g. not an admin)</td></tr><tr><td>1</td><td>Active</td><td>The member has full access to the most recent copy of the org key</td></tr><tr><td>2</td><td>Missing</td><td>The member does not have access to the most recent copy of the org key (including legacy keys)</td></tr><tr><td>3</td><td>Pending</td><td>The member has been invited to but needs to activate the most recent copy of the org key</td></tr></table></details></details>
         * @enum {integer}
         */
        MemberOrgKeyStatus: 0 | 1 | 2 | 3;
        /** Theme */
        Theme2: Record<string, never>;
        AcceptInvitationValidation: {
            /** @example true */
            Valid: boolean;
            /** @example false */
            IsLifetimeAccount: boolean;
            /** @example false */
            HasOrgWithMembers: boolean;
            /** @example false */
            HasCustomDomains: boolean;
            /** @example false */
            ExceedsMaxSpace: boolean;
            /** @example false */
            ExceedsAddresses: boolean;
            /** @example false */
            ExceedsMaxAcceptedInvitations: boolean;
            /** @example false */
            OrgExceedsMaxAcceptedInvitations: boolean;
            /** @example false */
            IsOnForbiddenPlan: boolean;
            /** @example false */
            HasUnpaidInvoice: boolean;
            /** @example false */
            IsExternalUser: boolean;
        };
        MessageInfo: {
            /** @example KPlISx5MiML3XcSYPrREF-Jw9AFa2kk60Lqw7FVWAGvJUsT_zzWKFI-adgMIhFhPaAukDm9fw3MAOfsds-tfNw== */
            ID: string;
            /**
             * @description This value is UserID + MessageID.<br>It gives the order in which the messages were created in our database
             * @example 456
             */
            Order: number;
            /** @example Wk30GtU7aIj8Gu6yWkSc3SacA== */
            ConversationID: string;
            /** @example new subject */
            Subject: string;
            /** @example 1 */
            Unread: number;
            /**
             * @deprecated
             * @example 1
             */
            Type: string;
            /**
             * @deprecated
             * @example me@protonmail.com
             */
            SenderAddress: string;
            /**
             * @deprecated
             * @example Me
             */
            SenderName: string;
            Sender: components['schemas']['Sender'];
            ToList: components['schemas']['Recipient'];
            CcList: components['schemas']['Recipient'];
            BccList: components['schemas']['Recipient'];
            /** @example 1433890289 */
            Time: number;
            /** @example 1433890289 */
            SnoozeTime: number;
            /** @example 148 */
            Size: number;
            /**
             * @deprecated
             * @example 1
             */
            IsEncrypted: number;
            /** @example 0 */
            ExpirationTime: number;
            /** @example 0 */
            IsReplied: number;
            /** @example 0 */
            IsRepliedAll: number;
            /** @example 0 */
            IsForwarded: number;
            /** @example cO6RgDJwoHFScLqIkVnRD9luDVkh20EDto1aIHVHU43-dJlREzFcUjS-c7bB-_qlnxBgwAShddHZ4UDdu6RswQ== */
            AddressID: string;
            LabelIDs: string[];
            /** @example somesemirandomstringofchars */
            ExternalID: string;
            /**
             * @description The number of attachments in the message, excluding inline attachments
             * @example 2
             */
            NumAttachments: number;
            /**
             * @description     Bitmap of message flags.<br>
             *          * Received = 2^0 Message was received<br>
             *          * Sent = 2^1 Message was sent<br>
             *          * Internal = 2^2 Message is internal<br>
             *          * E2E = 2^3 Message is End-to-End encrypted<br>
             *          * Auto = 2^4 Message was automatically generated<br>
             *          * Replied = 2^5 <br>
             *          * RepliedAll = 2^6 <br>
             *          * Forwarded = 2^7 Message was forwarded<br>
             *          * Auto replied = 2^8 Message is an automatic reply<br>
             *          * Imported = 2^9 Message was imported<br>
             *          * Opened = 2^10 Message has been opened<br>
             *          * Receipt Sent = 2^11 Message receipt has been sent<br>
             *          * Notified = 2^12 Historical, unused flag, kept here for reservation purposes<br>
             *          * Touched = 2^13 <br>
             *          * Receipt = 2^14 Message is a recipt<br>
             *          * Proton = 2^15 <br>
             *          * Receipt request = 2^16 Message request a recipt<br>
             *          * Public key = 2^17<br>
             *          * Sign = 2^18 Message is signed<br>
             *          * Unsubscribed = 2^19 Message has been unsubscribed from<br>
             *          * Scheduled send = 2^20 Message was scheduled sent<br>
             *          * 2^21 Not used<br>
             *          * Synced from Gmail = 2^22 Message was synced from Gmail<br>
             *          * DMARC PASS = 2^23 DMARC check passed<br>
             *          * SPF fail = 2^24 SPF check failed<br>
             *          * DKIM fail = 2^25 DKIM check failed<br>
             *          * DMARC fail = 2^26 DMARC check failed<br>
             *          * Ham manual = 2^27 Message was manually marked as ham (non spam)<br>
             *          * Spam auto = 2^28 Message was automatically marked as spam<br>
             *          * Spam manual = 2^29 Message was manually marked as spam<br>
             *          * Phishing auto = 2^30 Message was automatically marked as phishing<br>
             *          * Phishing manual = 2^31 Message was manually marked as phishing<br>
             *          * FrozenExpiration = 2^32 Message expiration time can't be manually edited<br>
             *          * Suspicious = 2^33 Message was automatically marked as suspicious<br>
             *          * Show Snooze Reminder = 2^34 Snooze reminder needs to be shown<br>
             *          * Auto Forwarder = 2^35 Message has been automatically forwarded to another recipient <br>
             *          * Auto Forwardee = 2^35 Message received was automatically forwarded by the sender <br>
             *          * EO Reply = 2^36 Message is a reply to an Encrypted-Outside message <br>
             * @example 8198
             */
            Flags: number;
            AttachmentInfo: components['schemas']['GroupedAttachmentsCount'];
            AttachmentsMetadata: components['schemas']['Metadata'][];
            /**
             * @deprecated
             * @description Deprecated, check Sender.* properties
             * @example 1
             */
            SenderImage: number;
            /** @description Indicates if the client has to display the text saying that the message has been reminded */
            DisplaySnoozedReminder: boolean;
            /**
             * @deprecated
             * @description Deprecated, check Sender.* properties
             * @example 1
             */
            IsProton: number;
            /**
             * @deprecated
             * @description Deprecated, check Sender.* properties
             * @example default
             */
            BimiSelector?: string | null;
        };
        Conversation: {
            /**
             * @description The ID of the conversation
             * @example I6hgx3Ol-d3HYa3E394T_ACXDmTaBub14w==
             */
            ID: string;
            /**
             * @description The order is the sum of the conversationID and corresponding userID
             * @example 675
             */
            Order: number;
            /**
             * @description The subject of the conversation
             * @example Testing
             */
            Subject: string;
            /** @description The list of senders */
            Senders: components['schemas']['Sender2'][];
            /** @description The list of recipients */
            Recipients: components['schemas']['Recipient2'][];
            /**
             * @description The number of messages in the conversation.
             * @example 5
             */
            NumMessages: number;
            /**
             * @description The number of unread messages in the conversation.
             * @example 0
             */
            NumUnread: number;
            /**
             * @description The number of attachments of the messages in the conversation, excluding inline attachments
             * @example 0
             */
            NumAttachments: number;
            /**
             * @description The lowest expiration time of the messages in the conversations.
             *      *         An expiration time of 0 means never.
             * @example 0
             */
            ExpirationTime: number;
            /**
             * @description The sum of the sizes of all the messages in the conversation, expressed in bytes
             * @example 3555
             */
            Size: number;
            /** @deprecated */
            LabelIDs: string[];
            /** @description List of labels that the conversation has */
            Labels: {
                /** @example 0 */
                ID?: string;
                /** @example 0 */
                ContextNumUnread?: number;
                /** @example 5 */
                ContextNumMessages?: number;
                /** @example 1578070879 */
                ContextTime?: number;
                /** @example 0 */
                ContextExpirationTime?: number;
                /** @example 541 */
                ContextSize?: number;
                /** @example 0 */
                ContextNumAttachments?: number;
                /** @example 1578070879 */
                ContextSnoozeTime?: number;
            }[];
            /** @description Indicates if the client has to display the text saying that the conversation has been reminded */
            DisplaySnoozedReminder: boolean;
            /**
             * @deprecated
             * @description Deprecated, check Sender.* properties
             * @example 1
             */
            DisplaySenderImage: Record<string, never>;
            /**
             * @deprecated
             * @description Deprecated, check Sender.* properties
             * @example 1
             */
            IsProton: Record<string, never>;
            /**
             * @deprecated
             * @description Deprecated, check Sender.* properties
             * @example default
             */
            BimiSelector?: string | null;
        };
        AttachmentsMetadata: {
            AttachmentInfo: components['schemas']['GroupedAttachmentsCount2'];
            AttachmentsMetadata: components['schemas']['Metadata2'][];
        };
        /** Importer */
        ImporterTransformer: {
            /** @example ziWi-ZOb28XR4sCGFCEpqQbd1...lEp-fhjBbUPDMHGU699fw== */
            ID: string;
            /** @example test@protonmail.dev */
            Account: string;
            Product: string[];
            /**
             * @description 0: IMAP, 1: Google
             * @example 1
             */
            Provider: number;
            /**
             * @description nullable, present only with token flow
             * @example ziWi-ZOb28XR4sCGFCEpqQbd1...lEp-fhjBbUPDMHGU699fw==
             */
            TokenID: string;
            /**
             * @description Modify time of the importer
             * @example 12345678
             */
            ModifyTime: number;
            /**
             * @description nullable, present only for IMAP flow
             * @example imap.mail.ru
             */
            ImapHost: string;
            /**
             * @description nullable, present only for IMAP flow
             * @example 993
             */
            ImapPort: number;
            /**
             * @description nullable, present only for IMAP flow
             * @example PLAIN
             */
            Sasl: string;
            /**
             * @description nullable, present only for IMAP flow - 1 if certificate is not verified
             * @example 0
             */
            AllowSelfSigned: number;
            /** @example 76844 */
            INBOX: number;
            /** @example 0 */
            '\u041E\u0442\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u043D\u044B\u0435': number;
            /** @example 0 */
            '\u0427\u0435\u0440\u043D\u043E\u0432\u0438\u043A\u0438': number;
            /** @example 0 */
            'INBOX/Social': number;
            /** @example 0 */
            'INBOX/Newsletters': number;
        };
        /** ImportReport */
        ImportReportTransformer: {
            /** @example ARy95iNxhniEgYJrRrGv...F49RxFpMqWE_ZGDXEvGV2CEkA== */
            ID: string;
            /** @example 1 */
            Provider: number;
            /** @example test@gmx.fr */
            Account: string;
            /** @description Sent (1) or Not Sent (0) */
            State: number;
            /** @example 1592827431 */
            CreateTime: number;
            /** @example 1592829784 */
            EndTime: number;
            /** @example 262612461 */
            TotalSize: number;
            Summary: {
                Calendar?: {
                    /**
                     * @description `0`: QUEUED, `1`: RUNNING, `2`: DONE, `3`: FAILED, `4`: PAUSED, `5`: CANCELED
                     * @example 0
                     * @enum {integer}
                     */
                    State?: 0 | 1 | 2 | 3 | 4 | 5;
                    /** @example 1245 */
                    NumEvents?: number;
                    /** @example 1245 */
                    TotalSize?: number;
                    /**
                     * @description `0`: CANNOT_UNDO, `1`: CAN_UNDO, `2`: UNDO_IN_PROGRESS, `3`: UNDONE
                     * @example 1
                     */
                    RollbackState?: number;
                };
                Contact?: {
                    /**
                     * @description `0`: QUEUED, `1`: RUNNING, `2`: DONE, `3`: FAILED, `4`: PAUSED, `5`: CANCELED
                     * @example 0
                     * @enum {integer}
                     */
                    State?: 0 | 1 | 2 | 3 | 4 | 5;
                    /** @example 1245 */
                    NumContacts?: number;
                    /** @example 1245 */
                    NumGroups?: number;
                    /** @example 1245 */
                    TotalSize?: number;
                    /**
                     * @description `0`: CANNOT_UNDO, `1`: CAN_UNDO, `2`: UNDO_IN_PROGRESS, `3`: UNDONE
                     * @example 1
                     */
                    RollbackState?: number;
                };
                Mail?: {
                    /**
                     * @description `0`: QUEUED, `1`: RUNNING, `2`: DONE, `3`: FAILED, `4`: PAUSED, `5`: CANCELED
                     * @example 0
                     * @enum {integer}
                     */
                    State?: 0 | 1 | 2 | 3 | 4 | 5;
                    /** @example 1245 */
                    NumMessages?: number;
                    /** @example 1245 */
                    TotalSize?: number;
                    /**
                     * @description `0`: CANNOT_UNDO, `1`: CAN_UNDO, `2`: UNDO_IN_PROGRESS, `3`: UNDONE
                     * @example 1
                     */
                    RollbackState?: number;
                    /** @description 1 if source messages can be deleted */
                    CanDeleteSource?: number;
                };
            };
        };
        Contact: {
            /**
             * @description Encrypted ID
             * @example a29olIjFv0rnXxBhSMw==
             */
            ID: string;
            /** @example ProtonMail Features */
            Name: string;
            /** @example proton-legacy-139892c2-f691-4118-8c29-061196013e04 */
            UID: string;
            /** @example 1434 */
            Size: number;
            /**
             * Format: timestamp
             * @example 1503815366
             */
            CreateTime: number;
            /**
             * Format: timestamp
             * @example 1503815366
             */
            ModifyTime: number;
            /** @description List of emails, only included when returning one record */
            ContactEmails: components['schemas']['ContactEmail'][];
            /** @description Labels on Contact, ignore, maybe future feature */
            LabelIDs: string[];
            /** @description Only included when returning one record */
            Cards: components['schemas']['ContactData'][];
        };
        ContactEmail: {
            /**
             * @description ContactList.ContactID
             * @example aefew4323jFv0BhSMw==
             */
            ID: string;
            /** @example test1 */
            Name: string;
            /** @example features@protonmail.black */
            Email: string;
            /** @description List of email types */
            Type: string[];
            /**
             * @description 0 if contact contains custom sending preferences or keys, 1 otherwise
             * @example 1
             */
            Defaults: number;
            /** @example 1 */
            Order: number;
            /** @example a29olIjFv0rnXxBhSMw== */
            ContactID: string;
            /** @description Groups */
            LabelIDs: string[];
            /** @example features@protonmail.black */
            CanonicalEmail: string;
            /** @description The last time the User sent a message to this ContactEmail */
            LastUsedTime: number;
            /**
             * @description Tells whether this is an official Proton address
             * @example 1
             */
            IsProton: number;
        };
        FilterOutput: {
            ID: components['schemas']['Id'];
            Name: string;
            /** @example 1 */
            Status: number;
            /** @example 3 */
            Priority: number;
            /** @example     require ["fileinto"];
             *
             *         if address :DOMAIN :is ["From", "Delivered-To"] "protonmail.ch" {
             *             fileinto "mylabel";
             *         } else
             *             keep;
             *         } */
            Sieve: string;
            Tree: components['schemas']['Tree'];
            /** @example 1 */
            Version: number;
        };
        IncomingDefault: Record<string, never>;
        IncomingDefaultResponse: {
            /** ID */
            ID: string;
            Location: number;
            Type: number;
            Time: number;
            Email?: string | null;
        };
        Subscription: {
            /** @example <encrypted_sub_id> */
            ID: string;
            /** @example <encrypted_invoice_id> */
            InvoiceID: string;
            /** @example 1 */
            Cycle: number;
            /** @example 1455617471 */
            PeriodStart: number;
            /** @example 1458119471 */
            PeriodEnd: number;
            /** @example null */
            CouponCode: string;
            /** @example USD */
            Currency: string;
            /** @example 1500 */
            Amount: number;
            Plans: components['schemas']['Plan'][];
            /** @example 1 */
            Renew: boolean;
        };
        Response: {
            /** @example Put Chinese Here */
            DisplayName: string;
            /** @example This is my signature */
            Signature: string;
            /** @example <CSS> */
            Theme: string;
            /** @description Automatically respond to incoming messages */
            AutoResponder: {
                /** @example 0 */
                StartTime?: number;
                /** @example 0 */
                Endtime?: number;
                /** @example 0 */
                Repeat?: number;
                DaysSelected?: string[];
                /** @example Auto */
                Subject?: string;
                /** @example  */
                Message?: string;
                /** @example null */
                IsEnabled?: boolean | null;
                /** @example Europe/Zurich */
                Zone?: string;
            };
            /**
             * @description Automatically save the recipients as contact.
             *     If enabled, when a user sends an email, the recipients are automatically added to his contact list.
             *     Implemented by the backend.
             *     Possible values:
             *     - 0: disable
             *     - 1: enable
             * @default 1
             */
            AutoSaveContacts: number;
            /**
             * @deprecated
             * @description Automatically convert simple queries to wildcarded versions, such as `test` to `*test*`.
             *     Implemented by web client V3. With v4 everything is wildcarded by default.
             *     Possible values:
             *     - 0: disable
             *     - 1: enable
             * @default 1
             */
            AutoWildcardSearch: number;
            /**
             * @description Possible values:
             *     - 0: normal
             *     - 1: maximized
             * @default 0
             */
            ComposerMode: number;
            /**
             * @description Possible values:
             *     - 0: read first
             *     - 1: unread first
             * @default 0
             */
            MessageButtons: number;
            /**
             * @description Possible values:
             *     - 0: don't auto load
             *     - 1: auto-load remote content
             *     - 2: auto-load embedded images
             *     - 3: auto-load both
             * @default 2
             */
            ShowImages: number;
            /**
             * @description Possible values:
             *     - 0: don't keep
             *     - 1: keep draft messages in Draft folder
             *     - 2: keep sent messages in Sent folder
             *     - 3: keep both draft and sent messages in their respective folders
             * @default 0
             */
            ShowMoved: number;
            /**
             * @description delay in days before messages put in trash and spam are permanantly deleted
             *
             *     - null: implicitly disabled
             *     - 0: explicitly disabled
             * @default null
             */
            AutoDeleteSpamAndTrashDays: number | null;
            /**
             * @description Possible values:
             *     - 0: Client should show the `ALL_MAIL` label
             *     - 1: Client should show the `ALMOST_ALL_MAIL` label
             * @default 0
             */
            AlmostAllMail: number;
            /**
             * @description Whether to load next message when current message is moved somewhere else
             *     - null: implicitly disabled
             *     - 0: explicitly disabled
             *     - 1: implictly disabled
             *     - 2: explicitly enabled
             * @default 0
             * @enum {integer|null}
             */
            NextMessageOnMove: 0 | 1 | 2 | null;
            /**
             * @description Possible values:
             *     - 0: enable conversation mode
             *     - 1: no conversation grouping
             * @default 0
             */
            ViewMode: number;
            /**
             * @description Possible values:
             *     - 0: column
             *     - 1: row
             * @default 0
             */
            ViewLayout: number;
            /**
             * @description Swipe left action.
             *     Action taken when user swipes a message to the left on mobile.
             *     Implemented by the client.
             *     Possible values:
             *     - 0: Trash
             *     - 1: Spam
             *     - 2: Star
             *     - 3: Archive
             *     - 4: Mark as read
             * @default 3
             */
            SwipeLeft: number;
            /**
             * @description Swipe right action.
             *     Action taken when user swipes a message to the right on mobile.
             *     Implemented by the client.
             *     Possible values:
             *     - 0: Trash
             *     - 1: Spam
             *     - 2: Star
             *     - 3: Archive
             *     - 4: Mark as read
             * @default 0
             */
            SwipeRight: number;
            /**
             * @deprecated
             * @example 0
             */
            AlsoArchive: number;
            /**
             * @deprecated
             * @default 0
             */
            Hotkeys: number;
            /**
             * @description Possible values:
             *     - 0: disable
             *     - 1: enable
             * @default 1
             */
            Shortcuts: number;
            /**
             * @description Possible values:
             *     - 0: Disabled
             *     - 1: Enabled
             *     - 2: Enabled and Locked
             * @default 0
             */
            PMSignature: number;
            /**
             * @description Possible values:
             *     - 0: Disabled
             *     - 1: Enabled
             * @default 0
             */
            PMSignatureReferralLink: number;
            /**
             * @description Bitmap of image proxy related settings.
             *     - IncorporateImages: 1 (2^0), whether remote images are downloaded and incorporated into mail at delivery.
             *         Implemented by the backend.
             *     - ProxyImages :  2 (2^1), whether loading remote images on the clients passes through the proton proxy.
             *         Implemented by the client.
             * @default 0
             */
            ImageProxy: number;
            /** @example 50 */
            NumMessagePerPage: number;
            /**
             * @description Default mime type of drafts. Implemented by the client.
             *     Possible values:
             *     - 'text/html'
             *     - 'text/plain'
             * @example text/html
             */
            DraftMIMEType: string;
            /**
             * @description Preferred mime type of received messages. Implemented by the backend.
             *     Possible values:
             *     - 'text/html'
             *     - 'text/plain'
             * @example text/html
             */
            ReceiveMIMEType: string;
            /** @example text/html */
            ShowMIMEType: string;
            /**
             * @description Possible values:
             *     - 0: disable
             *     - 1: enable
             * @default 0
             */
            EnableFolderColor: number;
            /**
             * @description Possible values:
             *     - 0: disable
             *     - 1: enable
             * @default 1
             */
            InheritParentFolderColor: number;
            /**
             * @description Possible values:
             *     - 0: disabled
             *     - 1: enabled
             * @default 0
             */
            SubmissionAccess: number;
            /**
             * @deprecated
             * @default 0
             */
            TLS: number;
            /**
             * @description Composer text direction.
             *     The direction of the text inside the message composer.
             *     Implemented by the client.
             *     Possible values:
             *     - 0: left to right
             *     - 1: right to left
             * @default 0
             */
            RightToLeft: number;
            /**
             * @description Possible values:
             *     - 0: disable
             *     - 1: enable
             * @default 0
             */
            AttachPublicKey: number;
            /**
             * @description Possible values:
             *     - 0: disable
             *     - 1: enable
             * @default 0
             */
            Sign: number;
            /**
             * @description Default PGP scheme to use when sending externally. Implemented by the client.
             *     Possible values:
             *     - 8: PGP Inline
             *     - 16: PGP Mime
             * @default 16
             */
            PGPScheme: number;
            /**
             * @description Prompt to trust key.
             *     When opening a message from another protonmail user for which there is no pinned key, prompt to pin key.
             *     Pinning the key results in updating the contact.
             *     Implemented by the client.
             *     Possible values:
             *     - 0: disable
             *     - 1: enable
             * @default 0
             */
            PromptPin: number;
            /**
             * @deprecated
             * @default 0
             */
            Autocrypt: number;
            /**
             * @description When a message is created, add to it all the labels of the other messages in its conversation.
             *     Possible values:
             *     - 0: disable
             *     - 1: enable
             * @default 0
             */
            StickyLabels: number;
            /**
             * @description Possible values:
             *     - 0: disable
             *     - 1: enable
             * @default 1
             */
            ConfirmLink: number;
            /**
             * @description Possible values between 0 and 30
             * @default 10
             */
            DelaySendSeconds: number;
            /** @default 0 */
            KT: number;
            /**
             * @description Possible values between 10 and 26
             * @default null
             */
            FontSize: number | null;
            /** @default null */
            FontFace: string;
            /**
             * @description Configure additional actions to take when messages or conversations are moved to spam
             *     Possible values:
             *     - null: ask what to do every time
             *     - 0: do nothing else
             *     - 1: unsubscribe with one-click list-unsubscribe if possible
             * @default null
             */
            SpamAction: number | null;
            /**
             * @description Whether the user wants to be asked for confirmation before blocking a sender
             *     Possible values:
             *     - null: ask for confirmation every time
             *     - 1: block sender without asking for confirmation
             * @default null
             */
            BlockSenderConfirmation: number | null;
            /** @description Mobile-specific settings, only returned for mobile clients */
            MobileSettings: {
                MessageToolbar?: {
                    IsCustom?: boolean;
                    Actions?: string[];
                };
                ConversationToolbar?: {
                    IsCustom?: boolean;
                    Actions?: string[];
                };
                ListToolbar?: {
                    IsCustom?: boolean;
                    Actions?: string[];
                };
            };
            /**
             * @description Whether the user wants to have embedded-images hidden on this client. The default vlaue is 0.
             *     Possible values:
             *     - 0: Show embedded images
             *     - 1: Hide embedded images
             * @default 0
             * @enum {integer}
             */
            HideEmbeddedImages: 1 | 0;
            /**
             * @description Whether the user wants to have remote-images hidden on this client. The default vlaue is 0.
             *     Possible values:
             *     - 0: Show remote images
             *     - 1: Hide remote images
             * @default 0
             * @enum {integer}
             */
            HideRemoteImages: 1 | 0;
            /**
             * @description Whether the user wants to have sender-images hidden. The value is `0` by default.
             *     Possible values:
             *     - 0: Do not hide sender images
             *     - 1: Hide sender images
             * @example 1
             * @enum {integer}
             */
            HideSenderImages: 1 | 0;
            /**
             * @description Whether the user wants to remove metadata from image attachments. The value is `0` by default.
             *     Possible values:
             *     - false: Do not remove image metadata
             *     - true: Remove image metadata
             * @example true
             */
            RemoveImageMetadata: Record<string, never>;
        };
        /** User settings for VPN product */
        VPNSettings: {
            /**
             * @description OpenVPN / IKEv2 username
             * @example 9rXSJiW7xf59U/OqUTjHRJy/
             */
            Name: string;
            /**
             * @description OpenVPN / IKEv2 password
             * @example sHwX8ye/ipCFfj5K0xuZYTlD
             */
            Password: string;
            /**
             * @description Status
             *                      `0`: no vpn access
             *                      `1`: vpn access
             *                      `2`: vpn access eligible
             *                      `3`: vpn access requested (waitlist)
             * @example 2
             */
            Status: number;
            /**
             * @deprecated
             * @description Trial has been removed, you should stop using this property
             * @example 0
             */
            ExpirationTime: unknown;
            /**
             * @description Code name of the plan (string unique identifier constant over time)
             *                      the user has, or null if no subscription
             * @example mail2022
             */
            BasePlan?: string | null;
            /**
             * @description Code name of the VPN plan (string unique identifier constant over time), i.e.
             *                      the plan giving to the user the more entitlement to VPN features (such as access to
             *                      VPN paid servers) or 'free' if the user has no such subscription (either is free or
             *                      have a non-VPN subscription, ex.: mail2022, drive2022)
             * @example vpnbiz2023
             */
            PlanName?: string | null;
            /**
             * @description Title of the plan (PlanName) (for display only, the title of a
             *                     plan can change over time, be translated, etc.)
             * @example VPN Plus
             */
            PlanTitle?: string | null;
            /**
             * @description Maximum number of connections/devices the user plan allows
             * @example 10
             */
            MaxConnect: number;
            /**
             * @description Maximum server tier level the user can access
             * @example 2
             */
            MaxTier?: number | null;
            Groups: string[];
            /**
             * @description `true` if the user needs to allocate connection
             *                     (to the sub-user via the VPN settings panel for instance)
             * @example false
             */
            NeedConnectionAllocation: boolean;
            /**
             * @description `true` if the organization opted-in for telemetry)
             * @example false
             */
            BusinessEvents: boolean;
            /**
             * @description `true` if the current user plan allow to use the browser extension
             * @example false
             */
            BrowserExtension: boolean;
            /**
             * @description A plan that the current user can buy/upgrade to in order to be able to use the browser extension
             * @example vpnpro2023
             */
            BrowserExtensionPlan?: string | null;
        };
        Invoice: {
            /** @example IlnTbqicN-2HfUGIn-ki8bqZfLqNj5ErUB0z24Qx5g-4NvrrIc6GLvEpj2EPfwGDv28aKYVRRrSgEFhR_zhlkA== */
            ID: string;
            /** @example 4 */
            Type: number;
            /** @example 1 */
            State: number;
            /** @example USD */
            Currency: string;
            /** @example 0 */
            AmountDue: number;
            /** @example 0 */
            AmountCharged: number;
            /** @example 1505758141 */
            CreateTime: number;
            /** @example 1506449824 */
            ModifyTime: number;
            /** @example 1506449824 */
            AttemptTime: number;
            /** @example 1 */
            Attempts: number;
        };
        /** IncomingAddressForwardingResponse */
        IncomingAddressForwardingResponse: {
            ID: components['schemas']['Id'];
            Type: components['schemas']['AddressForwardingType'];
            State: components['schemas']['AddressForwardingState'];
            /** When an email is received by forwarderEmail, it will be forwarded to forwardeeEmail or forwardeeAddressID */
            ForwarderEmail: string;
            ForwardeeAddressID: components['schemas']['Id'];
            CreateTime: number;
            /** The forwarding keys encrypted to the tokens. They are present only for encrypted forwarding
             *     in the pending state. To activate the forwarding all of them must be re-encrypted to the user
             *     keys and added to the correct address keyring. */
            ForwardingKeys: components['schemas']['ActivationForwardingKey'][];
            Filter?: components['schemas']['AddressForwardingFilter'] | null;
        };
        /** OutgoingAddressForwardingResponse */
        OutgoingAddressForwardingResponse: {
            ID: components['schemas']['Id'];
            Type: components['schemas']['AddressForwardingType'];
            State: components['schemas']['AddressForwardingState'];
            ForwarderAddressID: components['schemas']['Id'];
            /** The final email address to forward messages to * */
            ForwardeeEmail: string;
            CreateTime: number;
            Filter?: components['schemas']['AddressForwardingFilter'] | null;
        };
        VPNProfile: Record<string, never>;
        VPNLogical: {
            /** @example -Bpgivr5H2qGDRiUQ4-7gm5YLf215MEgZCdzOtLW5psxgB8oNc8OnoFRykab4Z23EGEW1ka3GtQPF9xwx9-VUA== */
            ID: string;
            /**
             * @description Name `[A-Z]{2}(-[A-Z]{2})?#{server number}`, such as ES#1, US-FL#22, etc. The state suffix (i.e. `FL` in case of `US-FL`) is meant to be resolvable to a US state.
             * @example US-FL#1
             */
            Name: string;
            /**
             * Format: alpha-2
             * @description alpha-2 country code
             * @example CH
             */
            EntryCountry: string;
            /**
             * Format: alpha-2
             * @description alpha-2 country code
             * @example CH
             */
            ExitCountry: string;
            /**
             * Format: alpha-2
             * @description alpha-2 country code
             * @example CH
             */
            HostCountry?: string | null;
            /**
             * @description Domain name
             * @example es-05.protonvpn.com
             */
            Domain: string;
            /**
             * @description A number representing the server tier. Users have access to certain tiers depending to their Plan
             * @example 2
             * @enum {integer}
             */
            Tier: 0 | 1 | 2;
            /**
             * @description **Bitmap**
             *      *            `1`: Secure Core
             *      *            `2`: Tor
             *      *            `4`: P2P
             *      *            `8`: Streaming
             *      *            `16`: IPv6
             *      *            `32`: Restricted
             *      *            `64`: Partner
             *      *            `128`: Double Restriction
             * @example 2
             */
            Features: number;
            /**
             * @description `1` if at least one physical server server is up and running and usable, `0` otherwise
             * @example 1
             * @enum {integer}
             */
            Status: 0 | 1;
            /**
             * @deprecated
             * @description Use City or Name instead for geographic information
             * @example null
             */
            Region?: number | null;
            /**
             * @description Optional city
             * @example Stockholm
             */
            City?: number | null;
            Servers: components['schemas']['VPNServerTransformerInterface'][];
            /**
             * @description Describe in a spiritual way how much the logical server is loaded
             * @example 0
             */
            Load: number;
            /** @description The coordinate of the datacenter */
            Location: {
                /**
                 * @description Latitude
                 * @example 39.4667
                 */
                Lat?: Record<string, never>;
                /**
                 * @description Longitude
                 * @example -0.3667
                 */
                Long?: Record<string, never>;
            };
            /**
             * @description The lower is the score, the better is the server for the current user, maximal precision (64 bits) for this number must be kept
             * @example 3.615154888897451
             */
            Score: Record<string, never>;
        };
        CalendarWithMemberWithFlagsOutput: {
            Members: components['schemas']['MemberWithFlagsOutput'][];
            ID: components['schemas']['Id'];
            Type: components['schemas']['CalendarType'];
            Owner: components['schemas']['CalendarOwner'];
            /** Format: date-time */
            CreateTime: string;
        };
        MemberWithFlagsOutput: {
            /**
             * @description The calendar flags bitmap:<br/>- `0`: Inactive: the calendar keys are not accessible and the current user cannot fix it<br/>- `1`: Active: the calendar is all good!<br/>- `2`: Update passphrase: a deactivated passphrase is again accessible, you should re-encrypt the linked calendar key using the primary passphrase<br/>- `4`: Reset needed: the calendar needs to be reset<br/>- `8`: Incomplete setup: the calendar setup was not completed, need to setup the key and passphrase<br/>- `16`: Lost access: the user lost access to the calendar but an admin can re-invite him<br/>
             * @example 1
             */
            Flags: number;
            ID: components['schemas']['Id'];
            /**
             * @description Flags bitmap:<br/>- `1`: Super-owner<br/>- `2`: Owner<br/>- `4`: Admin<br/>- `8`: Read member list<br/>- `16`: Write events<br/>- `32`: Read events (full details)<br/>- `64`: Availability view only<br/>
             * @example 63
             */
            Permissions: number;
            /** @example andy@pm.me */
            Email: string;
            AddressId: components['schemas']['Id'];
            CalendarId: components['schemas']['Id'];
            /** @example Organizational Calendar */
            Name: string;
            /** @example This text describes the calendar */
            Description: string;
            /** @example #8989AC */
            Color: string;
            /** @example 1 */
            Display: number;
            /**
             * @description Priority describing the order of the member, 1 is highest
             * @example 1
             */
            Priority: number;
        };
        EventLoopNotificationTransformer: {
            /** @example 1H8EGg3J1QpSDL6K8hGsTvwm...hrHx6nnGQ== */
            ID: string;
            /** @example 1H8EGg3J1QpSDL6K8hGsTvwm...hrHx6nnGQ== */
            UserID: string;
            /** @example account_recovery */
            Type: string;
            /** @description timestamp */
            Time: Record<string, never>;
            Payload: {
                Title?: string;
                Subtitle?: string;
                Body?: string;
            };
        };
        /** CalendarUserSettings */
        UserSettingsTransformer2: {
            /**
             * @description `0`: 7 Days, `1`: 5 Days
             * @example 0
             * @enum {integer}
             */
            WeekLength: 0 | 1;
            /**
             * @description `0`: Off, `1`: On
             * @example 1
             * @enum {integer}
             */
            DisplayWeekNumber: 0 | 1;
            /**
             * @description `0`: Off, `1`: On
             * @example 0
             * @enum {integer}
             */
            AutoDetectPrimaryTimezone: 0 | 1;
            /** @example Antarctica/Macquarie */
            PrimaryTimezone: string;
            /**
             * @description `0`: Off, `1`: On
             * @example 0
             * @enum {integer}
             */
            DisplaySecondaryTimezone: 0 | 1;
            /**
             * @description Can be null if DisplaySecondaryTimezone is 0
             * @example null
             */
            SecondaryTimezone: string;
            /**
             * @description `0`: DAILY, `1`: WEEKLY, `2`: MONTHLY, `3`: YEARLY, `4`: PLANNING
             * @example 1
             * @enum {integer}
             */
            ViewPreference: 0 | 1 | 2 | 3 | 4;
            /**
             * @description Can be null, if the calendar type is `subscription`, instead of `normal`, it cannot be set as the default calendar
             * @example wSGAB7IOerWAaIItAfyAIbSWIaFSS==
             */
            DefaultCalendarID: string;
            /**
             * @description `0`: Off, `1`: On
             * @example 0
             * @enum {integer}
             */
            ShowCancelled: 0 | 1;
            /**
             * @description `0`: Off, `1`: On
             * @example 0
             * @enum {integer}
             */
            ShowDeclined: 0 | 1;
            /**
             * @description `0`: Off, `1`: On
             * @example 0
             * @enum {integer}
             */
            AutoImportInvite: 0 | 1;
            /** @description Bitmap of whom to share busy-schedule with:<br>- 1 (2^0): To users in the same organization */
            ShareBusySchedule: number;
        };
        WalletOutput: {
            ID: components['schemas']['Id'];
            /**
             * @description 1 if the wallet has a passphrase
             * @example 0
             */
            HasPassphrase: number;
            /**
             * @description 0 if the wallet is created with Proton Wallet
             * @example 0
             */
            IsImported: number;
            /**
             * Format: base64
             * @description Encrypted wallet mnemonic with the WalletKey, in base64 format
             * @example <base64_encoded_mnemonic>
             */
            Mnemonic?: components['schemas']['BinaryString'] | null;
            /**
             * @description Unique identifier of the mnemonic, using the first 4 bytes of the master public key hash
             * @example 912914fb
             */
            Fingerprint?: string | null;
            Name: components['schemas']['BinaryString'];
            /**
             * @description Order of priority
             * @example 1
             */
            Priority: number;
            /**
             * Format: base64
             * @description Encrypted wallet public key with the WalletKey, in base64 format, only if on-chain watch-only
             * @example <base64_encoded_publickey>
             */
            PublicKey?: components['schemas']['BinaryString'] | null;
            Status: components['schemas']['WalletStatus'];
            Type: components['schemas']['WalletType'];
            /**
             * @description Set to 1 if wallet key needs to be rotated
             * @example 0
             */
            MigrationRequired: number;
            /**
             * @description Set to 1 if mnemonic is encrypted with user key too
             * @example 0
             */
            Legacy: number;
        };
        WalletAccountOutput: {
            ID: components['schemas']['Id'];
            WalletID: components['schemas']['Id'];
            /**
             * @description Preferred fiat currency
             * @example CHF
             */
            FiatCurrency: string;
            DerivationPath: components['schemas']['DerivationPath'];
            Label: components['schemas']['BinaryString'];
            /** @description The index number that wallet last used to create address */
            LastUsedIndex: number;
            /**
             * @description Size of Bitcoin address pool
             * @example 10
             */
            PoolSize: number;
            /**
             * @description Order of priority
             * @example 1
             */
            Priority: number;
            ScriptType: components['schemas']['ScriptType'];
            Addresses: unknown[];
        };
        WalletBitcoinAddressOutput: {
            ID: components['schemas']['Id'];
            WalletID: components['schemas']['Id'];
            WalletAccountID: components['schemas']['Id'];
            Fetched: number;
            Used: number;
            /** @default null */
            BitcoinAddress: components['schemas']['BitcoinAddress'] | null;
            /**
             * @description Detached signature of the bitcoin address
             * @default null
             * @example -----BEGIN PGP SIGNATURE-----...
             */
            BitcoinAddressSignature: components['schemas']['PGPSignature'] | null;
            /**
             * @description Index of the bitcoin address
             * @default null
             * @example 1
             */
            BitcoinAddressIndex: number | null;
        };
        WalletKeyOutput: {
            ID: components['schemas']['Id'];
            WalletID: components['schemas']['Id'];
            UserKeyID: components['schemas']['Id'];
            /**
             * @description Encrypted AES-GCM 256 key used to encrypt the mnemonic or public key, as armored PGP
             * @example -----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE-----
             */
            WalletKey: string;
            /**
             * @description Detached signature of the encrypted AES-GCM 256 key used to encrypt the mnemonic or public key, as armored PGP
             * @example -----BEGIN PGP SIGNATURE-----.*-----END PGP SIGNATURE-----
             */
            WalletKeySignature: string;
        };
        WalletSettingsOutput: {
            WalletID: components['schemas']['Id'];
            /**
             * @description Hide accounts, only used for on-chain wallet
             * @example 0
             */
            HideAccounts: number;
            /**
             * @description Invoice default description, only used for lightning wallet
             * @example Lightning payment from John Doe.
             */
            InvoiceDefaultDescription?: string | null;
            /**
             * @description Invoice expiration time, only used for lightning wallet
             * @example 3600
             */
            InvoiceExpirationTime: number;
            /**
             * @description Max fee for automatic channel opening with Proton Lightning node, expressed in SATS, only used for lightning wallet
             * @example 5000
             */
            MaxChannelOpeningFee: number;
            /**
             * @description User should see wallet recovery phrase without 2FA
             * @example false
             */
            ShowWalletRecovery: boolean;
        };
        WalletTransactionOutput: {
            ID: components['schemas']['Id'];
            WalletID: components['schemas']['Id'];
            WalletAccountID: components['schemas']['Id'];
            TransactionID: components['schemas']['PGPMessage'];
            /**
             * @description Unix timestamp of when the transaction got created in Proton Wallet or confirmed in blockchain for incoming ones
             * @example 1707287982
             */
            TransactionTime?: string | null;
            /** @description Set to 1 if output amount is smaller than 1001 Sats, or output size is bigger than 20 blocks */
            IsSuspicious: number;
            /** @description Set to 1 if user does not want to spend UTXO from this transaction */
            IsPrivate: number;
            /** @description Set to 1 if user did not want to reveal its identify during sending */
            IsAnonymous: number;
            Type: components['schemas']['TransactionType'];
            HashedTransactionID?: components['schemas']['BinaryString'] | null;
            /** @default null */
            Label: components['schemas']['BinaryString'] | null;
            /** @default null */
            ExchangeRate: components['schemas']['ExchangeRateOutput'] | null;
            /** @default null */
            Sender: components['schemas']['PGPMessage'] | null;
            /** @default null */
            ToList: components['schemas']['PGPMessage'] | null;
            /** @default null */
            Subject: components['schemas']['PGPMessage'] | null;
            /** @default null */
            Body: components['schemas']['PGPMessage'] | null;
        };
        WalletUserSettingsOutput: {
            /**
             * @description Accept terms and conditions
             * @example 1
             */
            AcceptTermsAndConditions: number;
            /**
             * @description Preferred Bitcoin unit
             * @example BTC
             */
            BitcoinUnit: string;
            /**
             * @description Preferred fiat currency
             * @example CHF
             */
            FiatCurrency: string;
            /**
             * @description Hide empty used addresses
             * @example 1
             */
            HideEmptyUsedAddresses: number;
            /**
             * @description Ask for 2FA verification when an amount threshold is reached
             * @example 1000
             */
            TwoFactorAmountThreshold?: number | null;
            /**
             * @description Receive inviter notification
             * @example 1
             */
            ReceiveInviterNotification: number;
            /**
             * @description Receive email integration notification
             * @example 1
             */
            ReceiveEmailIntegrationNotification: number;
            /**
             * @description Receive transaction notification
             * @example 1
             */
            ReceiveTransactionNotification: number;
            /**
             * @description User has already created a wallet once
             * @example 1
             */
            WalletCreated: number;
        };
        DriveShareRefreshCoreEventService: {
            DriveShareRefresh: {
                /** @enum {integer} */
                Action?: 2;
            };
        };
        GroupMembershipGroup: {
            ID: components['schemas']['Id'];
            Name: string;
            Address: string;
        };
        ForwardingKeys: {
            PrivateKey?: components['schemas']['PGPPrivateKey'] | null;
            ActivationToken?: components['schemas']['PGPMessage'] | null;
        };
        EventOutput: {
            ID?: components['schemas']['Id'] | null;
            Action: components['schemas']['EventAction'];
        };
        Sender: {
            /** @example foo@protonmail.dev */
            Address: string;
            /** @example Joe */
            Name: string;
            /**
             * @description Optional, whether to display the Proton badge.<br>
             *              *      Possible values:<br>
             *              *          - 1: Display the Proton badge<br>
             *              *          - 0: Do not display the Proton badge
             * @example 1
             * @enum {integer}
             */
            IsProton: 0 | 1;
            /**
             * @description Optional, whether to display the SenderImage.<br>
             *              *      Possible values:<br>
             *              *          - 1: Display the sender image<br>
             *              *          - 0: Do not display the sender image
             * @example 1
             * @enum {integer}
             */
            DisplaySenderImage: 0 | 1;
            /**
             * @description Optional, BIMI selector header, set if present on message or if domain has BIMI
             * @example null
             */
            BimiSelector?: string | null;
            /**
             * @description Whether the mail came through simple login
             * @example 1
             * @enum {integer}
             */
            IsSimpleLogin: 0 | 1;
        };
        Recipient: {
            /** @example foo@protonmail.dev */
            Address: string;
            /** @example Joe */
            Name: string;
            /** @description Optional */
            Group?: string | null;
            /**
             * @description Optional, whether to display the Proton badge.<br>
             *     Possible values:<br>
             *         - 1: Display the Proton badge<br>
             *         - 0: Do not display the Proton badge
             * @example 1
             * @enum {integer}
             */
            IsProton: 0 | 1;
        };
        /** @description Attachment counts grouped by the MIME type and disposition.
         *             Listed types here are an example */
        GroupedAttachmentsCount: {
            'image/jpeg': {
                /** @example 2 */
                inline?: number;
                /** @example 1 */
                attachment?: number;
            };
            'text/calendar': {
                /** @example 1 */
                attachment?: number;
            };
        };
        Metadata: {
            ID: components['schemas']['Id2'];
            Name?: string | null;
            Size: number;
            MIMEType: string;
            Disposition?: components['schemas']['Disposition'] | null;
        };
        Sender2: Record<string, never>;
        Recipient2: Record<string, never>;
        /** @description Attachment counts grouped by the MIME type and disposition.
         *             Listed types here are an example */
        GroupedAttachmentsCount2: {
            'image/jpeg': {
                /** @example 2 */
                inline?: number;
                /** @example 1 */
                attachment?: number;
            };
            'text/calendar': {
                /** @example 1 */
                attachment?: number;
            };
        };
        Metadata2: {
            ID: components['schemas']['Id3'];
            Name?: string | null;
            Size: number;
            MIMEType: string;
            Disposition?: components['schemas']['Disposition2'] | null;
        };
        ContactData: {
            /**
             * @description     Possible values:
             *         <br>- 0: clear text
             *         <br>- 1: encrypted
             *         <br>- 2: signed
             *         <br>- 3: encrypted and signed
             * @example 2
             * @enum {integer}
             */
            Type: 0 | 1 | 2 | 3;
            /**
             * @description VCard data
             * @example     BEGIN:VCARD
             *         VERSION:4.0
             *         FN:ProtonMail Features
             *         UID:proton-legacy-139892c2-f691-4118-8c29-061196013e04
             *         item1.EMAIL;TYPE=work;PREF=1:features@protonmail.black
             *         item2.EMAIL;TYPE=home;PREF=2:features@protonmail.ch
             *         END:VCARD
             */
            Data: string;
            /**
             * @description PGP signature of the data
             * @example -----BEGIN PGP SIGNATURE-----.*-----END PGP SIGNATURE-----
             */
            Signature: string;
        };
        Tree: {
            List?: string[];
            /** @example Require */
            Type?: string;
        }[];
        Plan: {
            /** @example <encrypted_plan_id2> */
            ID: string;
            /**
             * @description bits, 1 = primary plan, 0 = sub-plan (add-on)
             * @example [
             *       0,
             *       1
             *     ]
             */
            Type: number;
            /**
             * @description bits, 1 = plan available for subscription
             * @example 1
             * @enum {integer}
             */
            State: 0 | 1;
            /** @example 1 */
            Cycle: number;
            /** @example business */
            Name: string;
            /** @example ProtonMail Business (monthly) */
            Title: string;
            /** @example USD */
            Currency: string;
            /** @example 1000 */
            Amount: number;
            /** @example 1 */
            MaxDomains: number;
            /** @example 5 */
            MaxAddresses: number;
            /** @example 25 */
            MaxCalendars: number;
            /** @example 10737418240 */
            MaxSpace: number;
            /** @example 2 */
            MaxMembers: number;
            /** @example 0 */
            MaxVPN: number;
            /**
             * @description bits, 1 = mail, 4 = VPN
             * @example 1
             */
            Services: number;
            /**
             * @description bits, 1 = catch-all addresses
             * @example 1
             */
            Features: number;
        };
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>1</td><td>InternalEncrypted</td></tr><tr><td>2</td><td>ExternalUnencrypted</td></tr><tr><td>3</td><td>ExternalEncrypted</td></tr></table></details></details>
         * @enum {integer}
         */
        AddressForwardingType: 1 | 2 | 3;
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>0</td><td>Pending</td></tr><tr><td>1</td><td>Active</td></tr><tr><td>2</td><td>Outdated</td></tr><tr><td>3</td><td>Paused</td></tr><tr><td>4</td><td>Rejected</td></tr></table></details></details>
         * @enum {integer}
         */
        AddressForwardingState: 0 | 1 | 2 | 3 | 4;
        ActivationForwardingKey: {
            /**
             * PGP message, encrypted with the forwardee address key and signed with the forwarder address key.
             * @description The embedded secret is a 64-char hex string.
             */
            ActivationToken: string;
            /** Armored PGP private key, locked with the token */
            PrivateKey: string;
        };
        /** AddressForwardingFilter */
        AddressForwardingFilter: {
            Tree: components['schemas']['Tree'];
            Sieve: string;
            Version: components['schemas']['SieveVersion'];
        };
        VPNServerTransformerInterface: {
            /**
             * @description Encrypted id
             * @example l8vWAXHBQmv0u7OVtPbcqMa4iwQaBqowINSQjPrxAr-Da8fVPKUkUcqAq30_BCxj1X0nW70HQRmAa-rIvzmKUA==
             */
            ID: string;
            /**
             * @description IP client calls
             * @example 95.215.61.163
             */
            EntryIP: string;
            /**
             * @description IP that calls the world
             * @example 95.215.61.164
             */
            ExitIP: string;
            /**
             * @description Qualified domain name
             * @example es-04.protonvpn.com
             */
            Domain: string;
            /**
             * @description 1 if server is operational or 0 if it's down
             * @example 1
             */
            Status: number;
            /**
             * @description **Bitmap**
             *      *         where each service to be marked as down are flagged:
             *      *           `1`: Bind
             *      *           `2`: HostAlive
             *      *           `4`: OpenVPN_TCP
             *      *           `8`: OpenVPN_UDP
             *      *           `16`: IKEv2
             *      *           `32`: WireGuard
             * @example 12
             */
            ServicesDown: number;
            /**
             * @description Setup age of the given server
             * @example 0
             */
            Generation: number;
            /**
             * @description Short explanation about the current status
             * @example Provisionning
             */
            ServicesDownReason?: string | null;
            /**
             * @description To match username suffixes provided at authentication
             * @example us-va-01
             */
            Label: string;
            /**
             * @description X25519 public key PEM
             * @example -----BEGIN PUBLIC KEY----- ...
             */
            X25519PublicKey?: string | null;
            /** @description Optional list of protocol-specific relays */
            EntryPerProtocol?: {
                OpenVPNUDP?: {
                    /**
                     * @description IP of the relay
                     * @example 1.0.0.0
                     */
                    IPv4?: string;
                    /** @description Port to connect to; if none are available, this property is not returned */
                    Ports?: Record<string, never>[];
                } | null;
                OpenVPNTCP?: {
                    /**
                     * @description IP of the relay
                     * @example 1.0.0.0
                     */
                    IPv4?: string;
                    /** @description Port to connect to; if none are available, this property is not returned */
                    Ports?: Record<string, never>[];
                } | null;
                IKEv2?: {
                    /**
                     * @description IP of the relay
                     * @example 1.0.0.0
                     */
                    IPv4?: string;
                    /** @description Port to connect to; if none are available, this property is not returned */
                    Ports?: Record<string, never>[];
                } | null;
                WireGuardUDP?: {
                    /**
                     * @description IP of the relay
                     * @example 1.0.0.0
                     */
                    IPv4?: string;
                    /** @description Port to connect to; if none are available, this property is not returned */
                    Ports?: Record<string, never>[];
                } | null;
                WireGuardTCP?: {
                    /**
                     * @description IP of the relay
                     * @example 1.0.0.0
                     */
                    IPv4?: string;
                    /** @description Port to connect to; if none are available, this property is not returned */
                    Ports?: Record<string, never>[];
                } | null;
                WireGuardTLS?: {
                    /**
                     * @description IP of the relay
                     * @example 1.0.0.0
                     */
                    IPv4?: string;
                    /** @description Port to connect to; if none are available, this property is not returned */
                    Ports?: Record<string, never>[];
                } | null;
            } | null;
        };
        /**
         * @description <p>normal calendar: `0`, subscribed calendar: `1`</p><details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>0</td><td>Normal</td></tr><tr><td>1</td><td>Subscription</td></tr></table></details></details>
         * @enum {integer}
         */
        CalendarType: 0 | 1;
        CalendarOwner: {
            /**
             * @description owner's email
             * @example owner@pm.me
             */
            Email: string;
        };
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>0</td><td>Disabled</td></tr><tr><td>1</td><td>Enabled</td></tr></table></details></details>
         * @enum {integer}
         */
        WalletStatus: 0 | 1;
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>1</td><td>OnChain</td></tr><tr><td>2</td><td>Lightning</td></tr></table></details></details>
         * @enum {integer}
         */
        WalletType: 1 | 2;
        /**
         * @description Path used to generate a series of Bitcoin addresses from a single seed phrase or mnemonic, only BIP 44, 49, 84 and 86 are currently accepted
         * @example m/44'/0'/0'
         */
        DerivationPath: string;
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>1</td><td>Legacy</td></tr><tr><td>2</td><td>NestedSegwit</td></tr><tr><td>3</td><td>NativeSegwit</td></tr><tr><td>4</td><td>Taproot</td></tr></table></details></details>
         * @enum {integer}
         */
        ScriptType: 1 | 2 | 3 | 4;
        /**
         * @description BTC address
         * @example 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa
         */
        BitcoinAddress: string;
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>1</td><td>ProtonToProtonSend</td></tr><tr><td>2</td><td>ProtonToProtonReceive</td></tr><tr><td>3</td><td>ExternalSend</td></tr><tr><td>4</td><td>ExternalReceive</td></tr></table></details></details>
         * @enum {integer}
         */
        TransactionType: 1 | 2 | 3 | 4;
        ExchangeRateOutput: {
            ID: components['schemas']['Id'];
            /**
             * @description Bitcoin unit of the exchange rate
             * @example BTC
             */
            BitcoinUnit: string;
            /**
             * @description Fiat currency of the exchange rate
             * @example CHF
             */
            FiatCurrency: string;
            /**
             * @description Sign of the fiat currency (e.g. € for EUR)
             * @example 100
             */
            Sign: string;
            /**
             * @description Time of the BTC/Fiat exchange rate
             * @example 1707287982
             */
            ExchangeRateTime?: string | null;
            /**
             * @description Exchange rate BitcoinUnit/FiatCurrency
             * @example 20000000
             */
            ExchangeRate: number;
            /**
             * @description Cents precision of the fiat currency (e.g. 1 for JPY, 100 for USD)
             * @example 100
             */
            Cents: number;
        };
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>0</td><td>Delete</td></tr><tr><td>1</td><td>Create</td></tr><tr><td>2</td><td>Update</td></tr><tr><td>3</td><td>UpdateFlags</td></tr></table></details></details>
         * @enum {integer}
         */
        EventAction: 0 | 1 | 2 | 3;
        /** @description An encrypted ID */
        Id2: string;
        /** @enum {string} */
        Disposition: 'attachment' | 'inline';
        /** @description An encrypted ID */
        Id3: string;
        /** @enum {string} */
        Disposition2: 'attachment' | 'inline';
        /**
         * @description <details><summary>See values descriptions</summary><details><summary>See values descriptions</summary><table><tr><th>Value</th><th>Description</th></tr><tr><td>2</td><td>V2</td></tr></table></details></details>
         * @enum {integer}
         */
        SieveVersion: 2;
    };
    responses: {
        /** @description Plain success response without additional information */
        ProtonSuccessResponse: {
            headers: {
                /** @description The same as the body code */
                'X-Pm-Code'?: 1000;
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['ProtonSuccess'];
            };
        };
        /** @description General Error */
        ProtonErrorResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['ProtonError'];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    'get_core-{_version}-addresses-allowAddressDeletion': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'put_core-{_version}-keys-address-active': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description The address ID
                     * @example ACXDmTa...Bub14w==
                     */
                    AddressID?: string;
                    Keys?: {
                        /**
                         * @description Encrypted AddressKey ID
                         * @example G1MbEt3Ep5P_E...Wz8WbHVAOl_6h==
                         */
                        AddressKeyID?: string;
                        /**
                         * @description 1 if the FE can decrypt this key
                         * @example 1
                         */
                        Active?: number;
                    }[];
                    SignedKeyList?: {
                        /** @example JSON.stringify([{"Fingerprint": "fde90483475164ec6353c93f767df53b0ca8395c","SHA256Fingerprints": ["164ec63...53c93f7", "f767d...f53b0c"],"Primary": 1,"Flags": 3}]) */
                        Data?: string;
                        /** @example -----BEGIN PGP SIGNATURE-----.*-----END PGP SIGNATURE----- */
                        Signature?: string;
                    };
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        SignedKeyList?: components['schemas']['KTKeyList'] | null;
                    };
                };
            };
        };
    };
    'get_core-{_version}-keys': {
        parameters: {
            query?: {
                Email?: string;
                Fingerprint?: string;
            };
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /**
                         * @description 1:Internal, 2:External
                         * @example 1
                         */
                        RecipientType?: number;
                        /**
                         * @description 0:KT is valid, 1: External address - keys omitted, 2: Catch all - wrong SKL
                         * @example 0
                         */
                        IgnoreKT?: number;
                        /** @example text/html */
                        MIMEType?: string;
                        Keys?: {
                            /**
                             * @description Bitmap with the following values.<br>
                             *                                 Key is not compromised = 1 (2^0) (if the bit is set to one the key is not compromised)<br>
                             *                                 Key is not obsolete = 2 (2^1)<br>
                             * @example 3
                             */
                            Flags?: number;
                            /** @example -----BEGIN PGP PUBLIC KEY BLOCK-----.*-----END PGP PUBLIC KEY BLOCK----- */
                            PublicKey?: string;
                            /**
                             * @description 0: Internal, 1: WKD, 2: KOO
                             * @example 0
                             * @enum {integer}
                             */
                            Source?: 0 | 1 | 2;
                        }[];
                        SignedKeyList?: components['schemas']['KTKeyList'];
                        /** @example [] */
                        Warnings?: string[];
                        /**
                         * @description Tells whether this is an official Proton address, optional field
                         * @example 1
                         */
                        IsProton?: number;
                    };
                };
            };
        };
    };
    'post_core-{_version}-keys': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CreateLegacyKeyInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Key?: {
                            /** @example G1MbEt3Ep5P_EWz8WbHVAOl_6h== */
                            ID?: string;
                            /** @example 3 */
                            Version?: number;
                            /** @example 3 */
                            Flags?: number;
                            /** @example -----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK----- */
                            PrivateKey?: string;
                            /** @example null or -----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE----- */
                            Token?: string | null;
                            /** @example null or -----BEGIN PGP SIGNATURE-----.*-----END PGP SIGNATURE----- */
                            Signature?: string | null;
                            /** @example c93f767df53b0ca8395cfde90483475164ec6353 */
                            Fingerprint?: string;
                            Fingerprints?: string[];
                            /** @example null */
                            Activation?: number;
                            /** @example 1 */
                            Primary?: number;
                        };
                    };
                };
            };
        };
    };
    'post_core-{_version}-keys-address': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example xRvCGwFq_TW7...i8FtJaGyFEq0g== */
                    AddressID?: string;
                    /** @example -----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK----- */
                    PrivateKey?: string;
                    /** @example G1MbEt3Ep5P_...EWz8WbHVAOl_6h== */
                    AddressForwardingID?: string;
                    /** @example 1 */
                    Primary?: number;
                    /** @example -----BEGIN PGP MESSAGE-----.* */
                    Token?: string;
                    /** @example -----BEGIN PGP SIGNATURE-----.* */
                    Signature?: string;
                    SignedKeyList?: {
                        /** @example JSON.stringify([{""Fingerprint"": ""c93f767df53b0ca8395cfde90483475164ec6353"",""Primary"": 0,""Flags"": 1}]) */
                        Data?: string;
                        /** @example -----BEGIN PGP SIGNATURE-----.*-----END PGP SIGNATURE----- */
                        Signature?: string;
                    };
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Key?: {
                            /** @example G1MbEt3Ep5P_EWz8WbHVAOl_6h== */
                            ID?: string;
                            /** @example 3 */
                            Version?: number;
                            /** @example 3 */
                            Flags?: number;
                            /** @example -----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK----- */
                            PrivateKey?: string;
                            /** @example null or -----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE----- */
                            Token?: string | null;
                            /** @example null or -----BEGIN PGP SIGNATURE-----.*-----END PGP SIGNATURE----- */
                            Signature?: string | null;
                            /** @example c93f767df53b0ca8395cfde90483475164ec6353 */
                            Fingerprint?: string;
                            Fingerprints?: string[];
                            /** @example null */
                            Activation?: number;
                            /** @example 1 */
                            Primary?: number;
                            /** @example 1 */
                            Active?: number;
                        };
                    };
                };
            };
        };
    };
    'post_core-{_version}-keys-group': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example xRvCGwFq_TW7...i8FtJaGyFEq0g== */
                    AddressID?: string;
                    /** @example -----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK----- */
                    PrivateKey?: string;
                    /** @example -----BEGIN PGP MESSAGE-----.* */
                    OrgToken?: string;
                    /** @example -----BEGIN PGP SIGNATURE-----.* */
                    OrgSignature?: string;
                    SignedKeyList?: {
                        /** @example JSON.stringify([{""Fingerprint"": ""c93f767df53b0ca8395cfde90483475164ec6353"",""Primary"": 0,""Flags"": 1}]) */
                        Data?: string;
                        /** @example -----BEGIN PGP SIGNATURE-----.*-----END PGP SIGNATURE----- */
                        Signature?: string;
                    };
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Key?: {
                            /** @example G1MbEt3Ep5P_EWz8WbHVAOl_6h== */
                            ID?: string;
                            /** @example 3 */
                            Flags?: number;
                            /** @example -----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK----- */
                            PrivateKey?: string;
                            /** @example null or -----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE----- */
                            OrgToken?: string;
                            /** @example null or -----BEGIN PGP SIGNATURE-----.*-----END PGP SIGNATURE----- */
                            OrgSignature?: string;
                            /** @example c93f767df53b0ca8395cfde90483475164ec6353 */
                            Fingerprint?: string;
                            Fingerprints?: string[];
                            /** @example 1 */
                            Primary?: number;
                            /** @example 1 */
                            Active?: number;
                        };
                    };
                };
            };
        };
    };
    'post_core-{_version}-keys-setup': {
        parameters: {
            query?: {
                /**
                 * @description Flag indicating that /core/v4/welcome-mail-send and /core/v4/checklist/get-started/init endpoints are called by the client
                 * @example 1
                 */
                AsyncUserInitialization?: number;
            };
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['SetupKeyInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        User?: components['schemas']['User'] & {
                            Keys?: components['schemas']['UserKey'] & {
                                /** @example 3 */
                                Flags?: number;
                            };
                        };
                        VPN?: {
                            /** @example 1 */
                            Status?: number;
                            /** @example 0 */
                            ExpirationTime?: number;
                            /** @example visionary */
                            PlanName?: string;
                            /** @example 10 */
                            MaxConnect?: number;
                            /** @example 2 */
                            MaxTier?: number;
                        };
                    };
                };
            };
        };
    };
    'put_core-{_version}-keys-{enc_id}-delete': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the key id
                 * @example ACXDmTaBub14w==
                 */
                enc_id: string;
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['SignedKeyListInputWrapper'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-keys-address-{enc_id}-delete': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the key id
                 * @example ACXDmTaBub14w==
                 */
                enc_id: string;
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['SignedKeyListInputWrapper'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-keys-private': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['UpdateKeyInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /**
                         * @description Present only if inline re-authentication is submitted
                         * @example <base64_encoded_proof>
                         */
                        ServerProof?: string;
                    };
                };
            };
        };
    };
    'get_core-{_version}-images-logo': {
        parameters: {
            query?: {
                /** @example noreply%40amazon.com */
                Address?: components['schemas']['LogoRequest']['Address'];
                /** @example amazon.com */
                Domain?: components['schemas']['LogoRequest']['Domain'];
                /** @example 64 */
                Size?: components['schemas']['LogoRequest']['Size'];
                Mode?: components['schemas']['LogoRequest']['Mode'];
                BimiSelector?: components['schemas']['LogoRequest']['BimiSelector'];
                /** @example 2 */
                MaxScaleUpFactor?: components['schemas']['LogoRequest']['MaxScaleUpFactor'];
                Format?: components['schemas']['LogoRequest']['Format'];
                ComputedAddress?: components['schemas']['LogoRequest']['ComputedAddress'];
            };
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Binary data of the image */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/octet-stream': string;
                };
            };
            /** @description Return an empty image when we cannot find a valid logo */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'get_core-{_version}-members-{enc_id}-addresses': {
        parameters: {
            query?: {
                /**
                 * @description the page index using 0-based indexing
                 * @example 0
                 */
                Page?: number;
                /**
                 * @description the page size, maximum 150
                 * @example 150
                 */
                PageSize?: number;
            };
            header?: never;
            path: {
                /**
                 * @description the member id
                 * @example ACXDmTaBub14w==
                 */
                memberid: string;
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Addresses?: components['schemas']['AddressUser'][];
                    };
                };
            };
        };
    };
    'post_core-{_version}-members-{enc_id}-addresses': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CreateAddressInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Address?: components['schemas']['AddressUser'] & {
                            /** @example Fred */
                            MemberName?: string;
                            /** @example gony7nIWbnqaj8gebXLCQre1H1ZTKkhhFxA== */
                            MemberID?: string;
                        };
                    };
                };
            };
        };
    };
    'get_core-{_version}-addresses': {
        parameters: {
            query?: {
                PageSize?: components['schemas']['OffsetPagination']['PageSize'] & unknown;
                Page?: components['schemas']['OffsetPagination']['Page'] & unknown;
            };
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Addresses?: components['schemas']['AddressUser'][];
                        SignedAddressList?: components['schemas']['KTAddressListTransformer'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-addresses': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CreateAddressInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Address?: components['schemas']['AddressUser'] & {
                            /** @example Fred */
                            MemberName?: string;
                            /** @example gony7nIWbnqaj8gebXLCQre1H1ZTKkhhFxA== */
                            MemberID?: string;
                        };
                    };
                };
            };
        };
    };
    'post_core-{_version}-members-addresses-available': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CreateAddressInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'put_core-{_version}-addresses-order': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['ReorderAddressesInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-addresses-setup': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CreateAddressInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Address?: {
                            /** @example vuGSa1zsx0kV0jsfhX_xKSDQ0dvcLdMduA_c2c9fhaC1ZYCZKe8gony7nIWbnqaj8gebXLCQre1H1ZTKkhhFxA== */
                            ID?: string;
                            /** @example X_bSECsnvCSHHR44lXWMDOYDiZpbTUzqnQFyf_pqDq-JjXxXJCv_jQmSOLhD3e3A== */
                            DomainID?: string;
                            /** @example me@protonmail.com */
                            Email?: string;
                            /** @example 0 */
                            Send?: number;
                            /**
                             * @description 0 is disabled, 1 is enabled, can be set by user
                             * @example 1
                             */
                            Status?: number;
                            /**
                             * @description 1 is original PM, 2 is PM alias, 3 is custom domain address
                             * @example 1
                             */
                            Type?: number;
                            /**
                             * @description 1 is active address (Status=1 and has key), 0 is inactive (cannot send or receive)
                             * @example 0
                             */
                            Receive?: number;
                            /** @example 1 */
                            Order?: number;
                            /** @example hi */
                            DisplayName?: string;
                            /** @example signature */
                            Signature?: string;
                            /** @example 0 */
                            HasKeys?: number;
                            /** @example [] */
                            Keys?: string[];
                        };
                    };
                };
            };
        };
    };
    'get_core-{_version}-addresses-canonical': {
        parameters: {
            query?: {
                /** @description The list of email addresses, limited to maximum 100. They must be url encoded. */
                Emails?: string[];
            };
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 1001 */
                        Code?: number;
                        Responses?: {
                            /** @example john.doe+friend@gmail.com */
                            Email?: string;
                            Response?: {
                                Code?: components['schemas']['ResponseCodeSuccess'];
                                /** @example johndoe@gmail.com */
                                CanonicalEmail?: string;
                            };
                        }[];
                    };
                };
            };
        };
    };
    'get_core-{_version}-addresses-{enc_id}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the encrypted address id
                 * @example lKJlejjlk==
                 */
                enc_id: string;
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Address?: components['schemas']['AddressUser'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-addresses-{enc_id}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the encrypted address id
                 * @example lKJlejjlk==
                 */
                enc_id: string;
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['UpdateAddressInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'delete_core-{_version}-addresses-{enc_id}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the encrypted address id
                 * @example lKJlejjlk==
                 */
                enc_id: string;
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['AddressListInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'get_core-{_version}-domains-{enc_id}-addresses': {
        parameters: {
            query?: {
                /**
                 * @description the page index using 0-based indexing
                 * @example 0
                 */
                Page?: string;
                /**
                 * @description the page size, maximum 150
                 * @example 150
                 */
                PageSize?: number;
            };
            header?: never;
            path: {
                /**
                 * @description the encrypted domain id
                 * @example lKJlejjlk==
                 */
                domainid: string;
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Addresses?: (components['schemas']['AddressUser'] & {
                            /**
                             * @description whether this is the catch-all address for this domain
                             * @example 0
                             */
                            CatchAll?: number;
                            /** @example gony7nIWbnqaj8gebXLCQre1H1ZTKkhhFxA== */
                            MemberID?: string;
                        })[];
                    };
                };
            };
            /** @description Domain does not exist */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 2501 */
                        Code?: number;
                        /** @example Domain does not exist */
                        Error?: string;
                        Details?: string[];
                    };
                };
            };
        };
    };
    'get_core-{_version}-domains-{enc_id}-claimedAddresses': {
        parameters: {
            query?: {
                /**
                 * @description the page index using 0-based indexing
                 * @example 0
                 */
                Page?: string;
                /**
                 * @description the page size, maximum 150
                 * @example 150
                 */
                PageSize?: number;
            };
            header?: never;
            path: {
                /**
                 * @description the encrypted domain id
                 * @example lKJle...jjlk==
                 */
                DomainId: string;
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Addresses?: {
                            /** @example john.doe+friend@mydomain.com */
                            Email?: string;
                        }[];
                    };
                };
            };
            /** @description Domain does not exist */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 2501 */
                        Code?: number;
                        /** @example Domain does not exist */
                        Error?: string;
                        Details?: string[];
                    };
                };
            };
        };
    };
    'put_core-{_version}-addresses-{enc_id}-enable': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the encrypted id
                 * @example lKJlejjlk==
                 */
                enc_id: string;
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['AddressListInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-addresses-{enc_id}-disable': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the encrypted address id
                 * @example lKJlejjlk==
                 */
                enc_id: string;
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['AddressListInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-addresses-{enc_id}-delete': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the encrypted address id
                 * @example lKJlejjlk==
                 */
                enc_id: string;
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['AddressListInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-addresses-{enc_id}-type': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the encrypted id
                 * @example lKJlejjlk==
                 */
                enc_id: string;
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['ChangeAddressTypeInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-addresses-{enc_id}-rename-internal': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the encrypted id
                 * @example lKJl...ejjlk==
                 */
                enc_id: string;
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example john.doe */
                    Local?: string;
                    AddressKeys?: {
                        /** @example G1MbEt3Ep5P_...EWz8WbHVAOl_6h== */
                        ID?: string;
                        /** @example -----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK----- */
                        PrivateKey?: string;
                    }[];
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-addresses-{enc_id}-rename-external': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the encrypted id
                 * @example lKJle...jjlk==
                 */
                enc_id: string;
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['RenameUnverifiedAddressInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-addresses-{enc_addressId}-encryption': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the address id
                 * @example ACXDmTaBub14w==
                 */
                addressid: string;
                _version: string;
                enc_addressId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['UpdateEncryptionSignatureFlagsInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-members-addresses-permissions-organization-switch': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['AddressIdsInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @enum {integer} */
                        Code?: 1001;
                        Responses?: components['schemas']['SwitchAddressesOrganizationPermissionsTransformer'][];
                    };
                };
            };
        };
    };
    'post_core-{_version}-members-{memberId}-saml': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                memberId: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'delete_core-{_version}-members-{memberId}-saml': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                memberId: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'delete_core-{_version}-members-{memberId}-devices-{deviceId}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                memberId: components['schemas']['Id'];
                deviceId: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'delete_core-{_version}-members-{memberId}-devices': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                memberId: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'get_core-{_version}-members-{id}-devices': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the member id
                 * @example ACXDmTaBub14w==
                 */
                memberid: string;
                _version: string;
                id: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        AuthDevices?: components['schemas']['AuthDeviceOutput'][];
                    };
                };
            };
        };
    };
    'get_core-{_version}-members-devices-pending': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        AuthDevices?: components['schemas']['AuthDeviceOutput'][];
                    };
                };
            };
        };
    };
    'put_core-{_version}-members-{memberId}-devices-{deviceId}-reject': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the member id
                 * @example ACXDmTaBub14w==
                 */
                memberid: string;
                /**
                 * @description the device id
                 * @example ACXDmTaBub14w==
                 */
                deviceId: components['schemas']['Id'];
                _version: string;
                memberId: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-members-{memberId}-devices-reset': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the member id
                 * @example ACXDmTaBub14w==
                 */
                memberid: string;
                _version: string;
                memberId: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['ResetAuthDevicesInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-members-{enc_id}-keys': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CreateMemberKeysInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        MemberKey?: {
                            /** @example G1MbEt3Ep5P_EWz8WbHVAOl_6h== */
                            ID?: string;
                            /** @example 3 */
                            Version?: number;
                            /** @example -----BEGIN PGP PUBLIC KEY BLOCK-----.*-----END PGP PUBLIC KEY BLOCK----- */
                            PublicKey?: string;
                            /** @example -----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK----- */
                            PrivateKey?: string;
                            /** @example c93f767df53b0ca8395cfde90483475164ec6353 */
                            Fingerprint?: string;
                            Fingerprints?: string[];
                            /** @example -----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE----- */
                            Activation?: string;
                            /** @example 1 */
                            Primary?: number;
                            /** @example 3 */
                            Flags?: number;
                        };
                    };
                };
            };
        };
    };
    'get_core-{_version}-organizations-scim': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'put_core-{_version}-organizations-scim': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['UpdateScimTenantInput'];
            };
        };
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'post_core-{_version}-organizations-scim': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CreateScimTenantInput'];
            };
        };
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'post_core-{_version}-keys-user': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['AddNewUserKeyInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /** @example G1MbEt3Ep5P_EWz8WbHVAOl_6h== */
                        KeyID?: string;
                    };
                };
            };
        };
    };
    'get_core-{_version}-domains': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Domains?: components['schemas']['DomainTransformer'][];
                    };
                };
            };
        };
    };
    'post_core-{_version}-domains': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CreateDomainInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Domain?: components['schemas']['DomainTransformer'];
                    };
                };
            };
        };
    };
    'get_core-{_version}-domains-available': {
        parameters: {
            query?: {
                Type?: string | null;
            };
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Domains?: string[];
                    };
                };
            };
        };
    };
    'get_core-{_version}-domains-premium': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Domains?: string[];
                    };
                };
            };
        };
    };
    'get_core-{_version}-domains-optin': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /** @example proton.me */
                        Domain?: string;
                    };
                };
            };
        };
    };
    'get_core-{_version}-domains-{enc_id}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the encrypted id
                 * @example lKJlejjlk==
                 */
                enc_id: string;
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Domain?: components['schemas']['DomainTransformer'];
                    };
                };
            };
        };
    };
    'delete_core-{_version}-domains-{enc_id}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the encrypted id
                 * @example lKJlejjlk==
                 */
                enc_id: string;
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-domains-{enc_id}-catchall': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the encrypted id
                 * @example lKJlejjlk==
                 */
                enc_id: string;
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['UpdateCatchAllAddressInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'get_core-{_version}-organizations': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Organization?: {
                            /** @example My Org */
                            Name?: string;
                            /** @example My Org */
                            DisplayName?: string;
                            /** @example plus */
                            PlanName?: string;
                            /**
                             * @description Plan attribution to specific product, 1 = Mail, 2 = Drive, 4 = VPN
                             * @example 1
                             */
                            PlanFlags?: number;
                            /** @example 0 */
                            TwoFactorRequired?: number;
                            /**
                             * @description If non-null, number of seconds until 2FA setup enforced
                             * @example null
                             */
                            TwoFactorGracePeriod?: number | null;
                            /** @example null */
                            Theme?: string | null;
                            /** @example null */
                            Email?: string | null;
                            /** @example 4 */
                            MaxDomains?: number;
                            /** @example 20 */
                            MaxAddresses?: number;
                            /** @example 25 */
                            MaxCalendars?: number;
                            /** @example 10000000000 */
                            MaxSpace?: number;
                            /** @example 15 */
                            MaxMembers?: number;
                            /** @example 15 */
                            MaxVPN?: number;
                            /**
                             * @description Bits, 1 = catch-all addresses
                             * @example 0
                             */
                            Features?: number;
                            /**
                             * @description Bits, 1 = loyalty
                             * @example 0
                             */
                            Flags?: number;
                            /** @example 0 */
                            UsedDomains?: number;
                            /** @example 0 */
                            UsedAddresses?: number;
                            /** @example 0 */
                            UsedCalendars?: number;
                            /** @example 81788997 */
                            UsedSpace?: number;
                            /** @example 10000000000 */
                            AssignedSpace?: number;
                            /** @example 1 */
                            UsedMembers?: number;
                            /** @example 1 */
                            UsedVPN?: number;
                            /** @example 1 */
                            HasKeys?: number;
                            /**
                             * @example 1
                             * @enum {integer}
                             */
                            ToMigrate?: 0 | 1;
                            /**
                             * @example 1
                             * @enum {integer}
                             */
                            BrokenSKL?: 0 | 1;
                            /**
                             * @description Number of invitations remaining of the org. This value is decremented when an invitee accepts an invitation
                             * @example 5
                             */
                            InvitationsRemaining?: number;
                            /**
                             * @description Whether the org requires a key to operate. An org requires a key if it can have public managed members.
                             * @example 1
                             * @enum {integer}
                             */
                            RequiresKey?: 0 | 1;
                            /**
                             * @description Whether the org requires a custom domain to operate.
                             * @example 1
                             * @enum {integer}
                             */
                            RequiresDomain?: 0 | 1;
                            /** @example 6 */
                            MaxAI?: number;
                            /** @example 3 */
                            UsedAI?: number;
                            /** @example 6 */
                            MaxLumo?: number;
                            /** @example 3 */
                            UsedLumo?: number;
                        };
                    };
                };
            };
        };
    };
    'put_core-{_version}-groups-external-{jwt}': {
        parameters: {
            query?: {
                GroupID?: components['schemas']['Id'] | null;
            };
            header?: never;
            path: {
                _version: string;
                jwt: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
        };
    };
    'delete_core-{_version}-groups-external-{jwt}': {
        parameters: {
            query?: {
                GroupID?: components['schemas']['Id'] | null;
            };
            header?: never;
            path: {
                _version: string;
                jwt: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
        };
    };
    'post_core-{_version}-groups-members': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['AddGroupMemberRequest'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        GroupMember?: components['schemas']['GroupMemberResponse'];
                    };
                };
            };
        };
    };
    'get_core-{_version}-groups': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Total?: number;
                        Groups?: components['schemas']['GroupResponse'][];
                    };
                };
            };
        };
    };
    'post_core-{_version}-groups': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CreateGroupRequest'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Group?: components['schemas']['GroupResponse'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-groups-unsubscribe-{jwt}': {
        parameters: {
            query?: {
                GroupID?: components['schemas']['Id'] | null;
            };
            header?: never;
            path: {
                _version: string;
                jwt: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
        };
    };
    'put_core-{_version}-groups-{enc_id}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                enc_id: components['schemas']['EncryptedId'];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['UpdateGroupRequest'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Group?: components['schemas']['GroupResponse'];
                    };
                };
            };
        };
    };
    'delete_core-{_version}-groups-{enc_id}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                enc_id: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'delete_core-{_version}-groups-members-{enc_id}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                enc_id: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-groups-members-{groupMemberId}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                groupMemberId: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['EditGroupMemberRequest'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        GroupMember?: components['schemas']['GroupMemberResponse'];
                    };
                };
            };
        };
    };
    'get_core-v4-groups-members-external-{jwt}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                jwt: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ExternalGroupMembershipsResponse'];
                };
            };
        };
    };
    'get_core-v4-groups-{group_enc_id}-members': {
        parameters: {
            query?: {
                PageSize?: components['schemas']['OffsetPagination']['PageSize'] & unknown;
                Page?: components['schemas']['OffsetPagination']['Page'] & unknown;
            };
            header?: never;
            path: {
                group_enc_id: components['schemas']['EncryptedId'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GroupMembersResponse'];
                };
            };
        };
    };
    'get_core-v4-groups-members-internal': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InternalGroupMembershipsResponse'];
                };
            };
        };
    };
    'put_core-{_version}-groups-{enc_id}-reinvite': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                enc_id: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-groups-members-{groupMemberId}-resume': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                groupMemberId: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        GroupMember?: components['schemas']['GroupMemberResponse'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-invites': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example notification@email */
                    Email?: string;
                    /**
                     * @description 1 for mail, 2 for VPN
                     * @example 1
                     */
                    Type?: number;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
        };
    };
    'post_core-{_version}-invites-unused': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'post_core-{_version}-invites-check': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'get_core-{_version}-keys-all': {
        parameters: {
            query: {
                /**
                 * @description The lookup email
                 * @example test@example.com
                 */
                Email: string;
                /**
                 * @description If 1, it will not perform any external lookup, and only provide information from the Proton DB
                 * @example 1
                 */
                InternalOnly?: '0' | '1';
            };
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Success code
                         * @example 1000
                         */
                        Code?: number;
                        /** @description Information about the internal address itself, if it exists. Since the SKL is mandatory, this will never be nullable. */
                        Address?: {
                            /** @description Public key list for this address with metadata */
                            Keys?: {
                                /**
                                 * @description Armored OpenPGP public key
                                 * @example -----BEGIN PGP PUBLIC KEY BLOCK-----.*-----END PGP PUBLIC KEY BLOCK-----
                                 */
                                PublicKey?: string;
                                /**
                                 * @description 1 when primary, 0 when not
                                 * @example 1
                                 */
                                Primary?: number;
                                /**
                                 * @description Key usage flags (see confluence docs about Signed Key Lists)
                                 * @example 3
                                 */
                                Flags?: number;
                                /**
                                 * @description Always (0) internal for verified keys
                                 * @example 0
                                 */
                                Source?: number;
                            }[];
                            /** @description Signed metadata to verify the public key list */
                            SignedKeyList?: components['schemas']['KTKeyList'] | null;
                        };
                        /** @description Information about the catch all address itself, if it exists. This can be null if the address keys are valid */
                        CatchAll?: {
                            /** @description Public key list for the catch-all address with metadata */
                            Keys?: {
                                /**
                                 * @description Armored OpenPGP public key
                                 * @example -----BEGIN PGP PUBLIC KEY BLOCK-----.*-----END PGP PUBLIC KEY BLOCK-----
                                 */
                                PublicKey?: string;
                                /**
                                 * @description 1 when primary, 0 when not
                                 * @example 1
                                 */
                                Primary?: number;
                                /**
                                 * @description Key usage flags (see confluence docs about Signed Key Lists)
                                 * @example 3
                                 */
                                Flags?: number;
                                /**
                                 * @description Always (0) internal for verified keys
                                 * @example 0
                                 */
                                Source?: number;
                            }[];
                            /** @description Signed metadata to verify the public key list */
                            SignedKeyList?: components['schemas']['KTKeyList'] | null;
                        } | null;
                        /** @description Any other key that cannot be verified, such as Proton legacy keys or WKD. This can be null if there are none. */
                        Unverified?: {
                            /** @description Public key list without any trusted metadata. These keys should not be used for signature verification, but for opportunistic encryption only. Can be pinned. */
                            Keys?: {
                                /**
                                 * @description Armored OpenPGP public key
                                 * @example -----BEGIN PGP PUBLIC KEY BLOCK-----.*-----END PGP PUBLIC KEY BLOCK-----
                                 */
                                PublicKey?: string;
                                /**
                                 * @description 1 when primary, 0 when not
                                 * @example 1
                                 */
                                Primary?: number;
                                /**
                                 * @description Key usage flags (see confluence docs about Signed Key Lists)
                                 * @example 3
                                 */
                                Flags?: number;
                                /**
                                 * @description 0: Internal, 1: WKD, 2: KOO
                                 * @example 0
                                 * @enum {integer}
                                 */
                                Source?: 0 | 1 | 2;
                            }[];
                        } | null;
                        /** @description List of warnings to show to the user related to phishing and message routing */
                        Warnings?: string[];
                        /**
                         * @description True when domain has valid proton MX
                         * @example true
                         */
                        ProtonMX?: boolean;
                        /**
                         * @description Tells whether this is an official Proton address
                         * @example 1
                         */
                        IsProton?: number;
                    };
                };
            };
            /** @description No address found */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Error code 33102 corresponds to a failed lookup. It is returned only when (a) internal only lookup is requested and the user does not exist or (b) when the address is routed towards an internal domain (with valid MX records) and it does not exist internally
                         * @example 33102
                         */
                        Code?: number;
                    };
                };
            };
        };
    };
    'get_core-{_version}-keys-signedkeylists': {
        parameters: {
            query?: {
                /** @deprecated */
                Email?: string | null;
                Identifier?: string | null;
                /**
                 * @deprecated
                 * @description It will return all SKLs where a revision change happened after the specified epoch ID
                 */
                AfterEpochID?: number;
                /** @description It will return all SKLs where a revision change happened after the specified revision */
                AfterRevision?: number;
            };
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        SignedKeyLists?: components['schemas']['KTKeyList'][];
                    };
                };
            };
        };
    };
    'post_core-{_version}-keys-signedkeylists': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['AddressKeyInput3'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        SignedKeyList?: components['schemas']['KTKeyList'] | null;
                    };
                };
            };
        };
    };
    'get_core-{_version}-keys-signedkeylist': {
        parameters: {
            query?: {
                /** @deprecated */
                Email?: string | null;
                Identifier?: string | null;
                /** @description The returned SKL will be for the specified revision, if it exists */
                Revision?: number;
            };
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        SignedKeyList?: components['schemas']['KTKeyList'];
                    };
                };
            };
        };
    };
    'get_core-{_version}-keys-salts': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        KeySalts?: {
                            /** @example <encrypted_key_id> */
                            ID?: string;
                            /** @example <base64_encoded_key_salt> */
                            KeySalt?: string;
                        }[];
                    };
                };
            };
        };
    };
    'put_core-{_version}-keys-address-{enc_id}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the key id
                 * @example G1MbEt3Ep5P_EWz8WbHVAOl_6h==
                 */
                enc_id: string;
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['AddressKeyInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-keys-address-{enc_id}-subkeys': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['AddressKeyInput2'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-keys-signedkeylists-signature': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['AddressKeyInput4'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-keys-{enc_id}-primary': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the key id
                 * @example ACXDmTaBub14w==
                 */
                enc_id: string;
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['SignedKeyListInputWrapper'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-keys-{enc_id}-flags': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the key id
                 * @example ACXDmTaBub14w==
                 */
                enc_id: string;
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['UpdateFlagsInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-keys-tokens': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['ReplaceAddressTokensInput'];
            };
        };
        responses: {
            /** @description Address tokens correctly uploaded */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
            /** @description Invalid token list */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'put_core-{_version}-keys-user-{enc_id}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the user key id
                 * @example G1MbEt3Ep5P_EWz8WbHVAOl_6h==
                 */
                enc_id: string;
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['ReactivateUserKeyInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'delete_core-{_version}-keys-user-{enc_id}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The User Key encrypted id
                 * @example lKJlej...jlk==
                 */
                enc_id: string;
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User key correctly deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
            /** @description Unable to delete user key, some preconditions are missing */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'post_core-{_version}-keys-private-upgrade': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example <base64_encoded_key_salt> */
                    KeySalt?: string;
                    Keys?: {
                        /** @example G1MbEt3Ep5P_EWz8WbHVAOl_6h== */
                        ID?: string;
                        /** @example -----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK----- */
                        PrivateKey?: string;
                    }[];
                    UserKeys?: {
                        /** @example G1MbEt3Ep5P_EWz8WbHVAOl_6h== */
                        ID?: string;
                        /** @example -----BEGIN PGP PRIVATE KEY BLOCK-----.* */
                        PrivateKey?: string;
                    }[];
                    AddressKeys?: {
                        /** @example adsft3Ep5P_EWz8WbasdkVAOl_6h== */
                        ID?: string;
                        /** @example -----BEGIN PGP PRIVATE KEY BLOCK-----.* */
                        PrivateKey?: string;
                        /** @example -----BEGIN PGP MESSAGE-----.* */
                        Token?: string;
                        /** @example ----BEGIN PGP SIGNATURE-----.* */
                        Signature?: string;
                    }[];
                    SignedKeyLists?: {
                        'CasdiSFq_TW7i8FtJGuQyFEq0=='?: {
                            /** @example JSON.stringify([{"SHA256Fingerprints": ["164ec63...53c93f7", "f767d...f53b0c"],"Fingerprint": "c93f767df53b0ca8395cfde90483475164ec6353","Primary": 1,"Flags": 3}]) */
                            Data?: string;
                            /** @example -----BEGIN PGP SIGNATURE-----.*-----END PGP SIGNATURE----- */
                            Signature?: string;
                        };
                    };
                    /**
                     * @description If org admin and can decrypt org key
                     * @example -----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK-----
                     */
                    OrganizationKey?: string;
                    Auth?: {
                        /** @example 4 */
                        Version?: number;
                        /** @example <encrypted_id> */
                        ModulusID?: string;
                        /** @example <base64_encoded_salt> */
                        Salt?: string;
                        /** @example <base64_encoded_verifier> */
                        Verifier?: string;
                    };
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-keys-migrate': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['MigrateKeyInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-keys-{enc_id}-activate': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['LegacyKeyInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-keys-{enc_id}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['LegacyKeyInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-keys-reset': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['ResetUserKeyInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'get_core-{_version}-members': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Members?: components['schemas']['MemberInfo'][];
                    };
                };
            };
        };
    };
    'post_core-{_version}-members': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CreateMemberInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Member?: components['schemas']['MemberInfo'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-members-invitations': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CreateMemberInvitationInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Member?: components['schemas']['MemberInfo'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-members-invitations-{enc_id}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the member id
                 * @example ACXDmTaBub14w==
                 */
                memberid: string;
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['UpdateMemberInvitationInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Member?: components['schemas']['MemberInfo'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-members-{enc_id}-disable': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the member id
                 * @example ACXDmTaBub14w==
                 */
                memberid: string;
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-members-{enc_id}-enable': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the member id
                 * @example ACXDmTaBub14w==
                 */
                memberid: string;
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-members-{enc_id}-quota': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the member id
                 * @example ACXDmTaBub14w==
                 */
                memberid: string;
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example 9900000000 */
                    MaxSpace?: number;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-members-{enc_id}-name': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the member id
                 * @example ACXDmTaBub14w==
                 */
                memberid: string;
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example Jason */
                    Name?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-members-{enc_id}-role': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the member id
                 * @example ACXDmTaBub14w==
                 */
                memberid: string;
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['UpdateMemberRoleInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-members-{memberId}-ai': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                memberId: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['UpdateMemberAIEntitlementInput'];
            };
        };
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'put_core-{_version}-members-{enc_id}-privatize': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the member id
                 * @example ACXDmTaBub14w==
                 */
                memberid: string;
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'get_core-{_version}-members-me': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Member?: components['schemas']['MemberInfo'];
                    };
                };
            };
        };
    };
    'get_core-{_version}-members-me-unprivatize': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GetMemberUnprivatizationOutput'] & {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-members-me-unprivatize': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['AcceptMemberUnprivatizationInput'];
            };
        };
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'delete_core-{_version}-members-me-unprivatize': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'post_core-{_version}-members-{id}-unprivatize-resend': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                id: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'post_core-{_version}-members-{id}-unprivatize': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                id: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['RequestMemberUnprivatizationInput'];
            };
        };
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'delete_core-{_version}-members-{id}-unprivatize': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                id: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'get_core-{_version}-members-{enc_id}': {
        parameters: {
            query?: {
                /**
                 * @description If set to 1, will include each members addresses in the response. Defaults to 0.
                 * @example 1
                 */
                IncludeAddresses?: number;
            };
            header?: never;
            path: {
                /**
                 * @description the member id
                 * @example ACXDmTaBub14w==
                 */
                memberid: string;
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Member?: components['schemas']['MemberInfo'];
                    };
                };
            };
        };
    };
    'delete_core-{_version}-members-{enc_id}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the member id
                 * @example ACXDmTaBub14w==
                 */
                memberid: string;
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'get_core-{_version}-members-{enc_id}-details': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the member id
                 * @example ACXDmTa...Bub14w==
                 */
                memberid: string;
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Last login time (unix timestamp)
                         * @example 1654615966
                         */
                        LastLoginTime?: number | null;
                        /**
                         * @description The user id associated to the member
                         * @example xRvCGwF...aGyFEq0g==
                         */
                        UserID?: string;
                        /**
                         * @description Last activity time (unix timestamp)
                         * @example 1654615966
                         */
                        LastActivityTime?: number | null;
                        /**
                         * @description Creation time (unix timestamp)
                         * @example 1654615966
                         */
                        CreationTime?: number;
                    };
                };
            };
        };
    };
    'get_core-{_version}-members-{enc_id}-authlog': {
        parameters: {
            query?: {
                /**
                 * @description the page index using 0-based indexing
                 * @example 0
                 */
                Page?: string;
                /**
                 * @description the page size, maximum 150
                 * @example 150
                 */
                PageSize?: string;
            };
            header?: never;
            path: {
                /**
                 * @description the member id
                 * @example ACXDmTaBub14w==
                 */
                memberid: string;
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description List of authentication logs, ordered by "Time" (timestamp of the event) descending */
                        Log?: components['schemas']['AuthLogResponse'][];
                    };
                };
            };
        };
    };
    'put_core-{_version}-members-{enc_id}-require2fa': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'delete_core-{_version}-members-{enc_id}-require2fa': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'post_core-{_version}-members-{enc_id}-permissions-forwarding': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the member id
                 * @example ACXDmTaBub14w==
                 */
                memberid: string;
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'delete_core-{_version}-members-{enc_id}-permissions-forwarding': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the member id
                 * @example ACXDmTaBub14w==
                 */
                memberid: string;
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-members-permissions': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['MemberManagePermissionsDto'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-members-{enc_id}-keys-setup': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the member id
                 * @example DFSXmTadD14w==
                 */
                memberid: string;
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['UpdateMemberKeysInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Member?: {
                            /** @example xRvCGwFq_TW7i8FtJaGyFEq0g== */
                            ID?: string;
                            /** @example 2 */
                            Role?: number;
                            /** @example 1 */
                            Private?: number;
                            /** @example 0 */
                            Type?: number;
                            /** @example 100000000 */
                            MaxSpace?: number;
                            /** @example 0 */
                            MaxVPN?: number;
                            /** @example Jason */
                            Name?: string;
                            /** @example 81780955 */
                            UsedSpace?: number;
                            /** @example 0 */
                            Self?: number;
                            /** @example 0 */
                            Subscriber?: number;
                            /** @example -----BEGIN PGP PUBLIC KEY BLOCK-----.*-----END PGP PUBLIC KEY BLOCK----- */
                            PublicKey?: string;
                            Keys?: {
                                /** @example adsfgt3Ep5P_EWz8WbHVAOl_6h== */
                                ID?: string;
                                /** @example 3 */
                                Version?: number;
                                /** @example -----BEGIN PGP PRIVATE KEY BLOCK-----.*-----END PGP PRIVATE KEY BLOCK----- */
                                PrivateKey?: string;
                                /** @example null or -----BEGIN PGP MESSAGE-----.*-----END PGP MESSAGE----- */
                                Token?: string;
                                /** @example null or -----BEGIN PGP SIGNATURE-----.*-----END PGP SIGNATURE----- */
                                Signature?: string;
                                /** @example null or -----BEGIN PGP SIGNATURE-----.*-----END PGP SIGNATURE-----" */
                                OrgSignature?: string;
                                /** @example c93f767df53b0ca8395cfde90483475164ec6353 */
                                Fingerprint?: string;
                                /** @example 1 */
                                Primary?: number;
                            }[];
                        };
                    };
                };
            };
        };
    };
    'post_core-{_version}-members-{enc_id}-keys-migrate': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the member id
                 * @example DFSXmTadD14w==
                 */
                memberid: string;
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    AddressKeys?: {
                        /** @example adsft3Ep5P_EWz8WbasdkVAOl_6h== */
                        ID?: string;
                        /** @example -----BEGIN PGP PRIVATE KEY BLOCK-----.* */
                        PrivateKey?: string;
                        /** @example -----BEGIN PGP MESSAGE-----.* */
                        Token?: string;
                        /** @example -----BEGIN PGP SIGNATURE-----.* */
                        Signature?: string;
                        /** @example -----BEGIN PGP SIGNATURE-----.* */
                        OrgSignature?: string;
                    }[];
                    SignedKeyLists?: {
                        /** @description AddressID */
                        'CasdiSFq_TW7i8FtJGuQyFEq0=='?: {
                            /** @example JSON.stringify([{""SHA256Fingerprints"": [""164ec63...53c93f7"", ""f767d...f53b0c""],""Fingerprint"": ""c93f767df53b0ca8395cfde90483475164ec6353"",""Primary"": 1,""Flags"": 3}]) */
                            Data?: string;
                            /** @example -----BEGIN PGP SIGNATURE-----.*-----END PGP SIGNATURE----- */
                            Signature?: string;
                        };
                    };
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-members-{enc_id}-keys-signedkeylists': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the member id
                 * @example DFSXmTadD14w==
                 */
                memberid: string;
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    SignedKeyLists?: {
                        /** @description AddressID */
                        'CasdiSFq_TW7i8FtJGuQyFEq0=='?: {
                            /** @example JSON.stringify([{""SHA256Fingerprints"": [""164ec63...53c93f7"", ""f767d...f53b0c""],""Fingerprint"": ""c93f767df53b0ca8395cfde90483475164ec6353"",""Primary"": 1,""Flags"": 3}]) */
                            Data?: string;
                            /** @example -----BEGIN PGP SIGNATURE-----.*-----END PGP SIGNATURE----- */
                            Signature?: string;
                        };
                    };
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-members-{enc_id}-keys-unprivatize': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the member id
                 * @example DFSXmTadD14w==
                 */
                memberid: string;
                _version: string;
                enc_id: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['UnprivatizeMemberInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-members-{enc_id}-auth': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description If true, LOCKED and PASSWORD scopes will be assigned to the child session
                     * @example false
                     */
                    Unlock?: boolean;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_ephemeral>
                     */
                    ClientEphemeral?: string;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_proof>
                     */
                    ClientProof?: string;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <hex_encoded_session_id>
                     */
                    SRPSession?: string;
                    /**
                     * @description Optional, for inline re-authentication, either this or the FIDO2 object
                     * @example 123456 or recovery code
                     */
                    TwoFactorCode?: string;
                    /** @description Optional, for inline re-authentication, either this or the TwoFactorCode */
                    FIDO2?: {
                        /** @description The same AuthenticationOptions received as a challenge from the server */
                        AuthenticationOptions?: Record<string, never>;
                        /** @description clientData (base64) returned from the client authentication library */
                        ClientData?: string;
                        /** @description authenticatorData (base64) returned from the client authentication library */
                        AuthenticatorData?: string;
                        /** @description signature (base64) returned from the client authentication library */
                        Signature?: string;
                        /** @description CredentialID used */
                        CredentialID?: Record<string, never>[];
                    };
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /** @example f3804b2ad70c3992a9496ff07f3e9b93 */
                        UID?: string;
                        /** @example 0 */
                        LocalID?: number;
                        /**
                         * @description Present only if inline re-authentication is submitted
                         * @example <base64_encoded_proof>
                         */
                        ServerProof?: string;
                        /**
                         * @description Do not use this parameter unless you have been instructed to do so. This counts how many refreshes did the session have
                         * @example 5
                         */
                        RefreshCounter?: number;
                    };
                };
            };
        };
    };
    'get_core-{_version}-members-{enc_id}-sessions': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Sessions?: (components['schemas']['Session'] & {
                            /**
                             * @deprecated
                             * @example gony7nIW...KkhhFxA==
                             */
                            UserID?: string | null;
                            /**
                             * @deprecated
                             * @example PlISx5...cSY-tfNw==
                             */
                            OwnerUserID?: string | null;
                            /**
                             * @description Localized name of ClientID used in the login process
                             * @example Proton Account for web
                             */
                            LocalizedClientName?: string;
                        })[];
                        /** @example 0 */
                        LocalID?: number;
                        /**
                         * @description Present only if inline re-authentication is submitted
                         * @example <base64_encoded_proof>
                         */
                        ServerProof?: string;
                    };
                };
            };
        };
    };
    'post_core-{_version}-members-{enc_id}-sessions': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description If true, LOCKED and PASSWORD scopes will be assigned to the child session
                     * @example false
                     */
                    Unlock?: boolean;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_ephemeral>
                     */
                    ClientEphemeral?: string;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_proof>
                     */
                    ClientProof?: string;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <hex_encoded_session_id>
                     */
                    SRPSession?: string;
                    /**
                     * @description Optional, for inline re-authentication, either this or the FIDO2 object
                     * @example 123456 or recovery code
                     */
                    TwoFactorCode?: string;
                    /** @description Optional, for inline re-authentication, either this or the TwoFactorCode */
                    FIDO2?: {
                        /** @description The same AuthenticationOptions received as a challenge from the server */
                        AuthenticationOptions?: Record<string, never>;
                        /** @description clientData (base64) returned from the client authentication library */
                        ClientData?: string;
                        /** @description authenticatorData (base64) returned from the client authentication library */
                        AuthenticatorData?: string;
                        /** @description signature (base64) returned from the client authentication library */
                        Signature?: string;
                        /** @description CredentialID used */
                        CredentialID?: Record<string, never>[];
                    };
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /** @example f3804b2ad70c3992a9496ff07f3e9b93 */
                        UID?: string;
                        /** @example 0 */
                        LocalID?: number;
                        /**
                         * @description Present only if inline re-authentication is submitted
                         * @example <base64_encoded_proof>
                         */
                        ServerProof?: string;
                        /**
                         * @description Do not use this parameter unless you have been instructed to do so. This counts how many refreshes did the session have
                         * @example 5
                         */
                        RefreshCounter?: number;
                    };
                };
            };
        };
    };
    'delete_core-{_version}-members-{enc_id}-sessions': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'delete_core-{_version}-members-{enc_id}-sessions-{uid}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                enc_id: string;
                uid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'get_core-{_version}-organizations-keys': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['GetOrganizationKeysOutput'];
                };
            };
        };
    };
    'put_core-{_version}-organizations-keys': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['ReplaceOrganizationKeysInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /**
                         * @description Present only if inline re-authentication is submitted
                         * @example <base64_encoded_proof>
                         */
                        ServerProof?: string;
                    };
                };
            };
        };
    };
    'post_core-{_version}-organizations-keys': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['ReplaceOrganizationKeysInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /**
                         * @description Present only if inline re-authentication is submitted
                         * @example <base64_encoded_proof>
                         */
                        ServerProof?: string;
                    };
                };
            };
        };
    };
    'get_core-{_version}-organizations-keys-backup': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /** @example -----BEGIN PGP PRIVATE KEY BLOCK-----*-----BEGIN PGP PRIVATE KEY BLOCK----- */
                        PrivateKey?: string;
                        /** @example 0123456789abcdef */
                        KeySalt?: string;
                    };
                };
            };
        };
    };
    'put_core-{_version}-organizations-keys-backup': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['UpdateOrganizationKeyBackupInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /**
                         * @description Present only if inline re-authentication is submitted
                         * @example <base64_encoded_proof>
                         */
                        ServerProof?: string;
                    };
                };
            };
        };
    };
    'post_core-{_version}-organizations-keys-backup': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['UpdateOrganizationKeyBackupInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /**
                         * @description Present only if inline re-authentication is submitted
                         * @example <base64_encoded_proof>
                         */
                        ServerProof?: string;
                    };
                };
            };
        };
    };
    'put_core-{_version}-organizations-name': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['UpdateOrganizationNameInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Organization?: {
                            /** @example E-Corp */
                            Name?: string;
                            /** @example E-Corp */
                            DisplayName?: string;
                            /** @example plus */
                            PlanName?: string;
                            /** @example 0 */
                            TwoFactorRequired?: number;
                            /** @example null */
                            TwoFactorGracePeriod?: number | null;
                            /** @example null */
                            Theme?: string | null;
                            /** @example null */
                            Email?: string | null;
                            /** @example 4 */
                            MaxDomains?: number;
                            /** @example 20 */
                            MaxAddresses?: number;
                            /** @example 25 */
                            MaxCalendars?: number;
                            /** @example 10000000000 */
                            MaxSpace?: number;
                            /** @example 15 */
                            MaxMembers?: number;
                            /** @example 5 */
                            MaxVPN?: number;
                            /** @example 0 */
                            Features?: number;
                            /** @example 0 */
                            Flags?: number;
                            /** @example 0 */
                            UsedDomains?: number;
                            /** @example 0 */
                            UsedAddresses?: number;
                            /** @example 81788997 */
                            UsedSpace?: number;
                            /** @example 10000000000 */
                            AssignedSpace?: number;
                            /** @example 1 */
                            UsedMembers?: number;
                            /** @example 5 */
                            UsedVPN?: number;
                            /** @example 1 */
                            HasKeys?: number;
                            /** @example 6 */
                            MaxAI?: number;
                            /** @example 3 */
                            UsedAI?: number;
                            /** @example 6 */
                            MaxLumo?: number;
                            /** @example 3 */
                            UsedLumo?: number;
                        };
                    };
                };
            };
        };
    };
    'put_core-{_version}-organizations-email': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['UpdateOrganizationEmailInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Organization?: {
                            /** @example E-Corp */
                            Name?: string;
                            /** @example E-Corp */
                            DisplayName?: string;
                            /** @example plus */
                            PlanName?: string;
                            /** @example 0 */
                            TwoFactorRequired?: number;
                            /** @example null */
                            TwoFactorGracePeriod?: number | null;
                            /** @example null */
                            Theme?: string | null;
                            /** @example null */
                            Email?: string | null;
                            /** @example 4 */
                            MaxDomains?: number;
                            /** @example 20 */
                            MaxAddresses?: number;
                            /** @example 25 */
                            MaxCalendars?: number;
                            /** @example 10000000000 */
                            MaxSpace?: number;
                            /** @example 15 */
                            MaxMembers?: number;
                            /** @example 5 */
                            MaxVPN?: number;
                            /** @example 0 */
                            Features?: number;
                            /** @example 0 */
                            Flags?: number;
                            /** @example 0 */
                            UsedDomains?: number;
                            /** @example 0 */
                            UsedAddresses?: number;
                            /** @example 81788997 */
                            UsedSpace?: number;
                            /** @example 10000000000 */
                            AssignedSpace?: number;
                            /** @example 1 */
                            UsedMembers?: number;
                            /** @example 5 */
                            UsedVPN?: number;
                            /** @example 1 */
                            HasKeys?: number;
                            /** @example 6 */
                            MaxAI?: number;
                            /** @example 3 */
                            UsedAI?: number;
                            /** @example 6 */
                            MaxLumo?: number;
                            /** @example 3 */
                            UsedLumo?: number;
                        };
                    };
                };
            };
        };
    };
    'put_core-{_version}-organizations-2fa': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['UpdateOrganizationTwoFactorGracePeriodInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Organization?: {
                            /** @example E-Corp */
                            Name?: string;
                            /** @example E-Corp */
                            DisplayName?: string;
                            /** @example plus */
                            PlanName?: string;
                            /** @example 0 */
                            TwoFactorRequired?: number;
                            /** @example null */
                            TwoFactorGracePeriod?: number | null;
                            /** @example null */
                            Theme?: string | null;
                            /** @example null */
                            Email?: string | null;
                            /** @example 4 */
                            MaxDomains?: number;
                            /** @example 20 */
                            MaxAddresses?: number;
                            /** @example 25 */
                            MaxCalendars?: number;
                            /** @example 10000000000 */
                            MaxSpace?: number;
                            /** @example 15 */
                            MaxMembers?: number;
                            /** @example 5 */
                            MaxVPN?: number;
                            /** @example 0 */
                            Features?: number;
                            /** @example 0 */
                            Flags?: number;
                            /** @example 0 */
                            UsedDomains?: number;
                            /** @example 0 */
                            UsedAddresses?: number;
                            /** @example 81788997 */
                            UsedSpace?: number;
                            /** @example 10000000000 */
                            AssignedSpace?: number;
                            /** @example 1 */
                            UsedMembers?: number;
                            /** @example 5 */
                            UsedVPN?: number;
                            /** @example 1 */
                            HasKeys?: number;
                            /** @example 6 */
                            MaxAI?: number;
                            /** @example 3 */
                            UsedAI?: number;
                            /** @example 6 */
                            MaxLumo?: number;
                            /** @example 3 */
                            UsedLumo?: number;
                        };
                    };
                };
            };
        };
    };
    'put_core-{_version}-organizations-require2fa': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description 1 = at least enforced for admin members, 2 = enforced for all members
                     * @example 1
                     */
                    Require?: number;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Organization?: {
                            /** @example E-Corp */
                            Name?: string;
                            /** @example E-Corp */
                            DisplayName?: string;
                            /** @example plus */
                            PlanName?: string;
                            /** @example 0 */
                            TwoFactorRequired?: number;
                            /** @example null */
                            TwoFactorGracePeriod?: number | null;
                            /** @example null */
                            Theme?: string | null;
                            /** @example null */
                            Email?: string | null;
                            /** @example 4 */
                            MaxDomains?: number;
                            /** @example 20 */
                            MaxAddresses?: number;
                            /** @example 20 */
                            MaxCalendars?: number;
                            /** @example 10000000000 */
                            MaxSpace?: number;
                            /** @example 15 */
                            MaxMembers?: number;
                            /** @example 5 */
                            MaxVPN?: number;
                            /** @example 0 */
                            Features?: number;
                            /** @example 0 */
                            Flags?: number;
                            /** @example 0 */
                            UsedDomains?: number;
                            /** @example 0 */
                            UsedAddresses?: number;
                            /** @example 81788997 */
                            UsedSpace?: number;
                            /** @example 10000000000 */
                            AssignedSpace?: number;
                            /** @example 1 */
                            UsedMembers?: number;
                            /** @example 5 */
                            UsedVPN?: number;
                            /** @example 1 */
                            HasKeys?: number;
                            /** @example 6 */
                            MaxAI?: number;
                            /** @example 3 */
                            UsedAI?: number;
                            /** @example 6 */
                            MaxLumo?: number;
                            /** @example 3 */
                            UsedLumo?: number;
                        };
                    };
                };
            };
        };
    };
    'delete_core-{_version}-organizations-require2fa': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Organization?: {
                            /** @example E-Corp */
                            Name?: string;
                            /** @example E-Corp */
                            DisplayName?: string;
                            /** @example plus */
                            PlanName?: string;
                            /** @example 0 */
                            TwoFactorRequired?: number;
                            /** @example null */
                            TwoFactorGracePeriod?: number | null;
                            /** @example null */
                            Theme?: string | null;
                            /** @example null */
                            Email?: string | null;
                            /** @example 4 */
                            MaxDomains?: number;
                            /** @example 20 */
                            MaxAddresses?: number;
                            /** @example 20 */
                            MaxCalendars?: number;
                            /** @example 10000000000 */
                            MaxSpace?: number;
                            /** @example 15 */
                            MaxMembers?: number;
                            /** @example 5 */
                            MaxVPN?: number;
                            /** @example 0 */
                            Features?: number;
                            /** @example 0 */
                            Flags?: number;
                            /** @example 0 */
                            UsedDomains?: number;
                            /** @example 0 */
                            UsedAddresses?: number;
                            /** @example 81788997 */
                            UsedSpace?: number;
                            /** @example 10000000000 */
                            AssignedSpace?: number;
                            /** @example 1 */
                            UsedMembers?: number;
                            /** @example 5 */
                            UsedVPN?: number;
                            /** @example 1 */
                            HasKeys?: number;
                            /** @example 6 */
                            MaxAI?: number;
                            /** @example 3 */
                            UsedAI?: number;
                            /** @example 6 */
                            MaxLumo?: number;
                            /** @example 3 */
                            UsedLumo?: number;
                        };
                    };
                };
            };
        };
    };
    'put_core-{_version}-organizations-keys-activate': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['ActivateOrganizationKeyInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'delete_core-{_version}-organizations-membership': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-organizations-2fa-remind': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-organizations-keys-migrate': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['MigrateOrganizationKeysInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
            /** @description Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 2011 */
                        Code?: number;
                        /** @example Organization already migrated */
                        Error?: string;
                    };
                };
            };
        };
    };
    'get_core-{_version}-organizations-keys-signature': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ProtonSuccess'] &
                        components['schemas']['GetOrganizationIdentityOutput'];
                };
            };
        };
    };
    'put_core-{_version}-organizations-keys-signature': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['UpdateOrgKeyFingerprintSignatureInput'];
            };
        };
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'get_core-{_version}-organizations-logo-{logo_id}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                logo_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Binary data of the image */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/octet-stream': string;
                };
            };
        };
    };
    'get_core-{_version}-organizations-settings': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ProtonSuccess'] &
                        components['schemas']['OrganizationSettings2'];
                };
            };
        };
    };
    'put_core-{_version}-organizations-settings': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['OrganizationSettings'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ProtonSuccess'];
                };
            };
        };
    };
    'post_core-{_version}-organizations-settings-logo': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['OrganizationLogo'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ProtonSuccess'];
                };
            };
        };
    };
    'delete_core-{_version}-organizations-settings-logo': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ProtonSuccess'];
                };
            };
        };
    };
    'get_core-{_version}-captcha': {
        parameters: {
            query: {
                /** @example 1 */
                Dark?: string | null;
                /** @example 1 */
                ForceWebMessaging?: number | null;
                /** @example a9mT4hlKgS_h66JKxe-MC5pp */
                Token: string;
            };
            header?: {
                'x-pm-nonce'?: string | null;
                host?: string;
            };
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Captcha HTML page */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'get_core-{_version}-resources-captcha': {
        parameters: {
            query: {
                /** @example 1 */
                Dark?: string | null;
                /** @example 1 */
                ForceWebMessaging?: number | null;
                /** @example a9mT4hlKgS_h66JKxe-MC5pp */
                Token: string;
            };
            header?: {
                'x-pm-nonce'?: string | null;
                host?: string;
            };
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Captcha HTML page */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'get_core-{_version}-resources-zendesk': {
        parameters: {
            query?: {
                /** @example 83fabdab-1337-4fd7-85c0-39baf5c114fe */
                Key?: string;
            };
            header?: {
                'x-pm-nonce'?: string | null;
            };
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Zendesk chat */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'post_core-{_version}-saml-setup-fields': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['Sso'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-saml-setup-xml': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['SsoXml'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-saml-setup-url': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['SsoUrl'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        SSO?: components['schemas']['SsoTransformer'];
                    };
                };
            };
        };
    };
    'get_core-{_version}-saml-configs': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        SSO?: components['schemas']['SsoTransformer'];
                    };
                };
            };
        };
    };
    'get_core-{_version}-saml-configs-{enc_id}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                enc_id: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        SSO?: components['schemas']['SsoTransformer'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-saml-configs-{enc_id}-fields': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                enc_id: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['Sso'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        SSO?: components['schemas']['SsoTransformer'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-saml-configs-{enc_id}-delete': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                enc_id: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        SSO?: components['schemas']['SsoTransformer'];
                    };
                };
            };
        };
    };
    'get_core-{_version}-saml-sp-info': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Info'];
                };
            };
        };
    };
    'get_core-{_version}-saml-edugain-info': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'get_core-{_version}-saml-edugain-info-{domainName}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                domainName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'get_core-{_version}-saml-metadata': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description XML representation of the SP metadata */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'text/xml': string;
                };
            };
        };
    };
    'get_core-{_version}-settings': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-settings-password': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_ephemeral>
                     */
                    ClientEphemeral?: string;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_proof>
                     */
                    ClientProof?: string;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <hex_encoded_session_id>
                     */
                    SRPSession?: string;
                    /**
                     * @description Optional, for inline re-authentication, either this or the FIDO2 object
                     * @example 123456 or recovery code
                     */
                    TwoFactorCode?: string;
                    /** @description Optional, for inline re-authentication, either this or the TwoFactorCode */
                    FIDO2?: {
                        /** @description The same AuthenticationOptions received as a challenge from the server */
                        AuthenticationOptions?: Record<string, never>;
                        /** @description clientData (base64) returned from the client authentication library */
                        ClientData?: string;
                        /** @description authenticatorData (base64) returned from the client authentication library */
                        AuthenticatorData?: string;
                        /** @description signature (base64) returned from the client authentication library */
                        Signature?: string;
                        /** @description CredentialID used */
                        CredentialID?: Record<string, never>[];
                    };
                    Auth?: {
                        /** @example 4 */
                        Version?: number;
                        /** @example <encrypted_id> */
                        ModulusID?: string;
                        /** @example <base64_encoded_salt> */
                        Salt?: string;
                        /** @example <base64_encoded_verifier> */
                        Verifier?: string;
                    };
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                        /**
                         * @description Present only if inline re-authentication is submitted
                         * @example <base64_encoded_proof>
                         */
                        ServerProof?: string;
                    };
                };
            };
        };
    };
    'put_core-{_version}-settings-password-upgrade': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    Auth?: {
                        /** @example 4 */
                        Version?: number;
                        /** @example <encrypted_id> */
                        ModulusID?: string;
                        /** @example <base64_encoded_salt> */
                        Salt?: string;
                        /** @example <base64_encoded_verifier> */
                        Verifier?: string;
                    };
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-settings-email': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_ephemeral>
                     */
                    ClientEphemeral?: string;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_proof>
                     */
                    ClientProof?: string;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <hex_encoded_session_id>
                     */
                    SRPSession?: string;
                    /**
                     * @description Optional, for inline re-authentication, either this or the FIDO2 object
                     * @example 123456 or recovery code
                     */
                    TwoFactorCode?: string;
                    /** @description Optional, for inline re-authentication, either this or the TwoFactorCode */
                    FIDO2?: {
                        /** @description The same AuthenticationOptions received as a challenge from the server */
                        AuthenticationOptions?: Record<string, never>;
                        /** @description clientData (base64) returned from the client authentication library */
                        ClientData?: string;
                        /** @description authenticatorData (base64) returned from the client authentication library */
                        AuthenticatorData?: string;
                        /** @description signature (base64) returned from the client authentication library */
                        Signature?: string;
                        /** @description CredentialID used */
                        CredentialID?: Record<string, never>[];
                    };
                    /** @example abc@gmail.com */
                    Email?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                        /**
                         * @description Present only if inline re-authentication is submitted
                         * @example <base64_encoded_proof>
                         */
                        ServerProof?: string;
                    };
                };
            };
        };
    };
    'post_core-{_version}-settings-email-verify': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example <token_value> */
                    Token?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-settings-email-notify': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @example 1
                     * @enum {integer}
                     */
                    Notify?: 0 | 1;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-settings-email-reset': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_ephemeral>
                     */
                    ClientEphemeral?: string;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_proof>
                     */
                    ClientProof?: string;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <hex_encoded_session_id>
                     */
                    SRPSession?: string;
                    /**
                     * @description Optional, for inline re-authentication, either this or the FIDO2 object
                     * @example 123456 or recovery code
                     */
                    TwoFactorCode?: string;
                    /** @description Optional, for inline re-authentication, either this or the TwoFactorCode */
                    FIDO2?: {
                        /** @description The same AuthenticationOptions received as a challenge from the server */
                        AuthenticationOptions?: Record<string, never>;
                        /** @description clientData (base64) returned from the client authentication library */
                        ClientData?: string;
                        /** @description authenticatorData (base64) returned from the client authentication library */
                        AuthenticatorData?: string;
                        /** @description signature (base64) returned from the client authentication library */
                        Signature?: string;
                        /** @description CredentialID used */
                        CredentialID?: Record<string, never>[];
                    };
                    /**
                     * @description 0 for off, 1 for on
                     * @example 1
                     */
                    Reset?: number;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                        /**
                         * @description Present only if inline re-authentication is submitted
                         * @example <base64_encoded_proof>
                         */
                        ServerProof?: string;
                    };
                };
            };
        };
    };
    'put_core-{_version}-settings-phone': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_ephemeral>
                     */
                    ClientEphemeral?: string;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_proof>
                     */
                    ClientProof?: string;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <hex_encoded_session_id>
                     */
                    SRPSession?: string;
                    /**
                     * @description Optional, for inline re-authentication, either this or the FIDO2 object
                     * @example 123456 or recovery code
                     */
                    TwoFactorCode?: string;
                    /** @description Optional, for inline re-authentication, either this or the TwoFactorCode */
                    FIDO2?: {
                        /** @description The same AuthenticationOptions received as a challenge from the server */
                        AuthenticationOptions?: Record<string, never>;
                        /** @description clientData (base64) returned from the client authentication library */
                        ClientData?: string;
                        /** @description authenticatorData (base64) returned from the client authentication library */
                        AuthenticatorData?: string;
                        /** @description signature (base64) returned from the client authentication library */
                        Signature?: string;
                        /** @description CredentialID used */
                        CredentialID?: Record<string, never>[];
                    };
                    /** @example +18005555555 */
                    Phone?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                        /**
                         * @description Present only if inline re-authentication is submitted
                         * @example <base64_encoded_proof>
                         */
                        ServerProof?: string;
                    };
                };
            };
        };
    };
    'post_core-{_version}-settings-phone-verify': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example <token_value> */
                    Token?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-settings-phone-notify': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @example 1
                     * @enum {integer}
                     */
                    Notify?: 0 | 1;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-settings-phone-reset': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_ephemeral>
                     */
                    ClientEphemeral?: string;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_proof>
                     */
                    ClientProof?: string;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <hex_encoded_session_id>
                     */
                    SRPSession?: string;
                    /**
                     * @description Optional, for inline re-authentication, either this or the FIDO2 object
                     * @example 123456 or recovery code
                     */
                    TwoFactorCode?: string;
                    /** @description Optional, for inline re-authentication, either this or the TwoFactorCode */
                    FIDO2?: {
                        /** @description The same AuthenticationOptions received as a challenge from the server */
                        AuthenticationOptions?: Record<string, never>;
                        /** @description clientData (base64) returned from the client authentication library */
                        ClientData?: string;
                        /** @description authenticatorData (base64) returned from the client authentication library */
                        AuthenticatorData?: string;
                        /** @description signature (base64) returned from the client authentication library */
                        Signature?: string;
                        /** @description CredentialID used */
                        CredentialID?: Record<string, never>[];
                    };
                    /**
                     * @description 0 for off, 1 for on
                     * @example 1
                     */
                    Reset?: number;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                        /**
                         * @description Present only if inline re-authentication is submitted
                         * @example <base64_encoded_proof>
                         */
                        ServerProof?: string;
                    };
                };
            };
        };
    };
    'put_core-{_version}-settings-locale': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example en_US */
                    Locale?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-settings-logauth': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description 0 = off, 1 = on, 2 = on with IP logging
                     * @example 0
                     */
                    LogAuth?: number;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-settings-devicerecovery': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @description possible values:<br>- 0: disable<br>- 1: enable */
                    DeviceRecovery?: number;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-settings-news': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['UpdateNewsInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                    };
                };
            };
        };
    };
    'patch_core-{_version}-settings-news': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['PatchNewsInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                    };
                };
            };
        };
    };
    'get_core-{_version}-settings-news-external': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: {
                            /**
                             * @description 0 - 255 bitmap. 1 is announcements, 2 is features, 4 is newsletter, 8 is beta, 16 is business. 32, 64, and 128 are currently unused.
                             * @example 4
                             */
                            News?: number;
                        };
                    };
                };
            };
        };
    };
    'put_core-{_version}-settings-news-external': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['UpdateNewsInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: {
                            /**
                             * @description 0 - 255 bitmap. 1 is announcements, 2 is features, 4 is newsletter, 8 is beta, 16 is business. 32, 64, and 128 are currently unused.
                             * @example 4
                             */
                            News?: number;
                        };
                    };
                };
            };
        };
    };
    'patch_core-{_version}-settings-news-external': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['PatchNewsInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: {
                            /**
                             * @description 0 - 255 bitmap. 1 is announcements, 2 is features, 4 is newsletter, 8 is beta, 16 is business. 32, 64, and 128 are currently unused.
                             * @example 4
                             */
                            News?: number;
                        };
                    };
                };
            };
        };
    };
    'put_core-{_version}-settings-density': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description 0:comfortable, 1:compact
                     * @example 0
                     */
                    Density?: number;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-settings-invoicetext': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description Maximum 5 lines
                     * @example Mickey Mouse, Esq.
                     *     Cartoon Law Services
                     */
                    InvoiceText?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-settings-2fa-codes': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_ephemeral>
                     */
                    ClientEphemeral?: string;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_proof>
                     */
                    ClientProof?: string;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <hex_encoded_session_id>
                     */
                    SRPSession?: string;
                    /**
                     * @description Optional, for inline re-authentication, either this or the FIDO2 object
                     * @example 123456 or recovery code
                     */
                    TwoFactorCode?: string;
                    /** @description Optional, for inline re-authentication, either this or the TwoFactorCode */
                    FIDO2?: {
                        /** @description The same AuthenticationOptions received as a challenge from the server */
                        AuthenticationOptions?: Record<string, never>;
                        /** @description clientData (base64) returned from the client authentication library */
                        ClientData?: string;
                        /** @description authenticatorData (base64) returned from the client authentication library */
                        AuthenticatorData?: string;
                        /** @description signature (base64) returned from the client authentication library */
                        Signature?: string;
                        /** @description CredentialID used */
                        CredentialID?: Record<string, never>[];
                    };
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                        /**
                         * @description Present only if inline re-authentication is submitted
                         * @example <base64_encoded_proof>
                         */
                        ServerProof?: string;
                        /** @description 16 alphanumeric codes, each 8 characters long */
                        TwoFactorRecoveryCodes?: string[];
                    };
                };
            };
            /** @description Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 10041 */
                        Code?: number;
                        /** @example Two Factor confirmation failed */
                        Error?: string;
                        Details?: string[];
                    };
                };
            };
        };
    };
    'put_core-{_version}-settings-2fa-totp': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_ephemeral>
                     */
                    ClientEphemeral?: string;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_proof>
                     */
                    ClientProof?: string;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <hex_encoded_session_id>
                     */
                    SRPSession?: string;
                    /**
                     * @description Optional, for inline re-authentication, either this or the FIDO2 object
                     * @example 123456 or recovery code
                     */
                    TwoFactorCode?: string;
                    /** @description Optional, for inline re-authentication, either this or the TwoFactorCode */
                    FIDO2?: {
                        /** @description The same AuthenticationOptions received as a challenge from the server */
                        AuthenticationOptions?: Record<string, never>;
                        /** @description clientData (base64) returned from the client authentication library */
                        ClientData?: string;
                        /** @description authenticatorData (base64) returned from the client authentication library */
                        AuthenticatorData?: string;
                        /** @description signature (base64) returned from the client authentication library */
                        Signature?: string;
                        /** @description CredentialID used */
                        CredentialID?: Record<string, never>[];
                    };
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                        /**
                         * @description Present only if inline re-authentication is submitted
                         * @example <base64_encoded_proof>
                         */
                        ServerProof?: string;
                    };
                };
            };
        };
    };
    'post_core-{_version}-settings-2fa-totp': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_ephemeral>
                     */
                    ClientEphemeral?: string;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_proof>
                     */
                    ClientProof?: string;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <hex_encoded_session_id>
                     */
                    SRPSession?: string;
                    /**
                     * @description Optional, for inline re-authentication, either this or the FIDO2 object
                     * @example 123456 or recovery code
                     */
                    TwoFactorCode?: string;
                    /** @description Optional, for inline re-authentication, either this or the TwoFactorCode */
                    FIDO2?: {
                        /** @description The same AuthenticationOptions received as a challenge from the server */
                        AuthenticationOptions?: Record<string, never>;
                        /** @description clientData (base64) returned from the client authentication library */
                        ClientData?: string;
                        /** @description authenticatorData (base64) returned from the client authentication library */
                        AuthenticatorData?: string;
                        /** @description signature (base64) returned from the client authentication library */
                        Signature?: string;
                        /** @description CredentialID used */
                        CredentialID?: Record<string, never>[];
                    };
                    /** @example JBSWY3DPEHPK3PXP */
                    TOTPSharedSecret?: string;
                    /** @example 203941 */
                    TOTPConfirmation?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                        /**
                         * @description Present only if inline re-authentication is submitted
                         * @example <base64_encoded_proof>
                         */
                        ServerProof?: string;
                        /** @description 16 alphanumeric codes, each 8 characters long */
                        TwoFactorRecoveryCodes?: string[];
                    };
                };
            };
            /** @description Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 10041 */
                        Code?: number;
                        /** @example Two Factor confirmation failed */
                        Error?: string;
                        Details?: string[];
                    };
                };
            };
        };
    };
    'put_core-{_version}-settings-2fa': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_ephemeral>
                     */
                    ClientEphemeral?: string;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_proof>
                     */
                    ClientProof?: string;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <hex_encoded_session_id>
                     */
                    SRPSession?: string;
                    /**
                     * @description Optional, for inline re-authentication, either this or the FIDO2 object
                     * @example 123456 or recovery code
                     */
                    TwoFactorCode?: string;
                    /** @description Optional, for inline re-authentication, either this or the TwoFactorCode */
                    FIDO2?: {
                        /** @description The same AuthenticationOptions received as a challenge from the server */
                        AuthenticationOptions?: Record<string, never>;
                        /** @description clientData (base64) returned from the client authentication library */
                        ClientData?: string;
                        /** @description authenticatorData (base64) returned from the client authentication library */
                        AuthenticatorData?: string;
                        /** @description signature (base64) returned from the client authentication library */
                        Signature?: string;
                        /** @description CredentialID used */
                        CredentialID?: Record<string, never>[];
                    };
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                        /**
                         * @description Present only if inline re-authentication is submitted
                         * @example <base64_encoded_proof>
                         */
                        ServerProof?: string;
                    };
                };
            };
        };
    };
    'post_core-{_version}-settings-2fa': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_ephemeral>
                     */
                    ClientEphemeral?: string;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_proof>
                     */
                    ClientProof?: string;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <hex_encoded_session_id>
                     */
                    SRPSession?: string;
                    /**
                     * @description Optional, for inline re-authentication, either this or the FIDO2 object
                     * @example 123456 or recovery code
                     */
                    TwoFactorCode?: string;
                    /** @description Optional, for inline re-authentication, either this or the TwoFactorCode */
                    FIDO2?: {
                        /** @description The same AuthenticationOptions received as a challenge from the server */
                        AuthenticationOptions?: Record<string, never>;
                        /** @description clientData (base64) returned from the client authentication library */
                        ClientData?: string;
                        /** @description authenticatorData (base64) returned from the client authentication library */
                        AuthenticatorData?: string;
                        /** @description signature (base64) returned from the client authentication library */
                        Signature?: string;
                        /** @description CredentialID used */
                        CredentialID?: Record<string, never>[];
                    };
                    /** @example JBSWY3DPEHPK3PXP */
                    TOTPSharedSecret?: string;
                    /** @example 203941 */
                    TOTPConfirmation?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                        /**
                         * @description Present only if inline re-authentication is submitted
                         * @example <base64_encoded_proof>
                         */
                        ServerProof?: string;
                        /** @description 16 alphanumeric codes, each 8 characters long */
                        TwoFactorRecoveryCodes?: string[];
                    };
                };
            };
            /** @description Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 10041 */
                        Code?: number;
                        /** @example Two Factor confirmation failed */
                        Error?: string;
                        Details?: string[];
                    };
                };
            };
        };
    };
    'post_core-{_version}-settings-2fa-reset': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example user_name */
                    Username?: string;
                    /**
                     * @description Reset token
                     * @example A194YN2F9R
                     */
                    Token?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
            /** @description Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 19502 */
                        Code?: number;
                        /** @example Invalid reset token. Please request another token and try again */
                        Error?: string;
                        Details?: string[];
                    };
                };
            };
        };
    };
    'get_core-{_version}-settings-2fa-register': {
        parameters: {
            query?: {
                /**
                 * @description If true, it requires a cross-platform authenticator (e.g. Yubikey) and forbids TPMs (e.g. Windows Hello)
                 * @example true
                 */
                CrossPlatform?: boolean;
            };
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Contains the user's currently registered FIDO2 credentials. */
                        RegisteredKeys?: components['schemas']['Fido2RegisteredKey'][];
                        /**
                         * @description Refer to the definition of PublicKeyCredentialCreationOptions in the WebAuthn spec. Binary data is encoded as Uint8Array.
                         * @example <PublicKeyCredentialCreationOptions>
                         */
                        RegistrationOptions?: Record<string, never>;
                        /** @description Supported attestation formats. */
                        AttestationFormats?: string[];
                    };
                };
            };
        };
    };
    'post_core-{_version}-settings-2fa-register': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description Refer to the definition of PublicKeyCredentialCreationOptions in the WebAuthn spec. Binary data is encoded as Uint8Array.
                     * @example <PublicKeyCredentialCreationOptions>
                     */
                    RegistrationOptions?: Record<string, never>;
                    /**
                     * @description clientData (base64) returned from the client authentication library
                     * @example <base64_encoded_client_data>
                     */
                    ClientData?: string;
                    /**
                     * @description attestationObject (base64) returned from the client authentication library
                     * @example <base64_encoded_attestation_object>
                     */
                    AttestationObject?: string;
                    /**
                     * @description An array of transports if known, otherwise an empty array.
                     * @example usb
                     */
                    Transports?: string;
                    /**
                     * @description My FIDO2 key
                     * @example User defined name for the credential.
                     */
                    Name?: string;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_ephemeral>
                     */
                    ClientEphemeral?: string;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_proof>
                     */
                    ClientProof?: string;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <hex_encoded_session_id>
                     */
                    SRPSession?: string;
                    /**
                     * @description Optional, for inline re-authentication, either this or the FIDO2 object
                     * @example 123456 or recovery code
                     */
                    TwoFactorCode?: string;
                    /** @description Optional, for inline re-authentication, either this or the TwoFactorCode */
                    FIDO2?: {
                        /** @description The same AuthenticationOptions received as a challenge from the server */
                        AuthenticationOptions?: Record<string, never>;
                        /** @description clientData (base64) returned from the client authentication library */
                        ClientData?: string;
                        /** @description authenticatorData (base64) returned from the client authentication library */
                        AuthenticatorData?: string;
                        /** @description signature (base64) returned from the client authentication library */
                        Signature?: string;
                        /** @description CredentialID used */
                        CredentialID?: Record<string, never>[];
                    };
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                        /**
                         * @description Present only if inline re-authentication is submitted
                         * @example <base64_encoded_proof>
                         */
                        ServerProof?: string;
                    };
                };
            };
        };
    };
    'post_core-{_version}-settings-2fa-{credentialID}-remove': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                credentialID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_ephemeral>
                     */
                    ClientEphemeral?: string;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_proof>
                     */
                    ClientProof?: string;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <hex_encoded_session_id>
                     */
                    SRPSession?: string;
                    /**
                     * @description Optional, for inline re-authentication, either this or the FIDO2 object
                     * @example 123456 or recovery code
                     */
                    TwoFactorCode?: string;
                    /** @description Optional, for inline re-authentication, either this or the TwoFactorCode */
                    FIDO2?: {
                        /** @description The same AuthenticationOptions received as a challenge from the server */
                        AuthenticationOptions?: Record<string, never>;
                        /** @description clientData (base64) returned from the client authentication library */
                        ClientData?: string;
                        /** @description authenticatorData (base64) returned from the client authentication library */
                        AuthenticatorData?: string;
                        /** @description signature (base64) returned from the client authentication library */
                        Signature?: string;
                        /** @description CredentialID used */
                        CredentialID?: Record<string, never>[];
                    };
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                        /**
                         * @description Present only if inline re-authentication is submitted
                         * @example <base64_encoded_proof>
                         */
                        ServerProof?: string;
                    };
                };
            };
        };
    };
    'put_core-{_version}-settings-2fa-{credentialID}-rename': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                credentialID: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description User defined name for the credential.
                     * @example My FIDO2 key
                     */
                    Name?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-settings-hide-side-panel': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['UpdateHideSidePanelInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-settings-username': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @description Length <= 40 */
                    Username?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-settings-theme': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['Theme'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-settings-themetype': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example 1 */
                    ThemeType?: number;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-settings-weekstart': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description `0`: Locale default, `1`: Monday, `6`: Saturday, `7`: Sunday
                     * @example 1
                     */
                    WeekStart?: number;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-settings-dateformat': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description 0: Locale default, 1: DD_MM_YYYY, 2: MM_DD_YYYY, 3: YYYY_MM_DD
                     * @example 1
                     */
                    DateFormat?: number;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-settings-timeformat': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description 0: Locale default, 1: 24H, 2: 12H
                     * @example 1
                     */
                    TimeFormat?: number;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-settings-welcome': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
            /** @description Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 2000 */
                        Code?: number;
                        /** @example Unknown client */
                        Error?: string;
                        Details?: string[];
                    };
                };
            };
        };
    };
    'put_core-{_version}-settings-earlyaccess': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description 0: Disabled, 1: Enabled
                     * @example 1
                     */
                    EarlyAccess?: number;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
            /** @description Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 2000 */
                        Code?: number;
                        /** @example Invalid client */
                        Error?: string;
                        Details?: string[];
                    };
                };
            };
        };
    };
    'put_core-{_version}-settings-flags': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description 0: Disabled, 1: Enabled
                     * @example 1
                     */
                    Welcomed?: number;
                    /**
                     * @description 0: Disabled, 1: Enabled - Note: requires SettingsFlagsAllowV6OptIn feature flag to be enabled before use
                     * @example 0
                     */
                    SupportPgpV6Keys?: number;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-settings-telemetry': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @description possible values:<br>- 0: disable<br>- 1: enable */
                    Telemetry?: number;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-settings-crashreports': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @description possible values:<br>- 0: disable<br>- 1: enable */
                    CrashReports?: number;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-settings-highsecurity': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
            /** @description User can't enable High Security (only some users are eligible) */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default 2011 */
                        Code: number;
                        /** @default You do not have an active subscription */
                        Error: string;
                    };
                };
            };
        };
    };
    'delete_core-{_version}-settings-highsecurity': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-settings-breachalerts': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
            /** @description User can't enable Breach Alert (only some users are eligible) */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default 2011 */
                        Code: number;
                        /** @default You do not have an active subscription */
                        Error: string;
                    };
                };
            };
        };
    };
    'delete_core-{_version}-settings-breachalerts': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-settings-sessionaccountrecovery': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['SessionAccountRecoveryInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-settings-ai-assistant-flags': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['AIAssistantFlagsInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        UserSettings?: components['schemas']['UserSettingsTransformer'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-settings-news-unsubscribe': {
        parameters: {
            query?: {
                News?: number;
                Jwt?: string;
            };
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['SuccessfulResponse'];
                };
            };
        };
    };
    'get_core-{_version}-support-schedulecall': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ScheduleSupportCallOutput'];
                };
            };
        };
    };
    'put_core-{_version}-members-{memberId}-lumo': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                memberId: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['UpdateMemberLumoEntitlementInput'];
            };
        };
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'put_core-{_version}-settings-product-disabled': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['ProductDisabledInput'];
            };
        };
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'get_core-{_version}-users-delete': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-users-delete': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * Format: base64
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_ephemeral>
                     */
                    ClientEphemeral?: string;
                    /**
                     * Format: base64
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_proof>
                     */
                    ClientProof?: string;
                    /**
                     * Format: hex
                     * @description Optional, for inline re-authentication
                     * @example <hex_encoded_session_id>
                     */
                    SRPSession?: string;
                    /**
                     * @description Optional, for inline re-authentication, either this or the FIDO2 object
                     * @example 123456 or recovery code
                     */
                    TwoFactorCode?: string;
                    /** @description Optional, for inline re-authentication, either this or the TwoFactorCode */
                    FIDO2?: {
                        /** @description The same AuthenticationOptions received as a challenge from the server */
                        AuthenticationOptions?: Record<string, never>;
                        /**
                         * Format: base64
                         * @description clientData (base64) returned from the client authentication library
                         * @example
                         */
                        ClientData?: string;
                        /**
                         * Format: base64
                         * @description authenticatorData (base64) returned from the client authentication library
                         */
                        AuthenticatorData?: string;
                        /**
                         * Format: base64
                         * @description signature (base64) returned from the client authentication library
                         */
                        Signature?: string;
                        /** @description CredentialID used */
                        CredentialID?: Record<string, never>[];
                    };
                    /** @example optional {DIFFERENT_ACCOUNT, TOO_EXPENSIVE, MISSING_FEATURE, USE_OTHER_SERVICE, OTHER} */
                    Reason?: string;
                    /** @example #poor */
                    Feedback?: string;
                    /** @example ein@stein.com */
                    Email?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /**
                         * @description Present only if inline re-authentication is submitted
                         * @example <base64_encoded_proof>
                         */
                        ServerProof?: string;
                    };
                };
            };
        };
    };
    'delete_core-{_version}-users-delete': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * Format: base64
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_ephemeral>
                     */
                    ClientEphemeral?: string;
                    /**
                     * Format: base64
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_proof>
                     */
                    ClientProof?: string;
                    /**
                     * Format: hex
                     * @description Optional, for inline re-authentication
                     * @example <hex_encoded_session_id>
                     */
                    SRPSession?: string;
                    /**
                     * @description Optional, for inline re-authentication, either this or the FIDO2 object
                     * @example 123456 or recovery code
                     */
                    TwoFactorCode?: string;
                    /** @description Optional, for inline re-authentication, either this or the TwoFactorCode */
                    FIDO2?: {
                        /** @description The same AuthenticationOptions received as a challenge from the server */
                        AuthenticationOptions?: Record<string, never>;
                        /**
                         * Format: base64
                         * @description clientData (base64) returned from the client authentication library
                         * @example
                         */
                        ClientData?: string;
                        /**
                         * Format: base64
                         * @description authenticatorData (base64) returned from the client authentication library
                         */
                        AuthenticatorData?: string;
                        /**
                         * Format: base64
                         * @description signature (base64) returned from the client authentication library
                         */
                        Signature?: string;
                        /** @description CredentialID used */
                        CredentialID?: Record<string, never>[];
                    };
                    /** @example optional {DIFFERENT_ACCOUNT, TOO_EXPENSIVE, MISSING_FEATURE, USE_OTHER_SERVICE, OTHER} */
                    Reason?: string;
                    /** @example #poor */
                    Feedback?: string;
                    /** @example ein@stein.com */
                    Email?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /**
                         * @description Present only if inline re-authentication is submitted
                         * @example <base64_encoded_proof>
                         */
                        ServerProof?: string;
                    };
                };
            };
        };
    };
    'get_core-{_version}-users-reset': {
        parameters: {
            query: {
                /**
                 * @description the username or email address
                 * @example einstein
                 */
                Username: string;
            };
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /**
                         * @description internal or external
                         * @example internal
                         */
                        Type?: string;
                        /** @description one or more values of: email, sms, login. `login` is used for external user with the same email as recovery address. */
                        Methods?: string[];
                    };
                };
            };
        };
    };
    'get_core-{_version}-users': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        User?: components['schemas']['User'] & {
                            /** @example jason@protonmail.ch */
                            Email?: string;
                            /** @example Jason */
                            DisplayName?: string;
                            Keys?: components['schemas']['UserKey'][];
                            AccountRecovery?: components['schemas']['AccountRecoveryAttempt'];
                        };
                        VerifyMethods?: string[];
                    };
                };
            };
        };
    };
    'post_core-{_version}-users': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example user_name */
                    Username?: string;
                    /** @example proton.me */
                    Domain?: string;
                    /** @example external@email */
                    Email?: string;
                    /** @example recovery phone number */
                    Phone?: string;
                    /**
                     * @deprecated
                     * @example Please use HV headers
                     */
                    Token?: string;
                    /**
                     * @deprecated
                     * @description captcha, email, sms, invite, or payment
                     * @example Please use HV headers
                     */
                    TokenType?: string;
                    /**
                     * @deprecated
                     * @example identifier
                     */
                    Referrer?: string;
                    /** @example identifier */
                    ReferralIdentifier?: string;
                    /**
                     * @description optional field, the encrypted referral ID
                     * @example <encrypted_id>
                     */
                    ReferralID?: string;
                    /** @example 1 */
                    Type?: number;
                    Auth?: {
                        /** @example 4 */
                        Version?: number;
                        /** @example <encrypted_id> */
                        ModulusID?: string;
                        /** @example <base64_encoded_salt> */
                        Salt?: string;
                        /** @example <base64_encoded_verifier> */
                        Verifier?: string;
                    };
                    /** @description optional field, frontend fingerprints */
                    Payload?: {
                        /** @example ++3dreJ+cHBSeEXvkxjLCRrf1... */
                        'random-id-1'?: string;
                        /** @example Xv5df3dreJ+cHBvkxjSeEXvkx... */
                        'random-id-2'?: string;
                        /** @example <base64_encoded_android_attestation_token> */
                        'random-id-3'?: string;
                        /** @example <base64_encoded_ios_device_check_token> */
                        'random-id-4'?: string;
                    };
                    /**
                     * @deprecated
                     * @description optional field used together with Android fingerprinting
                     * @example <salt_value>
                     */
                    Salt?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        User?: components['schemas']['User'] & {
                            /** @example 1 */
                            Services?: number;
                            /** @example jason@protonmail.ch */
                            Email?: string;
                            /** @example Jason */
                            DisplayName?: string;
                            Keys?: components['schemas']['UserKey'][];
                            /**
                             * @description Token for external account creation. If it matches the created email it will be pre-verified
                             * @example ASD3ldfa.asdfaoa3aw.asdfads
                             */
                            TokenPreVerifiedAddress?: string;
                        };
                    };
                };
            };
        };
    };
    'post_core-{_version}-users-external': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example user_name */
                    Username?: string;
                    /** @example proton.me */
                    Domain?: string;
                    /** @example external@email */
                    Email?: string;
                    /** @example recovery phone number */
                    Phone?: string;
                    /**
                     * @deprecated
                     * @example Please use HV headers
                     */
                    Token?: string;
                    /**
                     * @deprecated
                     * @description captcha, email, sms, invite, or payment
                     * @example Please use HV headers
                     */
                    TokenType?: string;
                    /**
                     * @deprecated
                     * @example identifier
                     */
                    Referrer?: string;
                    /** @example identifier */
                    ReferralIdentifier?: string;
                    /**
                     * @description optional field, the encrypted referral ID
                     * @example <encrypted_id>
                     */
                    ReferralID?: string;
                    /** @example 1 */
                    Type?: number;
                    Auth?: {
                        /** @example 4 */
                        Version?: number;
                        /** @example <encrypted_id> */
                        ModulusID?: string;
                        /** @example <base64_encoded_salt> */
                        Salt?: string;
                        /** @example <base64_encoded_verifier> */
                        Verifier?: string;
                    };
                    /** @description optional field, frontend fingerprints */
                    Payload?: {
                        /** @example ++3dreJ+cHBSeEXvkxjLCRrf1... */
                        'random-id-1'?: string;
                        /** @example Xv5df3dreJ+cHBvkxjSeEXvkx... */
                        'random-id-2'?: string;
                        /** @example <base64_encoded_android_attestation_token> */
                        'random-id-3'?: string;
                        /** @example <base64_encoded_ios_device_check_token> */
                        'random-id-4'?: string;
                    };
                    /**
                     * @deprecated
                     * @description optional field used together with Android fingerprinting
                     * @example <salt_value>
                     */
                    Salt?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        User?: components['schemas']['User'] & {
                            /** @example 1 */
                            Services?: number;
                            /** @example jason@protonmail.ch */
                            Email?: string;
                            /** @example Jason */
                            DisplayName?: string;
                            Keys?: components['schemas']['UserKey'][];
                            /**
                             * @description Token for external account creation. If it matches the created email it will be pre-verified
                             * @example ASD3ldfa.asdfaoa3aw.asdfads
                             */
                            TokenPreVerifiedAddress?: string;
                        };
                    };
                };
            };
        };
    };
    'put_core-{_version}-users-check': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description in case of an invite must be selector:token
                     * @example <token value>
                     */
                    Token?: string;
                    /**
                     * @description captcha, email, sms, invite, coupon or payment
                     * @example captcha
                     */
                    TokenType?: string;
                    /**
                     * @description 1 = mail, 2 = VPN
                     * @example 1
                     */
                    Type?: number;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'get_core-{_version}-users-availableExternal': {
        parameters: {
            query?: {
                /**
                 * @description the username
                 * @example bart
                 */
                Name?: string;
            };
            header?: {
                /**
                 * @description Optional header containing a payment token value. When this value is set and the token is valid, the signup flow is started.
                 * @example 1234567890abcdefghijklmn
                 */
                'X-PM-Payment-Info-Token'?: string;
            };
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
            /** @description Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 12106 */
                        Code?: number;
                        /** @example Username already used */
                        Error?: string;
                        Details?: {
                            Suggestions?: string[];
                        };
                    };
                };
            };
        };
    };
    'get_core-{_version}-users-available': {
        parameters: {
            query?: {
                /**
                 * @description the username
                 * @example bart
                 */
                Name?: string;
                /**
                 * @description Set to 1 if username is the full email address, otherwise 0 (default)
                 * @example 1
                 */
                ParseDomain?: number;
            };
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
            /** @description Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 12106 */
                        Code?: number;
                        /** @example Username already used */
                        Error?: string;
                        Details?: {
                            Suggestions?: string[];
                        };
                    };
                };
            };
        };
    };
    'get_core-{_version}-users-available-{username}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                username: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'get_core-{_version}-users-direct': {
        parameters: {
            query?: {
                /**
                 * @description 1: mail<br>2: VPN
                 * @example 1
                 */
                Type?: number;
            };
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /**
                         * @description 1 if enabled, 0 if disabled--client should show invite form
                         * @example 1
                         */
                        Direct?: number;
                        VerifyMethods?: string[];
                    };
                };
            };
        };
    };
    'post_core-{_version}-users-code': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description email or sms
                     * @example email
                     * @enum {string}
                     */
                    Type?: 'email' | 'sms';
                    /**
                     * @description Optional, can use android as well if link support
                     * @example ios
                     */
                    Platform?: string;
                    Destination?: {
                        /**
                         * @description required if type is email
                         * @example example@example.com
                         */
                        Address?: string;
                        /**
                         * @description required if type is sms
                         * @example 6176767087
                         */
                        Phone?: string;
                    };
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-users-lock': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-users-unlock': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example <base64_encoded_ephemeral> */
                    ClientEphemeral?: string;
                    /** @example <base64_encoded_proof> */
                    ClientProof?: string;
                    /** @example <hex_encoded_session_id> */
                    SRPSession?: string;
                    /**
                     * @description Token to use when re-authenticating a SSO user
                     * @example hnnamrzvsgdbxvx74rjadbovyjy63vz4
                     */
                    SsoReauthToken?: Record<string, never>;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /** @example <base64_encoded_proof> */
                        ServerProof?: string;
                    };
                };
            };
        };
    };
    'put_core-{_version}-users-password': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example <base64_encoded_ephemeral> */
                    ClientEphemeral?: string;
                    /** @example <base64_encoded_proof> */
                    ClientProof?: string;
                    /** @example <hex_encoded_session_id> */
                    SRPSession?: string;
                    /**
                     * @description Either this or the FIDO2 object
                     * @example 123456 or recovery code
                     */
                    TwoFactorCode?: string;
                    /** @description Either this or the TwoFactorCode */
                    FIDO2?: {
                        /** @description The same AuthenticationOptions received as a challenge from the server */
                        AuthenticationOptions?: Record<string, never>;
                        /**
                         * @description clientData (base64) returned from the client authentication library
                         * @example
                         */
                        ClientData?: string;
                        /** @description authenticatorData (base64) returned from the client authentication library */
                        AuthenticatorData?: string;
                        /** @description signature (base64) returned from the client authentication library */
                        Signature?: string;
                        /** @description CredentialID used */
                        CredentialID?: Record<string, never>[];
                    };
                    /**
                     * @description Token to use when re-authenticating a SSO user
                     * @example hnnamrzvsgdbxvx74rjadbovyjy63vz4
                     */
                    SsoReauthToken?: Record<string, never>;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /** @example <base64_encoded_proof> */
                        ServerProof?: string;
                    };
                };
            };
        };
    };
    'get_core-{_version}-users-captcha-{token}': {
        parameters: {
            query?: never;
            header?: {
                'x-pm-nonce'?: string | null;
            };
            path: {
                _version: string;
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'get_core-{_version}-users-disable-{jwt}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc... */
                jwt: string;
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'get_core-{_version}-members-{enc_id}-vpn': {
        parameters: {
            query?: {
                /**
                 * @description the page index using 0-based indexing
                 * @example 0
                 */
                Page?: string;
                /**
                 * @description the page size, maximum 150
                 * @example 150
                 */
                PageSize?: string;
            };
            header?: never;
            path: {
                /**
                 * @description the member id
                 * @example ACXDmTaBub14w==
                 */
                memberid: string;
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /** @example  */
                        VPNName?: string;
                        /** @example  */
                        VPNStatus?: number;
                        /**
                         * @description Last VPN login time (unix timestamp)
                         * @example 1654615966
                         */
                        LastVPNLogin?: number | null;
                        ActiveVPNSessions?: components['schemas']['VPNAuthenticationCertificateDetailedTransformer'][];
                        AuthenticationCertificates?: components['schemas']['VPNAuthenticationCertificateDetailedTransformer'][];
                    };
                };
            };
        };
    };
    'put_core-{_version}-members-{enc_id}-vpn': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the member id
                 * @example ACXDmTaBub14w==
                 */
                memberid: string;
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example 2 */
                    MaxVPN?: number;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'get_core-v4-features': {
        parameters: {
            query?: {
                /**
                 * @description the page index using 0-based indexing, prefer using Offset which allow tostart from any precise position
                 * @example 0
                 */
                Page?: string;
                /**
                 * @deprecated
                 * @description the page size, maximum 150, prefer using Limit which is equivalent
                 * @example 50
                 */
                PageSize?: string;
                /** @description skip the given number of results */
                Offset?: string;
                /** @description the number of features to return, defaults to page size (1 page), maximum 150 */
                Limit?: string;
                /** @description the sorting criteria */
                Sort?: string;
                /**
                 * @description 0 => ASC, 1 => DESC
                 * @example 1
                 */
                Desc?: string;
                /** @description return only features of the given type */
                Type?: string;
                /** @description return only features newer or equal than BeginID */
                BeginID?: string;
                /** @description return only features older than EndID */
                EndID?: string;
                /** @description feature ID(s) to filter on */
                ID?: string;
                /** @description feature code(s) to filter on */
                Code?: string;
                /** @description feature code substring to search */
                SearchCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /** @example 76 */
                        Total?: number;
                        Features?: components['schemas']['FeatureTransformer'][];
                    };
                };
            };
        };
    };
    'post_core-v4-features': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example blackFriday */
                    Code?: string;
                    /**
                     * @example string
                     * @enum {string}
                     */
                    Type?: 'boolean' | 'integer' | 'float' | 'string' | 'enumeration' | 'mixed';
                    /** @description List of the values if type is enumeration */
                    Options?: string[];
                    /**
                     * @description Required level to set a user-specific value for this feature such as TokenScope::ADMIN
                     * @example 131072
                     */
                    WriteLevelToken?: number;
                    /**
                     * @description Same value for all users
                     * @example false
                     */
                    Global?: boolean;
                    /**
                     * @description Default value that can be used if 'Value' is not set
                     * @example start
                     */
                    DefaultValue?: Record<string, never>;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Feature?: components['schemas']['FeatureTransformer'];
                    };
                };
            };
        };
    };
    'put_core-v4-features-{id}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 123 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example blackFriday */
                    Code?: string;
                    /**
                     * @example string
                     * @enum {string}
                     */
                    Type?: 'boolean' | 'integer' | 'float' | 'string' | 'enumeration' | 'mixed';
                    /** @description List of the values if type is enumeration */
                    Options?: string[];
                    /**
                     * Format: float
                     * @description Minimum (included) value of length allowed
                     * @example 1
                     */
                    Minimum?: number;
                    /**
                     * Format: float
                     * @description Maximum (included) value of length allowed
                     * @example 100
                     */
                    Maximum?: number;
                    /**
                     * @description Required level to set a user-specific value for this feature such as TokenScope::ADMIN
                     * @example 131072
                     */
                    WriteLevelToken?: number;
                    /**
                     * @description Same value for all users
                     * @example false
                     */
                    Global?: boolean;
                    /**
                     * @description Default value that can be used if 'Value' is not set
                     * @example start
                     */
                    DefaultValue?: Record<string, never>;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Feature?: components['schemas']['FeatureTransformer'];
                    };
                };
            };
            /** @description Feature not found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 2001 */
                        Code?: number;
                        /** @example higher is not one of the possible options among [low, medium, high]. */
                        Error?: string;
                    };
                };
            };
            /** @description Not allowed */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 2026 */
                        Code?: number;
                        /** @example You're not allowed to modify the value of this feature */
                        Error?: string;
                    };
                };
            };
            /** @description Feature not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 2501 */
                        Code?: number;
                        /** @example Feature not found */
                        Error?: string;
                    };
                };
            };
        };
    };
    'delete_core-v4-features-{featureID}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 123 */
                ID: string;
                featureID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
            /** @description Feature not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 2501 */
                        Code?: number;
                        /** @example Feature not found */
                        Error?: string;
                    };
                };
            };
        };
    };
    'get_core-v4-features-{code}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Feature?: components['schemas']['FeatureTransformer'];
                    };
                };
            };
            /** @description Feature not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 2501 */
                        Code?: number;
                        /** @example Feature not found */
                        Error?: string;
                    };
                };
            };
        };
    };
    'put_core-v4-features-{code}-value': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example blackFriday */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example true */
                    Value?: Record<string, never>;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Feature?: components['schemas']['FeatureTransformer'];
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 2001 */
                        Code?: number;
                        /** @example higher is not one of the possible options among [low, medium, high]. */
                        Error?: string;
                    };
                };
            };
            /** @description Not allowed */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 2026 */
                        Code?: number;
                        /** @example You're not allowed to modify the value of this feature */
                        Error?: string;
                    };
                };
            };
            /** @description Feature not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 2501 */
                        Code?: number;
                        /** @example Feature not found */
                        Error?: string;
                    };
                };
            };
        };
    };
    'delete_core-v4-features-{code}-value': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Feature?: components['schemas']['FeatureTransformer'];
                    };
                };
            };
            /** @description Not allowed */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 2026 */
                        Code?: number;
                        /** @example You're not allowed to modify the value of this feature */
                        Error?: string;
                    };
                };
            };
            /** @description Feature not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 2501 */
                        Code?: number;
                        /** @example Feature not found */
                        Error?: string;
                    };
                };
            };
        };
    };
    'put_core-v4-features-{code}-user-value': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example blackFriday */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example true */
                    Value?: Record<string, never>;
                    UserIDs?: number[];
                    UserNames?: string[];
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /**
                         * @description Number of touched users
                         * @example 2
                         */
                        Count?: number;
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 2001 */
                        Code?: number;
                        /** @example higher is not one of the possible options among [low, medium, high]. */
                        Error?: string;
                    };
                };
            };
            /** @description Not allowed */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 2026 */
                        Code?: number;
                        /** @example You're not allowed to modify the value of this feature */
                        Error?: string;
                    };
                };
            };
            /** @description Feature not found */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 2501 */
                        Code?: number;
                        /** @example Feature not found */
                        Error?: string;
                    };
                };
            };
        };
    };
    'post_core-{_version}-auth-info': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description Client-specific secret only necessary to access the admin panel
                     * @example demopass
                     */
                    ClientSecret?: Record<string, never>;
                    /** @example user_name */
                    Username?: string;
                    /**
                     * @description If the intent is to sign into a Proton account, SSO managed account or let the backend decide based on the domain. If Auto and user is SRP, an SRP challenge is always returned; if user is SSO either the SSOChallengeToken is returned directly or a switch to SSO error (HTTP 422 with error code 8100)
                     * @example auto
                     * @enum {string}
                     */
                    Intent?: 'Proton' | 'SSO' | 'Auto';
                    /**
                     * @description optional field, to start a testing sso login flow
                     * @example true
                     */
                    IsTesting?: Record<string, never>;
                    /**
                     * @description optional field, to reauthenticate a SSO user and adding the given scope to the session
                     * @example locked, password
                     */
                    ReauthScope?: Record<string, never>;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | {
                              /**
                               * @description If Intent SSO or Auto, token to pass to GET /auth/sso/{token} for initiating the SSO flow
                               * @example a5fd396fcbb
                               */
                              SSOChallengeToken?: string;
                          }
                        | {
                              Code?: components['schemas']['ResponseCodeSuccess'];
                              /** @example -----BEGIN PGP SIGNED MESSAGE-----*-----END SIGNATURE----- */
                              Modulus?: string;
                              /** @example <base64_encoded_server_ephemeral> */
                              ServerEphemeral?: string;
                              /** @example 4 */
                              Version?: number;
                              /** @example <base64_encoded_salt> */
                              Salt?: string;
                              /** @example <hex_encoded_session_key> */
                              SRPSession?: string;
                              /** @description Only if already authenticated (not on login) */
                              '2FA'?: {
                                  /**
                                   * @description 0 for disabled, 1 for OTP, 2 for FIDO2, 3 for both
                                   * @example 3
                                   */
                                  Enabled?: number;
                                  FIDO2?: {
                                      /** @description Refer to the definition of PublicKeyCredentialRequestOptions in the WebAuthn spec. Binary data is encoded as Uint8Array. */
                                      AuthenticationOptions?: Record<string, never>;
                                      RegisteredKeys?: components['schemas']['Fido2RegisteredKey'][];
                                  };
                              };
                          };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Session is not tied to a user and Username is null
                         * @enum {integer}
                         */
                        Code?: 2001;
                        /** @example Invalid input */
                        Error?: string;
                        /** @description Empty */
                        Details?: Record<string, never>;
                    };
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | {
                              /**
                               * @description User doesn't have SSO. Returned if Intent=SSO or Intent=Auto on backend's whim
                               * @enum {integer}
                               */
                              Code?: 8101;
                              /** @example Email domain not found, please sign in with a password */
                              Error?: string;
                              /** @description Empty */
                              Details?: Record<string, never>;
                          }
                        | {
                              /**
                               * @description User has SSO. Returned if Intent=Proton or Intent=Auto on backend's whim
                               * @enum {integer}
                               */
                              Code?: 8100;
                              /** @example Email domain associated to an existing organization. Please sign in with SSO */
                              Error?: string;
                              /** @description Empty */
                              Details?: Record<string, never>;
                          }
                        | {
                              /**
                               * @description Upgrade the app to call the endpoint this way
                               * @enum {integer}
                               */
                              Code?: 5003;
                              /** @example You need to update this app in order to perform this operation */
                              Error?: string;
                              /** @description Empty */
                              Details?: Record<string, never>;
                          };
                };
            };
        };
    };
    'get_core-{_version}-auth-sso-{token}': {
        parameters: {
            query?: {
                FinalRedirectBaseUrl?: string | null;
            };
            header?: never;
            path: {
                /**
                 * @description Token received as SSOChallengeToken from POST /auth/info
                 * @example a5fd396fcbb
                 */
                token: string;
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'post_core-{_version}-auth-saml': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['IdpResponseVO'];
            };
        };
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'post_core-{_version}-auth': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['AuthInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /**
                         * @description Session unique ID
                         * @example 6f3c4f52cf499c2066e6c5669a293177c1f43755
                         */
                        UID?: string;
                        /** @example -Bpgivr5H2qGDRiUQ4-7gm5YLf215MEgZCdzOtLW5psxgB8oNc8OnoFRykab4Z23EGEW1ka3GtQPF9xwx9-VUA== */
                        UserID?: string;
                        /** @example ACXDmTaBub14w== */
                        EventID?: string;
                        /** @example <base64_encoded_proof> */
                        ServerProof?: string;
                        /**
                         * @description only if the session is not in cookie mode
                         * @example Bearer
                         */
                        TokenType?: string;
                        /**
                         * @description only if the session is not in cookie mode
                         * @example hnnamrzvsgdbxvx74rjadbovyjy63vz4
                         */
                        AccessToken?: string;
                        /**
                         * @description only if the session is not in cookie mode
                         * @example wfih0367aa7dc0359bf5c42d15a93e6c
                         */
                        RefreshToken?: string;
                        /**
                         * @deprecated
                         * @description only if the session is not in cookie mode
                         * @example 360000
                         */
                        ExpiresIn?: number;
                        /** @example 0 */
                        LocalID?: number;
                        Scopes?: string[];
                        /**
                         * @deprecated
                         * @example full other_scopes
                         */
                        Scope?: string;
                        /** @example 2 */
                        PasswordMode?: number;
                        /**
                         * @description If 1 the user should be prompted to enter a new password on login
                         * @example 0
                         */
                        TemporaryPassword?: number;
                        '2FA'?: {
                            /**
                             * @description 0 for disabled, 1 for OTP, 2 for FIDO2, 3 for both
                             * @example 3
                             */
                            Enabled?: number;
                            FIDO2?: {
                                /** @description Refer to the definition of PublicKeyCredentialRequestOptions in the WebAuthn spec. Binary data is encoded as Uint8Array. */
                                AuthenticationOptions?: Record<string, never>;
                                RegisteredKeys?: components['schemas']['Fido2RegisteredKey'][];
                            };
                        };
                    };
                };
            };
        };
    };
    'delete_core-{_version}-auth': {
        parameters: {
            query?: {
                /** @description if 1 log out this child only */
                Child?: Record<string, never>;
                /** @description if 1 this will also delete the associated Auth Device */
                AuthDevice?: Record<string, never>;
            };
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-auth-jwt': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example eyJhbGciOiJIUzI1Ni...yJV_adQssw5c */
                    Token?: string;
                    /**
                     * @description Client-specific secret only necessary to access the admin panel
                     * @example demopass
                     */
                    ClientSecret?: Record<string, never>;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /** @example 3af9b9780014cacb4b72bc5c73c1d7c4bad6c1e3 */
                        AccessToken?: string;
                        /**
                         * @description Only in the response if jwt type equals 5 (payments)
                         * @example 3af9b9780014cacb4b72bc5c73c1d7c4bad6c1e3
                         */
                        RefreshToken?: string;
                        /**
                         * @deprecated
                         * @example 360000
                         */
                        ExpiresIn?: number;
                        /** @example Bearer */
                        TokenType?: string;
                        Scopes?: string[];
                        /** @example 6f3c4f52cf499c2066e6c5669a293177c1f43755 */
                        UID?: string;
                        /** @example -Bpgivr5H2qGDRiUQ4-7gm5YLf215MEgZCdzOtLW5psxgB8oNc8OnoFRykab4Z23EGEW1ka3GtQPF9xwx9-VUA== */
                        UserID?: string;
                    };
                };
            };
        };
    };
    'post_core-{_version}-auth-2fa': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description either this or the FIDO2 object
                     * @example 123456 or recovery code
                     */
                    TwoFactorCode?: string;
                    FIDO2?: {
                        /** @description The same AuthenticationOptions received as a challenge from the server */
                        AuthenticationOptions?: Record<string, never>;
                        /** @description clientData (base64) returned from the client authentication library */
                        ClientData?: string;
                        /** @description authenticatorData (base64) returned from the client authentication library */
                        AuthenticatorData?: string;
                        /** @description signature (base64) returned from the client authentication library */
                        Signature?: string;
                        /** @description CredentialID used */
                        CredentialID?: Record<string, never>[];
                    };
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /**
                         * @deprecated
                         * @example full <other_scopes>
                         */
                        Scope?: string;
                        Scopes?: string[];
                    };
                };
            };
        };
    };
    'get_core-{_version}-auth-modulus': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /** @example -----BEGIN PGP SIGNED MESSAGE-----.*-----END PGP SIGNATURE----- */
                        Modulus?: string;
                        /** @example Oq_JB_IkrOx5WlpxzlRPocN3_NhJ80V7DGav77eRtSDkOtLxW2jfI3nUpEqANGpboOyN-GuzEFXadlpxgVp7_g== */
                        ModulusID?: string;
                    };
                };
            };
        };
    };
    'get_core-{_version}-auth-scopes': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /**
                         * @deprecated
                         * @example 217017207043915776
                         */
                        Scope?: string;
                        Scopes?: string[];
                    };
                };
            };
        };
    };
    'post_core-{_version}-auth-refresh': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example token */
                    ResponseType?: string;
                    /** @example refresh_token */
                    GrantType?: string;
                    /** @example eaad5a7059835aac32c0bf99c2e208a59b8c1a55 */
                    RefreshToken?: string;
                    /**
                     * @deprecated
                     * @description This parameter is deprecated and should be passed via 'x-pm-uid' header instead
                     * @example m3mxv75of7tuy4na4c3fzkskaqnu35xj
                     */
                    UID?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /** @example abcDecryptedTokenAndNoSaltAndNoPrivateKey123 */
                        AccessToken?: string;
                        /**
                         * @deprecated
                         * @example 360000
                         */
                        ExpiresIn?: number;
                        /** @example Bearer */
                        TokenType?: string;
                        /**
                         * @deprecated
                         * @example full other_scopes
                         */
                        Scope?: string;
                        Scopes?: string[];
                        /** @example 6f3c4f52cf499c2066e6c5669a293177c1f43755 */
                        UID?: string;
                        /** @example b894b4c4f20003f12d486900d8b88c7d68e67235 */
                        RefreshToken?: string;
                        /** @example 0 */
                        LocalID?: number;
                        /**
                         * @description Do not use this parameter unless you have been instructed to do so. This counts how many refreshes did the session have
                         * @example 5
                         */
                        RefreshCounter?: number;
                    };
                };
            };
        };
    };
    'post_core-{_version}-auth-cookies': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example token */
                    ResponseType?: string;
                    /** @example refresh_token */
                    GrantType?: string;
                    /** @example eaad5a7059835aac32c0bf99c2e208a59b8c1a55 */
                    RefreshToken?: string;
                    /**
                     * @description defaults to 0 if not present, creates persistent cookies
                     * @example 1
                     */
                    Persistent?: number;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /** @example 6f3c4f52cf499c2066e6c5669a293177c1f43755 */
                        UID?: string;
                        /** @example 0 */
                        LocalID?: number;
                        /**
                         * @description Do not use this parameter unless you have been instructed to do so. This counts how many refreshes did the session have
                         * @example 5
                         */
                        RefreshCounter?: number;
                    };
                };
            };
        };
    };
    'post_core-{_version}-auth-credentialless': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CreateCredentiallessUserInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CreateCredentiallessUserOutput'];
                };
            };
        };
    };
    'get_core-{_version}-settings-mnemonic': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        MnemonicUserKeys?: {
                            /** @example 1H8EGg3J1QpSDL...k0uhrHx6nnGQ== */
                            ID?: string;
                            /** @example -----BEGIN PGP PRIVATE KEY BLOCK ... */
                            PrivateKey?: string;
                            /** @example 1H8EGg3J1Qwk243hf== */
                            Salt?: string;
                        }[];
                    };
                };
            };
        };
    };
    'put_core-{_version}-settings-mnemonic': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    MnemonicUserKeys?: {
                        /** @example 1H8EGg3J1QpSDL...k0uhrHx6nnGQ== */
                        ID?: string;
                        /** @example -----BEGIN PGP PRIVATE KEY BLOCK ... */
                        PrivateKey?: string;
                    }[];
                    /** @example 1H8EGg3J1Qwk243hf== */
                    MnemonicSalt?: string;
                    /** @description The new mnemonic SRP verifier */
                    MnemonicAuth?: components['schemas']['AuthInfoInput'];
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_ephemeral>
                     */
                    ClientEphemeral?: string;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_proof>
                     */
                    ClientProof?: string;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <hex_encoded_session_id>
                     */
                    SRPSession?: string;
                    /**
                     * @description Optional, for inline re-authentication, either this or the FIDO2 obect
                     * @example 123456 or recovery code
                     */
                    TwoFactorCode?: string;
                    /** @description Optional, for inline re-authentication, either this or the TwoFactorCode */
                    FIDO2?: {
                        /** @description The same AuthenticationOptions received as a challenge from the server */
                        AuthenticationOptions?: Record<string, never>;
                        /** @description clientData (base64) returned from the client authentication library */
                        ClientData?: string;
                        /** @description authenticatorData (base64) returned from the client authentication library */
                        AuthenticatorData?: string;
                        /** @description signature (base64) returned from the client authentication library */
                        Signature?: string;
                        /** @description CredentialID used */
                        CredentialID?: Record<string, never>[];
                    };
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /**
                         * @description Present only if inline re-authentication is submitted
                         * @example <base64_encoded_proof>
                         */
                        ServerProof?: string;
                    };
                };
            };
        };
    };
    'get_core-{_version}-settings-mnemonic-reset': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        MnemonicUserKeys?: {
                            /** @example 1H8EGg3J1QpSDL...k0uhrHx6nnGQ== */
                            ID?: string;
                            /** @example -----BEGIN PGP PRIVATE KEY BLOCK ... */
                            PrivateKey?: string;
                            /** @example 1H8EGg3J1Qwk243hf== */
                            Salt?: string;
                        }[];
                    };
                };
            };
        };
    };
    'post_core-{_version}-settings-mnemonic-reset': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @description The user keys encrypted with the account password */
                    UserKeys?: {
                        /** @example 1H8EGg3J1QpSDL...k0uhrHx6nnGQ== */
                        ID?: string;
                        /** @example -----BEGIN PGP PRIVATE KEY BLOCK ... */
                        PrivateKey?: string;
                    }[];
                    /** @example 1H8EGg3J1Qwk243hf== */
                    KeysSalt?: string;
                    /** @description The new account's login password verifier */
                    Auth?: {
                        /** @example 4 */
                        Version?: number;
                        /** @example <encrypted_id> */
                        ModulusID?: string;
                        /** @example <base64_encoded_salt> */
                        Salt?: string;
                        /** @example <base64_encoded_verifier> */
                        Verifier?: string;
                    };
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Scopes?: string[];
                    };
                };
            };
        };
    };
    'post_core-{_version}-settings-mnemonic-disable': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_ephemeral>
                     */
                    ClientEphemeral?: string;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <base64_encoded_proof>
                     */
                    ClientProof?: string;
                    /**
                     * @description Optional, for inline re-authentication
                     * @example <hex_encoded_session_id>
                     */
                    SRPSession?: string;
                    /**
                     * @description Optional, for inline re-authentication, either this or the FIDO2 obect
                     * @example 123456 or recovery code
                     */
                    TwoFactorCode?: string;
                    /** @description Optional, for inline re-authentication, either this or the TwoFactorCode */
                    FIDO2?: {
                        /** @description The same AuthenticationOptions received as a challenge from the server */
                        AuthenticationOptions?: Record<string, never>;
                        /** @description clientData (base64) returned from the client authentication library */
                        ClientData?: string;
                        /** @description authenticatorData (base64) returned from the client authentication library */
                        AuthenticatorData?: string;
                        /** @description signature (base64) returned from the client authentication library */
                        Signature?: string;
                        /** @description CredentialID used */
                        CredentialID?: Record<string, never>[];
                    };
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /**
                         * @description Present only if inline re-authentication is submitted
                         * @example <base64_encoded_proof>
                         */
                        ServerProof?: string;
                    };
                };
            };
        };
    };
    'put_core-{_version}-settings-mnemonic-reactivate': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    MnemonicUserKeys?: {
                        /** @example 1H8EGg3J1QpSDL...k0uhrHx6nnGQ== */
                        ID?: string;
                        /** @example -----BEGIN PGP PRIVATE KEY BLOCK ... */
                        PrivateKey?: string;
                    }[];
                    /** @example 1H8EGg3J1Qwk243hf== */
                    MnemonicSalt?: string;
                    /** @description The new mnemonic SRP verifier */
                    MnemonicAuth?: components['schemas']['AuthInfoInput'];
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'get_core-{_version}-pushes': {
        parameters: {
            query?: {
                /**
                 * @description Page index using 0-based indexing
                 * @example 0
                 */
                Page?: string;
                /**
                 * @description Page size (max 250)
                 * @example 100
                 */
                PageSize?: string;
            };
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Pushes?: components['schemas']['PushTransformer'][];
                    };
                };
            };
        };
    };
    'get_core-{_version}-pushes-active': {
        parameters: {
            query?: {
                /**
                 * @description Page index using 0-based indexing
                 * @example 0
                 */
                Page?: string;
                /**
                 * @description Page size (max 250)
                 * @example 100
                 */
                PageSize?: string;
            };
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Pushes?: components['schemas']['PushTransformer'][];
                    };
                };
            };
        };
    };
    'get_core-{_version}-pushes-active-session': {
        parameters: {
            query?: {
                /**
                 * @description Page index using 0-based indexing
                 * @example 0
                 */
                Page?: string;
                /**
                 * @description Page size (max 250)
                 * @example 100
                 */
                PageSize?: string;
            };
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Pushes?: components['schemas']['PushTransformer'][];
                    };
                };
            };
        };
    };
    'delete_core-{_version}-pushes-{enc_id}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Pushes?: string[];
                    };
                };
            };
        };
    };
    'get_core-{_version}-referrals': {
        parameters: {
            query?: {
                /** @description Skip the given number of results */
                Offset?: number;
                /** @description The number of results to return, maximum 100 */
                Limit?: number;
            };
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Referrals?: components['schemas']['ReferralOutput'][];
                        Total?: number;
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-referrals': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['SendInvitationsInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Referrals?: components['schemas']['ReferralOutput'][];
                    };
                };
            };
        };
    };
    'get_core-{_version}-referrals-status': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Referrals?: components['schemas']['ReferralStatus'][];
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'get_core-{_version}-referrals-identifiers-{identifier}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example KPlISx5MiML3XcSYPrREF */
                identifier: string;
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The identifier exists */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            /** @description The identifier does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
        };
    };
    'post_core-{_version}-devices': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['RegisterDeviceInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'delete_core-{_version}-devices': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example 4b3403665fea6... */
                    DeviceToken?: string;
                    /**
                     * Format: hex
                     * @example e35a8e0015b6ab79c80045881602b1e0560f59ba
                     */
                    UID?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'get_core-{_version}-betas-{client_id}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the client ID
                 * @example iOSVPN
                 */
                client_id: string;
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Beta?: {
                            /** @example iOSVPN */
                            ClientID?: string;
                            /** @example john@exampl.com */
                            Email?: string;
                            /** @example 1538416904 */
                            CreateTime?: number;
                            /** @example 1538416904 */
                            ModifyTime?: number;
                        };
                    };
                };
            };
        };
    };
    'put_core-{_version}-betas-{client_id}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the client ID
                 * @example iOSVPN
                 */
                client_id: string;
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example john@example.com */
                    Email?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Beta?: {
                            /** @example iOSVPN */
                            ClientID?: string;
                            /** @example john@exampl.com */
                            Email?: string;
                            /** @example 1538416904 */
                            CreateTime?: number;
                            /** @example 1538416904 */
                            ModifyTime?: number;
                        };
                    };
                };
            };
        };
    };
    'delete_core-{_version}-betas-{client_id}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description the client ID
                 * @example iOSVPN
                 */
                client_id: string;
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'get_core-{_version}-betas': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Betas?: {
                            /** @example iOSVPN */
                            ClientID?: string;
                            /** @example john@exampl.com */
                            Email?: string;
                            /** @example 1538416904 */
                            CreateTime?: number;
                            /** @example 1538416904 */
                            ModifyTime?: number;
                        }[];
                    };
                };
            };
        };
    };
    'delete_core-{_version}-betas': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'get_core-{_version}-geofeed-geofeed-csv': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'get_core-{_version}-geofeed-geofeed-public-csv': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'get_core-{_version}-load': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-load': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'get_core-{_version}-logs-auth': {
        parameters: {
            query?: {
                /**
                 * @description the page index using 0-based indexing
                 * @example 0
                 */
                Page?: string;
                /**
                 * @description the page size, maximum 150
                 * @example 150
                 */
                PageSize?: string;
                /** @description skip the given number of results */
                Offset?: string;
                /** @description the number of results to return, defaults to page size (1 page), maximum 150 */
                Limit?: string;
            };
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Logs?: components['schemas']['AuthLogResponse'][];
                        /** @example 1 */
                        Total?: number;
                    };
                };
            };
        };
    };
    'delete_core-{_version}-logs-auth': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'get_core-{_version}-metrics': {
        parameters: {
            query?: {
                /** @example signup */
                Category?: string;
                /** @example click */
                Action?: string;
                /** @example coupon */
                Label?: string;
            };
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-metrics': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @example encrypted_search
                     * @enum {string}
                     */
                    Log?: 'signup' | 'encrypted_search' | 'dark_styles';
                    /**
                     * @description Optional title
                     * @example index
                     */
                    Title?: string;
                    Data?: {
                        /** @example you want... */
                        whatever?: string;
                    };
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-settings-recovery-secret': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description Base64-encoded secret, decodes to 32 bytes
                     * @example 1H8EGg3J1...Qwk243hf
                     */
                    RecoverySecret?: string;
                    /** @example -----BEGIN PGP SIGNATURE... */
                    Signature?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'delete_core-{_version}-settings-recovery-secret': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-reports-form-{portal_id}-{form_id}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                portal_id: string;
                form_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    fields?: Record<string, never>;
                    context?: Record<string, never>;
                    legalConsentOptions?: Record<string, never>;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-reports-bug': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'multipart/form-data': {
                    /**
                     * @description Client should supply if mobile app, ask user if web app
                     * @example iOS
                     */
                    OS?: string;
                    /**
                     * @description Client should supply if mobile app, ask user if web app
                     * @example 8.0.3
                     */
                    OSVersion?: string;
                    /**
                     * @description Optional, web app client client should supply, mobile should not use
                     * @example Safari
                     */
                    Browser?: string;
                    /**
                     * @description Optional, web app client client should supply, mobile should not use
                     * @example 8
                     */
                    BrowserVersion?: string;
                    /**
                     * @description Optional, web app client client should supply, mobile should not use
                     * @example LastPass
                     */
                    BrowserExtensions?: string;
                    /**
                     * @description Optional, web app client client should supply, mobile should not use
                     * @example 1024x768
                     */
                    Resolution?: string;
                    /**
                     * @description Optional, web app client client should supply, mobile should not use
                     * @example row
                     */
                    DisplayMode?: string;
                    /**
                     * @description Optional, what triggered the bug report modal to show if it was not the user asking explictly
                     * @example chat-no-agents
                     */
                    Trigger?: string;
                    /**
                     * @description Client should supply
                     * @example Web
                     */
                    Client?: string;
                    /**
                     * @description Client should supply
                     * @example 2.0.0
                     */
                    ClientVersion?: string;
                    /**
                     * @description 1: email, 2: VPN, 3: calendar, 4: drive, 5: pass
                     * @example 1
                     */
                    ClientType?: number;
                    /** @example My issue title */
                    Title?: string;
                    /**
                     * @description Must be at least 10 characters long
                     * @example some text here
                     */
                    Description?: string;
                    /**
                     * @description If user did not enter this themselves and client is unable to detect it, empty string should be posted
                     * @example 4w350m3h4x0r
                     */
                    Username?: string;
                    /**
                     * @description Outside email, must be a valid email address
                     * @example derp@gmail.com
                     */
                    Email?: string;
                    /**
                     * @description Optional, static web site only. Used for the appeal abuse form.
                     * @example myaccount@proton.me
                     */
                    DisabledEmail?: string;
                    /**
                     * @description Optional, VPN only
                     * @example CH
                     */
                    Country?: string;
                    /**
                     * @description Optional, VPN only
                     * @example Makedonski Telekom AD-Skopje
                     */
                    ISP?: string;
                    /**
                     * @description Optional, VPN only
                     * @example VPN for Windows
                     */
                    Platform?: string;
                    /**
                     * @description Optional
                     * @example https://search.brave.com/
                     */
                    Referrer?: string;
                    /**
                     * @description Optional
                     * @example link-footer
                     */
                    ClickOrigin?: string;
                    /**
                     * @description Upload attachments asynchronously
                     * @example 1
                     * @enum {integer}
                     */
                    AsyncAttachments?: 0 | 1;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-reports-bug-attachments': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['UploadAttachment'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'delete_core-{_version}-reports-bug-{ticketId}': {
        parameters: {
            query?: {
                RequesterID?: number;
                CreatedAt?: string;
                BrandID?: number | null;
            };
            header?: never;
            path: {
                _version: string;
                ticketId: Record<string, never>;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
            /** @description Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 2501 */
                        Code?: number;
                        /** @example Ticket does not exist */
                        Error?: string;
                    };
                };
            };
        };
    };
    'post_core-{_version}-reports-abuse': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example harassment */
                    Category?: string;
                    /** @example This person has been harassing me. */
                    Description?: string;
                    /**
                     * @description Usernames to report (comma-delimited)
                     * @example abuser123,abuser456
                     */
                    Usernames?: string;
                    /**
                     * @description Reporter contact email
                     * @example reporter@example.com
                     */
                    Email?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-reports-crash': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description Optional
                     * @example iOS
                     */
                    OS?: string;
                    /**
                     * @description Optional
                     * @example 8.0.3
                     */
                    OSVersion?: string;
                    /**
                     * @description Optional
                     * @example Safari
                     */
                    Browser?: string;
                    /**
                     * @description Optional
                     * @example 8
                     */
                    BrowserVersion?: string;
                    /**
                     * @description Client should supply
                     * @example Web
                     */
                    Client?: string;
                    /**
                     * @description Client should supply
                     * @example 2.0.0
                     */
                    ClientVersion?: string;
                    /**
                     * @description 1 = email, 2 = VPN
                     * @example 1
                     */
                    ClientType?: number;
                    /** @description Client should supply */
                    Debug?: {
                        /** @example you want */
                        'Whatever JSON'?: string;
                    };
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-reports-sentry-api-{id}-{type}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                id: string;
                type: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'post_core-{_version}-reports-phishing': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example I6hgx3Ol-d3HYa3E394T_ACXDmTaBub14w== */
                    MessageID?: string;
                    /**
                     * @description text/html or text/plain
                     * @example text/html
                     */
                    MIMEType?: string;
                    /** @example <decrypted message body> */
                    Body?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-reports-spam': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'post_core-{_version}-reports-cancel-plan': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['CancelPlanReport'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'get_core-{_version}-reset-{username}-{token}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example bob */
                username: string;
                /**
                 * @description 10-character reset token
                 * @example A194YN2F9R
                 */
                token: string;
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /**
                         * @example 1
                         * @enum {integer}
                         */
                        ToMigrate?: 0 | 1;
                        /**
                         * @example 1
                         * @enum {integer}
                         */
                        SupportPgpV6Keys?: 0 | 1;
                        /** @description NB: PrivateKey is null in keys */
                        Addresses?: components['schemas']['AddressUser'][];
                    };
                };
            };
        };
    };
    'post_core-{_version}-reset': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example derp */
                    Username?: string;
                    /**
                     * @description if Phone is not present
                     * @example derp@gmail.com
                     */
                    Email?: string;
                    /**
                     * @description if Email is not present
                     * @example +1234567890
                     */
                    Phone?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
            /** @description Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 19305 */
                        Code?: number;
                        /** @example Username and recovery email mismatch */
                        Error?: string;
                        Details?: string[];
                    };
                };
            };
        };
    };
    'post_core-{_version}-reset-username': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description if Phone is not present
                     * @example derp@gmail.com
                     */
                    Email?: string;
                    /**
                     * @description if Email is not present
                     * @example +1234567890
                     */
                    Phone?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'get_core-{_version}-system-config': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'get_core-{_version}-system-version': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'get_core-{_version}-tests-exception': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'get_core-{_version}-tests-error': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'get_core-{_version}-tests-notice': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'get_core-{_version}-tests-memoryLeak': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'get_core-{_version}-tests-logger': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'get_core-{_version}-tests-logger-observability': {
        parameters: {
            query?: {
                Level?: number;
            };
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'get_core-{_version}-tests-ping': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'get_core-{_version}-tests-version': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'get_core-{_version}-tests-stream': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'get_core-{_version}-update': {
        parameters: {
            query?: {
                /** @example 24m */
                cycle?: string;
            };
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'get_core-{_version}-users-invitations': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    } & components['schemas']['GetUserInvitationsOutput'];
                };
            };
        };
    };
    'post_core-{_version}-users-invitations-{enc_id}-reject': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-users-invitations-{enc_id}-accept': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
            /** @description Validation failed */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 2011 */
                        Code?: number;
                        Details?: {
                            Validation?: components['schemas']['GetUserInvitationOutput'];
                        };
                    };
                };
            };
        };
    };
    'post_core-{_version}-validate-email': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description Email address
                     * @example einstein@pm.me
                     */
                    Email?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
            /** @description Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ProtonError'] & {
                        /**
                         * @description Email address failed validation
                         * @default 2050
                         */
                        Code: unknown;
                    };
                };
            };
        };
    };
    'post_core-{_version}-validate-phone': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description Phone number
                     * @example +37012345678
                     */
                    Phone?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
            /** @description Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['ProtonError'] & {
                        /**
                         * @description Phone number failed validation
                         * @default 2058
                         */
                        Code: unknown;
                    };
                };
            };
        };
    };
    'get_core-{_version}-verification-ownership-{token}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'post_core-{_version}-verification-ownership-{token}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'get_core-{_version}-verification-ownership-email-{token}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'post_core-{_version}-verification-ownership-email-{token}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'get_core-{_version}-verification-ownership-sms-{token}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'post_core-{_version}-verification-ownership-sms-{token}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'post_core-{_version}-verification-ownership-{token}-{code}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                token: string;
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'post_core-{_version}-verification-ownership-email-{token}-{code}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                token: string;
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'post_core-{_version}-verification-ownership-sms-{token}-{code}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                token: string;
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    'get_core-v6-events-{id}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    'x-pm-code': 1000;
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Stream'];
                };
            };
        };
    };
    'get_core-{_version}-events-latest': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /** @example ACXDmTaBub14w== */
                        EventID?: string;
                    };
                };
            };
        };
    };
    'get_core-{_version}-events-{id}': {
        parameters: {
            query?: {
                MessageCounts?: components['schemas']['BoolInt'];
                ConversationCounts?: components['schemas']['BoolInt'];
                NoMetaData?: unknown[];
            };
            header?: never;
            path: {
                _version: string;
                id: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['EventInfo'];
                };
            };
        };
    };
    'get_core-v4-events-{id}': {
        parameters: {
            query?: {
                MessageCounts?: boolean;
                ConversationCounts?: boolean;
            };
            header?: {
                'x-pm-appversion'?: string;
            };
            path: {
                id: components['schemas']['Id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['EventInfo'];
                };
            };
        };
    };
    'post_core-{_version}-feedback': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['FeedbackVO'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'get_core-{_version}-checklist-get-started': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /** @description Array of completed checklist items */
                        Items?: string[];
                        /** @description Timestamp of checklist creation */
                        CreatedAt?: string;
                        /** @description Timestamp of checklist expiration */
                        ExpiresAt?: string;
                        /** @description Amount of storage GB completion reward */
                        RewardInGB?: number;
                    };
                };
            };
        };
    };
    'get_core-{_version}-checklist-paying-user': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /** @description Array of completed checklist items */
                        Items?: string[];
                        /** @description Timestamp of checklist creation */
                        CreatedAt?: string;
                    };
                };
            };
        };
    };
    'post_core-{_version}-checklist-get-started-seen-completed-list': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-checklist-paying-user-hide': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-checklist-paying-user-seen-completed-list': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-checklist-get-started-init': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-checklist-paying-user-init': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-checklist-check-item': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example MobileApp */
                    Item?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-checklist-update-display': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example Hidden */
                    Display?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-verify-send': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @example external_email
                     * @enum {string}
                     */
                    Type?: 'external_email, recovery_email';
                    /** @example me@example.com */
                    Destination?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'post_core-{_version}-verify-validate': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc... */
                    JWT?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /**
                         * @description Previous confirmation state
                         * @example 1
                         */
                        PreviousState?: number;
                    };
                };
            };
        };
    };
    'delete_core-{_version}-verify-validate': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc... */
                    JWT?: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /**
                         * @description Previous confirmation state
                         * @example 1
                         */
                        PreviousState?: number;
                    };
                };
            };
        };
    };
    'post_core-{_version}-verify-email': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /**
                         * @description Previous confirmation state
                         * @example 1
                         */
                        PreviousState?: number;
                    };
                };
            };
        };
    };
    'post_core-{_version}-verify-phone': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /**
                         * @description Previous confirmation state
                         * @example 1
                         */
                        PreviousState?: number;
                    };
                };
            };
        };
    };
    'post_core-{_version}-verify-reauth-email': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
            /** @description Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 12087 */
                        Code?: number;
                        /** @example Invalid or already used token */
                        Error?: string;
                    };
                };
            };
            /** @description Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 9001 */
                        Code?: number;
                        /** @example Human verification required */
                        Error?: string;
                    };
                };
            };
        };
    };
    'post_core-{_version}-verify-reauth-phone': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
            /** @description Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 12087 */
                        Code?: number;
                        /** @example Invalid or already used token */
                        Error?: string;
                    };
                };
            };
            /** @description Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 9001 */
                        Code?: number;
                        /** @example Human verification required */
                        Error?: string;
                    };
                };
            };
        };
    };
    'get_core-{_version}-notifications': {
        parameters: {
            query?: {
                /**
                 * @description Scale for images, 1 for @1x, 2 for @2x, etc. (default is maximum scale available)
                 * @example 2
                 */
                WithImageScale?: number;
                FullScreenImageSupport?: components['schemas']['NotificationRequest']['FullScreenImageSupport'];
                FullScreenImageWidth?: components['schemas']['NotificationRequest']['FullScreenImageWidth'];
                FullScreenImageHeight?: components['schemas']['NotificationRequest']['FullScreenImageHeight'];
                SupportedFullScreenImageFormats?: components['schemas']['NotificationRequest']['SupportedFullScreenImageFormats'];
                Null?: components['schemas']['NotificationRequest']['Null'];
            };
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Notifications?: components['schemas']['NotificationVersionTransformer'][];
                    };
                };
            };
        };
    };
    'patch_core-v4-labels-{enc_id}': {
        parameters: {
            query?: {
                /**
                 * @description the encrypted label id
                 * @example lKJlejjlk==
                 */
                enc_id?: string;
            };
            header?: never;
            path: {
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['PatchInput'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Label?: components['schemas']['Label'];
                    };
                };
            };
            /** @description Invalid request body */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 2500 */
                        Code?: number;
                        /** @example Attribute Expanded should be of type int, null (float given) */
                        Error?: string;
                    };
                };
            };
        };
    };
    'post_core-v4-labels-by-ids': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['LabelIDs'];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Labels?: {
                            [key: string]: components['schemas']['Label'];
                        };
                    };
                };
            };
        };
    };
    'get_core-{_version}-labels': {
        parameters: {
            query?: {
                /**
                 * @description 1 => Message Labels, 2 => Contact Groups, 3 => Message Folders, 4 => Message System Folders
                 * @example 3
                 */
                Type?: number;
            };
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Labels?: components['schemas']['Label'][];
                    };
                };
            };
        };
    };
    'post_core-{_version}-labels': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description required, cannot be same as an existing label of this Type. Max length is 100 characters
                     * @example Red Label
                     */
                    Name?: string;
                    /**
                     * @description required, must match default colors
                     * @example #f66
                     */
                    Color?: string;
                    /**
                     * @description required, 1 => Message Labels (default), 2 => Contact Groups, 3 => Message Folders
                     * @example 1
                     */
                    Type?: number;
                    /**
                     * @description optional, encrypted label id of parent folder, default is root level
                     * @example 3pf-EZUUjP...Pr70RQ==
                     */
                    ParentID?: string;
                    /**
                     * @description optional, 0 => no desktop/email notifications, 1 => notifications, folders only, default is 1 for folders
                     * @example 0
                     */
                    Notify?: number;
                    /**
                     * @description optional, 0 => collapse and hide sub-folders, 1 => expanded and show sub-folders
                     * @example 0
                     */
                    Expanded?: number;
                    /**
                     * @description optional, 0 => not sticky, 1 => stick to the page in the sidebar
                     * @example 0
                     */
                    Sticky?: number;
                    /**
                     * @description
                     *          *              * 1 = show the label in the sidebar
                     *          *              * 0 = hide label from sidebar
                     *          *
                     * @example 0
                     */
                    Display?: number;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Label?: components['schemas']['Label'];
                    };
                };
            };
            /** @description Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 2011 */
                        Code?: number;
                        /** @example Maximum 3 levels in the folder hierarchy */
                        Error?: string;
                    };
                };
            };
            /** @description Already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 2500 */
                        Code?: number;
                        /** @example A label or folder with this name already exists */
                        Error?: string;
                    };
                };
            };
            /** @description Invalid name */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 2011 */
                        Code?: number;
                        /** @example Invalid name */
                        Error?: string;
                    };
                };
            };
        };
    };
    'delete_core-{_version}-labels': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    LabelIDs?: string[];
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 1001 */
                        Code?: number;
                        /** @description Array of responses, one element per label */
                        Responses?: {
                            0?: {
                                /** @example KPlISx5MiML3XcSY-tfNw== */
                                LabelID?: string;
                                Response?: {
                                    Code?: components['schemas']['ResponseCodeSuccess'];
                                };
                            };
                            1?: {
                                /** @example c2RhbGtmamhkbGZrCg== */
                                LabelID?: string;
                                Response?: {
                                    /** @example 2501 */
                                    Code?: number;
                                    /** @example Label or folder does not exist */
                                    Error?: string;
                                };
                            };
                        };
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | {
                              /** @default 2000 */
                              Code: number;
                              /** @default The LabelIDs is required */
                              Error: string;
                              Details?: {
                                  /** @default The LabelIDs is required */
                                  LabelIDs: Record<string, never>;
                              };
                          }
                        | {
                              /** @default 2002 */
                              Code: number;
                              /** @default The LabelIDs must be a array */
                              Error: string;
                              Details?: {
                                  /** @default The LabelIDs must be a array */
                                  LabelIDs: Record<string, never>;
                              };
                          };
                };
            };
        };
    };
    'get_core-{_version}-labels-available': {
        parameters: {
            query: {
                /** @description The name to check */
                Name: string;
                /** @description `1`: Message Labels, `2`: Contact Groups, `3`: Message Folders */
                Type: number;
                /** @description The ParentID under which we check the label name availability */
                ParentID?: string;
            };
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
            /** @description Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 2011 */
                        Code?: number;
                        /** @example Maximum 3 levels in the folder hierarchy */
                        Error?: string;
                    };
                };
            };
            /** @description Name already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 2500 */
                        Code?: number;
                        /** @example A label or folder with this name already exists */
                        Error?: string;
                    };
                };
            };
            /** @description Invalid name */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 2011 */
                        Code?: number;
                        /** @example Invalid name */
                        Error?: string;
                    };
                };
            };
        };
    };
    'put_core-{_version}-labels-order': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @description Will amend the order of labels with the order of the corresponding LabelIDs */
                    LabelIDs?: string[];
                    /**
                     * @description optional
                     * @example 4v-mQLz2NnvtXP0EI3fFSTcSUoZWZ3xgC1Z-Ngg6M2v5nDqV4vGANE33IdHjvyV6_19E9jdhTQA-ndSj2Hi4cQ==
                     */
                    ParentID?: string;
                    /**
                     * @description required, 1 => Message Labels, 2 => Contact Groups, 3 => Message Folders, 4 => Message System Folders
                     * @example 1
                     */
                    Type?: number;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-labels-order-tree-{startLabelId}': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                _version: string;
                startLabelId: (string & components['schemas']['Id']) | null;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-labels-{id}': {
        parameters: {
            query?: {
                /**
                 * @description the encrypted label id
                 * @example lKJlejjlk==
                 */
                enc_id?: string;
                /**
                 * @description the label id
                 * @example 4
                 */
                id?: string;
            };
            header?: never;
            path: {
                _version: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description required, cannot be same as an existing label of this Type. Max length is 100 characters.
                     *          *             Must be the same for Message System Folders (Type = 4)
                     * @example Stuff
                     */
                    Name?: string;
                    /**
                     * @description required
                     * @example #ff9
                     */
                    Color?: string;
                    /**
                     * @description optional
                     * @example 3pf-EZUUjP...Pr70RQ==
                     */
                    ParentID?: string;
                    /**
                     * @description optional
                     * @example 0
                     */
                    Notify?: number;
                    /**
                     * @description optional
                     * @example 0
                     */
                    Expanded?: number;
                    /**
                     * @description optional
                     * @example 0
                     */
                    Sticky?: number;
                    /**
                     * @description optional
                     * @example 0
                     */
                    Display?: number;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        Label?: components['schemas']['Label'];
                    };
                };
            };
            /** @description Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 2011 */
                        Code?: number;
                        /** @example Maximum 3 levels in the folder hierarchy */
                        Error?: string;
                    };
                };
            };
            /** @description Name already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 2500 */
                        Code?: number;
                        /** @example A sub-folder with this name already exists in the destination folder */
                        Error?: string;
                    };
                };
            };
        };
    };
    'delete_core-{_version}-labels-{enc_id}': {
        parameters: {
            query?: {
                /**
                 * @description the encrypted label id
                 * @example lKJlejjlk==
                 */
                enc_id?: string;
            };
            header?: never;
            path: {
                _version: string;
                enc_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                    };
                };
            };
        };
    };
    'put_core-{_version}-labels-{enc_labelID}-detach': {
        parameters: {
            query?: {
                /**
                 * @description the encrypted label id
                 * @example lKJlejjlk==
                 */
                enc_id?: string;
            };
            header?: never;
            path: {
                _version: string;
                enc_labelID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        Code?: components['schemas']['ResponseCodeSuccess'];
                        /** @example 3 */
                        NumMessages?: number;
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json':
                        | {
                              /** @default 2001 */
                              Code: number;
                              /** @default The action can't be performed on this label */
                              Error: string;
                              Details?: {
                                  /** @default LabelID corresponds to a global PM label, which can't be edited by this route */
                                  LabelID: Record<string, never>;
                              };
                          }
                        | {
                              /** @default 2002 */
                              Code: number;
                              /** @default The action can't be performed on this label */
                              Error: string;
                              Details?: {
                                  /** @default LabelID must correspond to a label of the MessageLabel type */
                                  LabelID: Record<string, never>;
                                  /** @default Folder */
                                  LabelTypeReceived: Record<string, never>;
                              };
                          };
                };
            };
            /** @description Unprocessable Entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @default 2501 */
                        Code: number;
                        /** @default Label does not exist */
                        Error: string;
                    };
                };
            };
        };
    };
    'get_core-{_version}-images': {
        parameters: {
            query: {
                /**
                 * @description The percent encoded url to be fetched
                 * @example https%3A%2F%2Fprotonmail.com%2Fimages%2Ffavicon.ico
                 */
                Url: string;
                /**
                 * @description Whether tracked urls should be blocked (not downloaded). Acts as a boolean. Default is 1.<br>
                 *          *         - 0: don't block<br>
                 *          *         - 1: block<br>
                 * @example 1
                 */
                BlockTrackers?: number;
                /**
                 * @description Whether remote data should not be downloaded. Acts as a boolean. Default is 0.<br>
                 *          *         - 0: download (while still respecting BlockTrackers)<br>
                 *          *         - 1: don't download<br>
                 * @example 1
                 */
                DryRun?: number;
            };
            header?: never;
            path: {
                _version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Binary data of the image */
            200: {
                headers: {
                    /** @description If this header is set, the image is being tracked.
                     *                         The value of the headers is the service providing the tracking. */
                    'X-Pm-Tracker-Provider'?: string;
                    [name: string]: unknown;
                };
                content: {
                    'application/octet-stream': string;
                };
            };
            /** @description Return an empty image when we cannot proxy the remote image */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The Url is required */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 2000 */
                        Code?: number;
                        /** @example The Url is required */
                        Error?: string;
                    };
                };
            };
            /** @description The Url is not valid URL */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 2052 */
                        Code?: number;
                        /** @example The Url is not valid URL */
                        Error?: string;
                    };
                };
            };
        };
    };
}
